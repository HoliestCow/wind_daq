#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys
import Health.ttypes
import DetectorCharacteristics.ttypes
import Spectrum.ttypes
import Angular.ttypes
import UUID.ttypes
import PhysicalDimensions.ttypes
import Common.ttypes
import Component.ttypes

from thrift.transport import TTransport
all_structs = []


class NeutronConfiguration(object):
    """
    Attributes:
     - componentId
     - componentPositionAndOrientation
    """


    def __init__(self, componentId=None, componentPositionAndOrientation=None,):
        self.componentId = componentId
        self.componentPositionAndOrientation = componentPositionAndOrientation

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.componentId = UUID.ttypes.UUID()
                    self.componentId.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.componentPositionAndOrientation = Component.ttypes.GridPositionAndOrientation()
                    self.componentPositionAndOrientation.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('NeutronConfiguration')
        if self.componentId is not None:
            oprot.writeFieldBegin('componentId', TType.STRUCT, 1)
            self.componentId.write(oprot)
            oprot.writeFieldEnd()
        if self.componentPositionAndOrientation is not None:
            oprot.writeFieldBegin('componentPositionAndOrientation', TType.STRUCT, 2)
            self.componentPositionAndOrientation.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class NeutronListAndSpectrumConfiguration(object):
    """
    Attributes:
     - componentId
     - componentPositionAndOrientation
     - energyCalibration
    """


    def __init__(self, componentId=None, componentPositionAndOrientation=None, energyCalibration=None,):
        self.componentId = componentId
        self.componentPositionAndOrientation = componentPositionAndOrientation
        self.energyCalibration = energyCalibration

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.componentId = UUID.ttypes.UUID()
                    self.componentId.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.componentPositionAndOrientation = Component.ttypes.GridPositionAndOrientation()
                    self.componentPositionAndOrientation.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.energyCalibration = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = DetectorCharacteristics.ttypes.EnergyCalibration()
                        _elem5.read(iprot)
                        self.energyCalibration.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('NeutronListAndSpectrumConfiguration')
        if self.componentId is not None:
            oprot.writeFieldBegin('componentId', TType.STRUCT, 1)
            self.componentId.write(oprot)
            oprot.writeFieldEnd()
        if self.componentPositionAndOrientation is not None:
            oprot.writeFieldBegin('componentPositionAndOrientation', TType.STRUCT, 2)
            self.componentPositionAndOrientation.write(oprot)
            oprot.writeFieldEnd()
        if self.energyCalibration is not None:
            oprot.writeFieldBegin('energyCalibration', TType.LIST, 3)
            oprot.writeListBegin(TType.STRUCT, len(self.energyCalibration))
            for iter6 in self.energyCalibration:
                iter6.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class NeutronListDefinition(object):
    """
    Attributes:
     - component
     - numberOfChannels
     - physicalDimensions
     - detectorMaterial
     - startingListNeutronConfiguration
     - angularEfficiencies
    """


    def __init__(self, component=None, numberOfChannels=None, physicalDimensions=None, detectorMaterial=None, startingListNeutronConfiguration=None, angularEfficiencies=None,):
        self.component = component
        self.numberOfChannels = numberOfChannels
        self.physicalDimensions = physicalDimensions
        self.detectorMaterial = detectorMaterial
        self.startingListNeutronConfiguration = startingListNeutronConfiguration
        self.angularEfficiencies = angularEfficiencies

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.component = Component.ttypes.ComponentDefinition()
                    self.component.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.numberOfChannels = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.physicalDimensions = PhysicalDimensions.ttypes.Dimensions()
                    self.physicalDimensions.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.detectorMaterial = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRUCT:
                    self.startingListNeutronConfiguration = NeutronListAndSpectrumConfiguration()
                    self.startingListNeutronConfiguration.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.LIST:
                    self.angularEfficiencies = []
                    (_etype10, _size7) = iprot.readListBegin()
                    for _i11 in range(_size7):
                        _elem12 = Angular.ttypes.AngularEfficiencyDefinition()
                        _elem12.read(iprot)
                        self.angularEfficiencies.append(_elem12)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('NeutronListDefinition')
        if self.component is not None:
            oprot.writeFieldBegin('component', TType.STRUCT, 1)
            self.component.write(oprot)
            oprot.writeFieldEnd()
        if self.numberOfChannels is not None:
            oprot.writeFieldBegin('numberOfChannels', TType.I32, 5)
            oprot.writeI32(self.numberOfChannels)
            oprot.writeFieldEnd()
        if self.physicalDimensions is not None:
            oprot.writeFieldBegin('physicalDimensions', TType.STRUCT, 6)
            self.physicalDimensions.write(oprot)
            oprot.writeFieldEnd()
        if self.detectorMaterial is not None:
            oprot.writeFieldBegin('detectorMaterial', TType.I32, 7)
            oprot.writeI32(self.detectorMaterial)
            oprot.writeFieldEnd()
        if self.startingListNeutronConfiguration is not None:
            oprot.writeFieldBegin('startingListNeutronConfiguration', TType.STRUCT, 9)
            self.startingListNeutronConfiguration.write(oprot)
            oprot.writeFieldEnd()
        if self.angularEfficiencies is not None:
            oprot.writeFieldBegin('angularEfficiencies', TType.LIST, 10)
            oprot.writeListBegin(TType.STRUCT, len(self.angularEfficiencies))
            for iter13 in self.angularEfficiencies:
                iter13.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class NeutronListData(object):
    """
    Attributes:
     - componentId
     - timeStamp: Milliseconds since UNIX epoch
     - health
     - listModeData
     - liveTime
     - realTime
    """


    def __init__(self, componentId=None, timeStamp=None, health=None, listModeData=None, liveTime=None, realTime=None,):
        self.componentId = componentId
        self.timeStamp = timeStamp
        self.health = health
        self.listModeData = listModeData
        self.liveTime = liveTime
        self.realTime = realTime

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.componentId = UUID.ttypes.UUID()
                    self.componentId.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.timeStamp = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.health = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.listModeData = []
                    (_etype17, _size14) = iprot.readListBegin()
                    for _i18 in range(_size14):
                        _elem19 = Spectrum.ttypes.ListMode()
                        _elem19.read(iprot)
                        self.listModeData.append(_elem19)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I64:
                    self.liveTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I64:
                    self.realTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('NeutronListData')
        if self.componentId is not None:
            oprot.writeFieldBegin('componentId', TType.STRUCT, 1)
            self.componentId.write(oprot)
            oprot.writeFieldEnd()
        if self.timeStamp is not None:
            oprot.writeFieldBegin('timeStamp', TType.I64, 2)
            oprot.writeI64(self.timeStamp)
            oprot.writeFieldEnd()
        if self.health is not None:
            oprot.writeFieldBegin('health', TType.I32, 3)
            oprot.writeI32(self.health)
            oprot.writeFieldEnd()
        if self.listModeData is not None:
            oprot.writeFieldBegin('listModeData', TType.LIST, 4)
            oprot.writeListBegin(TType.STRUCT, len(self.listModeData))
            for iter20 in self.listModeData:
                iter20.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.liveTime is not None:
            oprot.writeFieldBegin('liveTime', TType.I64, 5)
            oprot.writeI64(self.liveTime)
            oprot.writeFieldEnd()
        if self.realTime is not None:
            oprot.writeFieldBegin('realTime', TType.I64, 6)
            oprot.writeI64(self.realTime)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class NeutronSpectrumDefinition(object):
    """
    Attributes:
     - component
     - numberOfChannels
     - physicalDimensions
     - detectorMaterial
     - startingSpectrumNeutronConfiguration
     - angularEfficiencies
    """


    def __init__(self, component=None, numberOfChannels=None, physicalDimensions=None, detectorMaterial=None, startingSpectrumNeutronConfiguration=None, angularEfficiencies=None,):
        self.component = component
        self.numberOfChannels = numberOfChannels
        self.physicalDimensions = physicalDimensions
        self.detectorMaterial = detectorMaterial
        self.startingSpectrumNeutronConfiguration = startingSpectrumNeutronConfiguration
        self.angularEfficiencies = angularEfficiencies

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.component = Component.ttypes.ComponentDefinition()
                    self.component.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.numberOfChannels = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.physicalDimensions = PhysicalDimensions.ttypes.Dimensions()
                    self.physicalDimensions.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.detectorMaterial = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRUCT:
                    self.startingSpectrumNeutronConfiguration = NeutronListAndSpectrumConfiguration()
                    self.startingSpectrumNeutronConfiguration.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.LIST:
                    self.angularEfficiencies = []
                    (_etype24, _size21) = iprot.readListBegin()
                    for _i25 in range(_size21):
                        _elem26 = Angular.ttypes.AngularEfficiencyDefinition()
                        _elem26.read(iprot)
                        self.angularEfficiencies.append(_elem26)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('NeutronSpectrumDefinition')
        if self.component is not None:
            oprot.writeFieldBegin('component', TType.STRUCT, 1)
            self.component.write(oprot)
            oprot.writeFieldEnd()
        if self.numberOfChannels is not None:
            oprot.writeFieldBegin('numberOfChannels', TType.I32, 5)
            oprot.writeI32(self.numberOfChannels)
            oprot.writeFieldEnd()
        if self.physicalDimensions is not None:
            oprot.writeFieldBegin('physicalDimensions', TType.STRUCT, 6)
            self.physicalDimensions.write(oprot)
            oprot.writeFieldEnd()
        if self.detectorMaterial is not None:
            oprot.writeFieldBegin('detectorMaterial', TType.I32, 7)
            oprot.writeI32(self.detectorMaterial)
            oprot.writeFieldEnd()
        if self.startingSpectrumNeutronConfiguration is not None:
            oprot.writeFieldBegin('startingSpectrumNeutronConfiguration', TType.STRUCT, 9)
            self.startingSpectrumNeutronConfiguration.write(oprot)
            oprot.writeFieldEnd()
        if self.angularEfficiencies is not None:
            oprot.writeFieldBegin('angularEfficiencies', TType.LIST, 10)
            oprot.writeListBegin(TType.STRUCT, len(self.angularEfficiencies))
            for iter27 in self.angularEfficiencies:
                iter27.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class NeutronSpectrumData(object):
    """
    Attributes:
     - componentId
     - timeStamp: Milliseconds since UNIX epoch
     - health
     - spectrum
     - liveTime
     - realTime
    """


    def __init__(self, componentId=None, timeStamp=None, health=None, spectrum=None, liveTime=None, realTime=None,):
        self.componentId = componentId
        self.timeStamp = timeStamp
        self.health = health
        self.spectrum = spectrum
        self.liveTime = liveTime
        self.realTime = realTime

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.componentId = UUID.ttypes.UUID()
                    self.componentId.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.timeStamp = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.health = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.spectrum = Spectrum.ttypes.SpectrumResult()
                    self.spectrum.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I64:
                    self.liveTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I64:
                    self.realTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('NeutronSpectrumData')
        if self.componentId is not None:
            oprot.writeFieldBegin('componentId', TType.STRUCT, 1)
            self.componentId.write(oprot)
            oprot.writeFieldEnd()
        if self.timeStamp is not None:
            oprot.writeFieldBegin('timeStamp', TType.I64, 2)
            oprot.writeI64(self.timeStamp)
            oprot.writeFieldEnd()
        if self.health is not None:
            oprot.writeFieldBegin('health', TType.I32, 3)
            oprot.writeI32(self.health)
            oprot.writeFieldEnd()
        if self.spectrum is not None:
            oprot.writeFieldBegin('spectrum', TType.STRUCT, 4)
            self.spectrum.write(oprot)
            oprot.writeFieldEnd()
        if self.liveTime is not None:
            oprot.writeFieldBegin('liveTime', TType.I64, 5)
            oprot.writeI64(self.liveTime)
            oprot.writeFieldEnd()
        if self.realTime is not None:
            oprot.writeFieldBegin('realTime', TType.I64, 6)
            oprot.writeI64(self.realTime)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class NeutronGrossCountDefinition(object):
    """
    Attributes:
     - component
     - physicalDimensions
     - detectorMaterial
     - startingNeutronConfiguration
    """


    def __init__(self, component=None, physicalDimensions=None, detectorMaterial=None, startingNeutronConfiguration=None,):
        self.component = component
        self.physicalDimensions = physicalDimensions
        self.detectorMaterial = detectorMaterial
        self.startingNeutronConfiguration = startingNeutronConfiguration

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.component = Component.ttypes.ComponentDefinition()
                    self.component.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.physicalDimensions = PhysicalDimensions.ttypes.Dimensions()
                    self.physicalDimensions.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.detectorMaterial = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRUCT:
                    self.startingNeutronConfiguration = NeutronConfiguration()
                    self.startingNeutronConfiguration.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('NeutronGrossCountDefinition')
        if self.component is not None:
            oprot.writeFieldBegin('component', TType.STRUCT, 1)
            self.component.write(oprot)
            oprot.writeFieldEnd()
        if self.physicalDimensions is not None:
            oprot.writeFieldBegin('physicalDimensions', TType.STRUCT, 5)
            self.physicalDimensions.write(oprot)
            oprot.writeFieldEnd()
        if self.detectorMaterial is not None:
            oprot.writeFieldBegin('detectorMaterial', TType.I32, 6)
            oprot.writeI32(self.detectorMaterial)
            oprot.writeFieldEnd()
        if self.startingNeutronConfiguration is not None:
            oprot.writeFieldBegin('startingNeutronConfiguration', TType.STRUCT, 7)
            self.startingNeutronConfiguration.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class NeutronGrossCountData(object):
    """
    Attributes:
     - componentId
     - timeStamp: Milliseconds since UNIX epoch
     - health
     - counts
     - liveTime
     - realTime
    """


    def __init__(self, componentId=None, timeStamp=None, health=None, counts=None, liveTime=None, realTime=None,):
        self.componentId = componentId
        self.timeStamp = timeStamp
        self.health = health
        self.counts = counts
        self.liveTime = liveTime
        self.realTime = realTime

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.componentId = UUID.ttypes.UUID()
                    self.componentId.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.timeStamp = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.health = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.counts = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I64:
                    self.liveTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I64:
                    self.realTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('NeutronGrossCountData')
        if self.componentId is not None:
            oprot.writeFieldBegin('componentId', TType.STRUCT, 1)
            self.componentId.write(oprot)
            oprot.writeFieldEnd()
        if self.timeStamp is not None:
            oprot.writeFieldBegin('timeStamp', TType.I64, 2)
            oprot.writeI64(self.timeStamp)
            oprot.writeFieldEnd()
        if self.health is not None:
            oprot.writeFieldBegin('health', TType.I32, 3)
            oprot.writeI32(self.health)
            oprot.writeFieldEnd()
        if self.counts is not None:
            oprot.writeFieldBegin('counts', TType.I32, 4)
            oprot.writeI32(self.counts)
            oprot.writeFieldEnd()
        if self.liveTime is not None:
            oprot.writeFieldBegin('liveTime', TType.I64, 5)
            oprot.writeI64(self.liveTime)
            oprot.writeFieldEnd()
        if self.realTime is not None:
            oprot.writeFieldBegin('realTime', TType.I64, 6)
            oprot.writeI64(self.realTime)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(NeutronConfiguration)
NeutronConfiguration.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'componentId', [UUID.ttypes.UUID, None], None, ),  # 1
    (2, TType.STRUCT, 'componentPositionAndOrientation', [Component.ttypes.GridPositionAndOrientation, None], None, ),  # 2
)
all_structs.append(NeutronListAndSpectrumConfiguration)
NeutronListAndSpectrumConfiguration.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'componentId', [UUID.ttypes.UUID, None], None, ),  # 1
    (2, TType.STRUCT, 'componentPositionAndOrientation', [Component.ttypes.GridPositionAndOrientation, None], None, ),  # 2
    (3, TType.LIST, 'energyCalibration', (TType.STRUCT, [DetectorCharacteristics.ttypes.EnergyCalibration, None], False), None, ),  # 3
)
all_structs.append(NeutronListDefinition)
NeutronListDefinition.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'component', [Component.ttypes.ComponentDefinition, None], None, ),  # 1
    None,  # 2
    None,  # 3
    None,  # 4
    (5, TType.I32, 'numberOfChannels', None, None, ),  # 5
    (6, TType.STRUCT, 'physicalDimensions', [PhysicalDimensions.ttypes.Dimensions, None], None, ),  # 6
    (7, TType.I32, 'detectorMaterial', None, None, ),  # 7
    None,  # 8
    (9, TType.STRUCT, 'startingListNeutronConfiguration', [NeutronListAndSpectrumConfiguration, None], None, ),  # 9
    (10, TType.LIST, 'angularEfficiencies', (TType.STRUCT, [Angular.ttypes.AngularEfficiencyDefinition, None], False), None, ),  # 10
)
all_structs.append(NeutronListData)
NeutronListData.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'componentId', [UUID.ttypes.UUID, None], None, ),  # 1
    (2, TType.I64, 'timeStamp', None, None, ),  # 2
    (3, TType.I32, 'health', None, None, ),  # 3
    (4, TType.LIST, 'listModeData', (TType.STRUCT, [Spectrum.ttypes.ListMode, None], False), None, ),  # 4
    (5, TType.I64, 'liveTime', None, None, ),  # 5
    (6, TType.I64, 'realTime', None, None, ),  # 6
)
all_structs.append(NeutronSpectrumDefinition)
NeutronSpectrumDefinition.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'component', [Component.ttypes.ComponentDefinition, None], None, ),  # 1
    None,  # 2
    None,  # 3
    None,  # 4
    (5, TType.I32, 'numberOfChannels', None, None, ),  # 5
    (6, TType.STRUCT, 'physicalDimensions', [PhysicalDimensions.ttypes.Dimensions, None], None, ),  # 6
    (7, TType.I32, 'detectorMaterial', None, None, ),  # 7
    None,  # 8
    (9, TType.STRUCT, 'startingSpectrumNeutronConfiguration', [NeutronListAndSpectrumConfiguration, None], None, ),  # 9
    (10, TType.LIST, 'angularEfficiencies', (TType.STRUCT, [Angular.ttypes.AngularEfficiencyDefinition, None], False), None, ),  # 10
)
all_structs.append(NeutronSpectrumData)
NeutronSpectrumData.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'componentId', [UUID.ttypes.UUID, None], None, ),  # 1
    (2, TType.I64, 'timeStamp', None, None, ),  # 2
    (3, TType.I32, 'health', None, None, ),  # 3
    (4, TType.STRUCT, 'spectrum', [Spectrum.ttypes.SpectrumResult, None], None, ),  # 4
    (5, TType.I64, 'liveTime', None, None, ),  # 5
    (6, TType.I64, 'realTime', None, None, ),  # 6
)
all_structs.append(NeutronGrossCountDefinition)
NeutronGrossCountDefinition.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'component', [Component.ttypes.ComponentDefinition, None], None, ),  # 1
    None,  # 2
    None,  # 3
    None,  # 4
    (5, TType.STRUCT, 'physicalDimensions', [PhysicalDimensions.ttypes.Dimensions, None], None, ),  # 5
    (6, TType.I32, 'detectorMaterial', None, None, ),  # 6
    (7, TType.STRUCT, 'startingNeutronConfiguration', [NeutronConfiguration, None], None, ),  # 7
)
all_structs.append(NeutronGrossCountData)
NeutronGrossCountData.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'componentId', [UUID.ttypes.UUID, None], None, ),  # 1
    (2, TType.I64, 'timeStamp', None, None, ),  # 2
    (3, TType.I32, 'health', None, None, ),  # 3
    (4, TType.I32, 'counts', None, None, ),  # 4
    (5, TType.I64, 'liveTime', None, None, ),  # 5
    (6, TType.I64, 'realTime', None, None, ),  # 6
)
fix_spec(all_structs)
del all_structs
