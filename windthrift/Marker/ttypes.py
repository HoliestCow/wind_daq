#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys
import GammaSensor.ttypes
import NeutronSensor.ttypes
import EnvironmentalSensor.ttypes
import AlgorithmPayload.ttypes
import UUID.ttypes
import Navigation.ttypes

from thrift.transport import TTransport
all_structs = []


class MarkerType(object):
    PTU = 0
    Source = 1
    Other = 2

    _VALUES_TO_NAMES = {
        0: "PTU",
        1: "Source",
        2: "Other",
    }

    _NAMES_TO_VALUES = {
        "PTU": 0,
        "Source": 1,
        "Other": 2,
    }


class Marker(object):
    """
    Attributes:
     - markerId
     - timeStamp: POSIX time * 1000 - should match data packet's time stamp
     - name
     - type
     - location
     - unitId: Unique ID of PTU to be used when type is PTU
     - gammaSpectrumData: Optional data that can be associated with marker and used for generating radiation maps, etc.
     - gammaListData
     - gammaGrossCountData
     - gammaDoseData
     - neutronListData
     - neutronSpectrumData
     - neutronGrossCountData
     - environmentalData
     - algorithmData
    """


    def __init__(self, markerId=None, timeStamp=None, name=None, type=None, location=None, unitId=None, gammaSpectrumData=None, gammaListData=None, gammaGrossCountData=None, gammaDoseData=None, neutronListData=None, neutronSpectrumData=None, neutronGrossCountData=None, environmentalData=None, algorithmData=None,):
        self.markerId = markerId
        self.timeStamp = timeStamp
        self.name = name
        self.type = type
        self.location = location
        self.unitId = unitId
        self.gammaSpectrumData = gammaSpectrumData
        self.gammaListData = gammaListData
        self.gammaGrossCountData = gammaGrossCountData
        self.gammaDoseData = gammaDoseData
        self.neutronListData = neutronListData
        self.neutronSpectrumData = neutronSpectrumData
        self.neutronGrossCountData = neutronGrossCountData
        self.environmentalData = environmentalData
        self.algorithmData = algorithmData

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.markerId = UUID.ttypes.UUID()
                    self.markerId.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.timeStamp = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.location = Navigation.ttypes.Location()
                    self.location.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRUCT:
                    self.unitId = UUID.ttypes.UUID()
                    self.unitId.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.LIST:
                    self.gammaSpectrumData = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = GammaSensor.ttypes.GammaSpectrumData()
                        _elem5.read(iprot)
                        self.gammaSpectrumData.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.LIST:
                    self.gammaListData = []
                    (_etype9, _size6) = iprot.readListBegin()
                    for _i10 in range(_size6):
                        _elem11 = GammaSensor.ttypes.GammaListData()
                        _elem11.read(iprot)
                        self.gammaListData.append(_elem11)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.LIST:
                    self.gammaGrossCountData = []
                    (_etype15, _size12) = iprot.readListBegin()
                    for _i16 in range(_size12):
                        _elem17 = GammaSensor.ttypes.GammaGrossCountData()
                        _elem17.read(iprot)
                        self.gammaGrossCountData.append(_elem17)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.LIST:
                    self.gammaDoseData = []
                    (_etype21, _size18) = iprot.readListBegin()
                    for _i22 in range(_size18):
                        _elem23 = GammaSensor.ttypes.GammaDoseData()
                        _elem23.read(iprot)
                        self.gammaDoseData.append(_elem23)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.LIST:
                    self.neutronListData = []
                    (_etype27, _size24) = iprot.readListBegin()
                    for _i28 in range(_size24):
                        _elem29 = NeutronSensor.ttypes.NeutronListData()
                        _elem29.read(iprot)
                        self.neutronListData.append(_elem29)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.LIST:
                    self.neutronSpectrumData = []
                    (_etype33, _size30) = iprot.readListBegin()
                    for _i34 in range(_size30):
                        _elem35 = NeutronSensor.ttypes.NeutronSpectrumData()
                        _elem35.read(iprot)
                        self.neutronSpectrumData.append(_elem35)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.LIST:
                    self.neutronGrossCountData = []
                    (_etype39, _size36) = iprot.readListBegin()
                    for _i40 in range(_size36):
                        _elem41 = NeutronSensor.ttypes.NeutronGrossCountData()
                        _elem41.read(iprot)
                        self.neutronGrossCountData.append(_elem41)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.LIST:
                    self.environmentalData = []
                    (_etype45, _size42) = iprot.readListBegin()
                    for _i46 in range(_size42):
                        _elem47 = EnvironmentalSensor.ttypes.EnvironmentalSensorData()
                        _elem47.read(iprot)
                        self.environmentalData.append(_elem47)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 17:
                if ftype == TType.LIST:
                    self.algorithmData = []
                    (_etype51, _size48) = iprot.readListBegin()
                    for _i52 in range(_size48):
                        _elem53 = AlgorithmPayload.ttypes.AlgorithmData()
                        _elem53.read(iprot)
                        self.algorithmData.append(_elem53)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Marker')
        if self.markerId is not None:
            oprot.writeFieldBegin('markerId', TType.STRUCT, 1)
            self.markerId.write(oprot)
            oprot.writeFieldEnd()
        if self.timeStamp is not None:
            oprot.writeFieldBegin('timeStamp', TType.I64, 2)
            oprot.writeI64(self.timeStamp)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 3)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.I32, 4)
            oprot.writeI32(self.type)
            oprot.writeFieldEnd()
        if self.location is not None:
            oprot.writeFieldBegin('location', TType.STRUCT, 5)
            self.location.write(oprot)
            oprot.writeFieldEnd()
        if self.unitId is not None:
            oprot.writeFieldBegin('unitId', TType.STRUCT, 8)
            self.unitId.write(oprot)
            oprot.writeFieldEnd()
        if self.gammaSpectrumData is not None:
            oprot.writeFieldBegin('gammaSpectrumData', TType.LIST, 9)
            oprot.writeListBegin(TType.STRUCT, len(self.gammaSpectrumData))
            for iter54 in self.gammaSpectrumData:
                iter54.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.gammaListData is not None:
            oprot.writeFieldBegin('gammaListData', TType.LIST, 10)
            oprot.writeListBegin(TType.STRUCT, len(self.gammaListData))
            for iter55 in self.gammaListData:
                iter55.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.gammaGrossCountData is not None:
            oprot.writeFieldBegin('gammaGrossCountData', TType.LIST, 11)
            oprot.writeListBegin(TType.STRUCT, len(self.gammaGrossCountData))
            for iter56 in self.gammaGrossCountData:
                iter56.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.gammaDoseData is not None:
            oprot.writeFieldBegin('gammaDoseData', TType.LIST, 12)
            oprot.writeListBegin(TType.STRUCT, len(self.gammaDoseData))
            for iter57 in self.gammaDoseData:
                iter57.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.neutronListData is not None:
            oprot.writeFieldBegin('neutronListData', TType.LIST, 13)
            oprot.writeListBegin(TType.STRUCT, len(self.neutronListData))
            for iter58 in self.neutronListData:
                iter58.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.neutronSpectrumData is not None:
            oprot.writeFieldBegin('neutronSpectrumData', TType.LIST, 14)
            oprot.writeListBegin(TType.STRUCT, len(self.neutronSpectrumData))
            for iter59 in self.neutronSpectrumData:
                iter59.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.neutronGrossCountData is not None:
            oprot.writeFieldBegin('neutronGrossCountData', TType.LIST, 15)
            oprot.writeListBegin(TType.STRUCT, len(self.neutronGrossCountData))
            for iter60 in self.neutronGrossCountData:
                iter60.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.environmentalData is not None:
            oprot.writeFieldBegin('environmentalData', TType.LIST, 16)
            oprot.writeListBegin(TType.STRUCT, len(self.environmentalData))
            for iter61 in self.environmentalData:
                iter61.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.algorithmData is not None:
            oprot.writeFieldBegin('algorithmData', TType.LIST, 17)
            oprot.writeListBegin(TType.STRUCT, len(self.algorithmData))
            for iter62 in self.algorithmData:
                iter62.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(Marker)
Marker.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'markerId', [UUID.ttypes.UUID, None], None, ),  # 1
    (2, TType.I64, 'timeStamp', None, None, ),  # 2
    (3, TType.STRING, 'name', 'UTF8', None, ),  # 3
    (4, TType.I32, 'type', None, None, ),  # 4
    (5, TType.STRUCT, 'location', [Navigation.ttypes.Location, None], None, ),  # 5
    None,  # 6
    None,  # 7
    (8, TType.STRUCT, 'unitId', [UUID.ttypes.UUID, None], None, ),  # 8
    (9, TType.LIST, 'gammaSpectrumData', (TType.STRUCT, [GammaSensor.ttypes.GammaSpectrumData, None], False), None, ),  # 9
    (10, TType.LIST, 'gammaListData', (TType.STRUCT, [GammaSensor.ttypes.GammaListData, None], False), None, ),  # 10
    (11, TType.LIST, 'gammaGrossCountData', (TType.STRUCT, [GammaSensor.ttypes.GammaGrossCountData, None], False), None, ),  # 11
    (12, TType.LIST, 'gammaDoseData', (TType.STRUCT, [GammaSensor.ttypes.GammaDoseData, None], False), None, ),  # 12
    (13, TType.LIST, 'neutronListData', (TType.STRUCT, [NeutronSensor.ttypes.NeutronListData, None], False), None, ),  # 13
    (14, TType.LIST, 'neutronSpectrumData', (TType.STRUCT, [NeutronSensor.ttypes.NeutronSpectrumData, None], False), None, ),  # 14
    (15, TType.LIST, 'neutronGrossCountData', (TType.STRUCT, [NeutronSensor.ttypes.NeutronGrossCountData, None], False), None, ),  # 15
    (16, TType.LIST, 'environmentalData', (TType.STRUCT, [EnvironmentalSensor.ttypes.EnvironmentalSensorData, None], False), None, ),  # 16
    (17, TType.LIST, 'algorithmData', (TType.STRUCT, [AlgorithmPayload.ttypes.AlgorithmData, None], False), None, ),  # 17
)
fix_spec(all_structs)
del all_structs
