#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys
import Component.ttypes
import UUID.ttypes
import PhysicalDimensions.ttypes

from thrift.transport import TTransport
all_structs = []


class Constituent(object):
    """
    Attributes:
     - Z
     - MassNumber
     - ConstituentName
     - AtomicFraction
     - MassFraction
    """


    def __init__(self, Z=None, MassNumber=None, ConstituentName=None, AtomicFraction=None, MassFraction=None,):
        self.Z = Z
        self.MassNumber = MassNumber
        self.ConstituentName = ConstituentName
        self.AtomicFraction = AtomicFraction
        self.MassFraction = MassFraction

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.Z = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.MassNumber = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.ConstituentName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.DOUBLE:
                    self.AtomicFraction = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.DOUBLE:
                    self.MassFraction = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Constituent')
        if self.Z is not None:
            oprot.writeFieldBegin('Z', TType.I32, 1)
            oprot.writeI32(self.Z)
            oprot.writeFieldEnd()
        if self.MassNumber is not None:
            oprot.writeFieldBegin('MassNumber', TType.I32, 2)
            oprot.writeI32(self.MassNumber)
            oprot.writeFieldEnd()
        if self.ConstituentName is not None:
            oprot.writeFieldBegin('ConstituentName', TType.STRING, 3)
            oprot.writeString(self.ConstituentName.encode('utf-8') if sys.version_info[0] == 2 else self.ConstituentName)
            oprot.writeFieldEnd()
        if self.AtomicFraction is not None:
            oprot.writeFieldBegin('AtomicFraction', TType.DOUBLE, 4)
            oprot.writeDouble(self.AtomicFraction)
            oprot.writeFieldEnd()
        if self.MassFraction is not None:
            oprot.writeFieldBegin('MassFraction', TType.DOUBLE, 5)
            oprot.writeDouble(self.MassFraction)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Material(object):
    """
    Attributes:
     - Density
     - constituents
     - MaterialName
    """


    def __init__(self, Density=None, constituents=None, MaterialName=None,):
        self.Density = Density
        self.constituents = constituents
        self.MaterialName = MaterialName

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.DOUBLE:
                    self.Density = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.constituents = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = Constituent()
                        _elem5.read(iprot)
                        self.constituents.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.MaterialName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Material')
        if self.Density is not None:
            oprot.writeFieldBegin('Density', TType.DOUBLE, 1)
            oprot.writeDouble(self.Density)
            oprot.writeFieldEnd()
        if self.constituents is not None:
            oprot.writeFieldBegin('constituents', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.constituents))
            for iter6 in self.constituents:
                iter6.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.MaterialName is not None:
            oprot.writeFieldBegin('MaterialName', TType.STRING, 3)
            oprot.writeString(self.MaterialName.encode('utf-8') if sys.version_info[0] == 2 else self.MaterialName)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class PassiveMaterialConfiguration(object):
    """
    Attributes:
     - componentId
     - componentName
     - vendorName
     - physicalDimensions
     - passiveMaterial
     - passiveMaterialPositionAndOrientation
    """


    def __init__(self, componentId=None, componentName=None, vendorName=None, physicalDimensions=None, passiveMaterial=None, passiveMaterialPositionAndOrientation=None,):
        self.componentId = componentId
        self.componentName = componentName
        self.vendorName = vendorName
        self.physicalDimensions = physicalDimensions
        self.passiveMaterial = passiveMaterial
        self.passiveMaterialPositionAndOrientation = passiveMaterialPositionAndOrientation

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.componentId = UUID.ttypes.UUID()
                    self.componentId.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.componentName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.vendorName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.physicalDimensions = PhysicalDimensions.ttypes.Dimensions()
                    self.physicalDimensions.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.passiveMaterial = Material()
                    self.passiveMaterial.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.passiveMaterialPositionAndOrientation = Component.ttypes.GridPositionAndOrientation()
                    self.passiveMaterialPositionAndOrientation.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('PassiveMaterialConfiguration')
        if self.componentId is not None:
            oprot.writeFieldBegin('componentId', TType.STRUCT, 1)
            self.componentId.write(oprot)
            oprot.writeFieldEnd()
        if self.componentName is not None:
            oprot.writeFieldBegin('componentName', TType.STRING, 2)
            oprot.writeString(self.componentName.encode('utf-8') if sys.version_info[0] == 2 else self.componentName)
            oprot.writeFieldEnd()
        if self.vendorName is not None:
            oprot.writeFieldBegin('vendorName', TType.STRING, 3)
            oprot.writeString(self.vendorName.encode('utf-8') if sys.version_info[0] == 2 else self.vendorName)
            oprot.writeFieldEnd()
        if self.physicalDimensions is not None:
            oprot.writeFieldBegin('physicalDimensions', TType.STRUCT, 4)
            self.physicalDimensions.write(oprot)
            oprot.writeFieldEnd()
        if self.passiveMaterial is not None:
            oprot.writeFieldBegin('passiveMaterial', TType.STRUCT, 5)
            self.passiveMaterial.write(oprot)
            oprot.writeFieldEnd()
        if self.passiveMaterialPositionAndOrientation is not None:
            oprot.writeFieldBegin('passiveMaterialPositionAndOrientation', TType.STRUCT, 6)
            self.passiveMaterialPositionAndOrientation.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(Constituent)
Constituent.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'Z', None, None, ),  # 1
    (2, TType.I32, 'MassNumber', None, None, ),  # 2
    (3, TType.STRING, 'ConstituentName', 'UTF8', None, ),  # 3
    (4, TType.DOUBLE, 'AtomicFraction', None, None, ),  # 4
    (5, TType.DOUBLE, 'MassFraction', None, None, ),  # 5
)
all_structs.append(Material)
Material.thrift_spec = (
    None,  # 0
    (1, TType.DOUBLE, 'Density', None, None, ),  # 1
    (2, TType.LIST, 'constituents', (TType.STRUCT, [Constituent, None], False), None, ),  # 2
    (3, TType.STRING, 'MaterialName', 'UTF8', None, ),  # 3
)
all_structs.append(PassiveMaterialConfiguration)
PassiveMaterialConfiguration.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'componentId', [UUID.ttypes.UUID, None], None, ),  # 1
    (2, TType.STRING, 'componentName', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'vendorName', 'UTF8', None, ),  # 3
    (4, TType.STRUCT, 'physicalDimensions', [PhysicalDimensions.ttypes.Dimensions, None], None, ),  # 4
    (5, TType.STRUCT, 'passiveMaterial', [Material, None], None, ),  # 5
    (6, TType.STRUCT, 'passiveMaterialPositionAndOrientation', [Component.ttypes.GridPositionAndOrientation, None], None, ),  # 6
)
fix_spec(all_structs)
del all_structs
