#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from PTUServices import PTU
from PTUServices.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  string ping()')
    print('  void restart()')
    print('  void exit()')
    print('  void shutdown()')
    print('  RecordingConfiguration startRecording(string campaign, string tag, i32 measurementNumber, string description, string location, i64 duration, RecordingType recordingType)')
    print('  RecordingConfiguration getRecordingConfiguration(UUID recordingId)')
    print('  RecordingConfiguration setRecordingDuration(i64 duration)')
    print('   getRecordings()')
    print('  bool endRecording()')
    print('  bool deleteRecordings( recordingIds)')
    print('  Status getStatus()')
    print('  UnitDefinition getUnitDefinition()')
    print('  SystemDefinition getSystemDefinition()')
    print('  SystemConfiguration getSystemConfiguration()')
    print('  SystemConfiguration setSystemConfiguration(SystemConfiguration systemConfig)')
    print('  DataPayload getLatestData(DataFilter requestedData)')
    print('   getDataSinceTime(UUID recordingId, i64 lastTime, DataFilter requestedData)')
    print('   getDataSinceTimeWithLimit(UUID recordingId, i64 lastTime, i32 limit, DataFilter requestedData)')
    print('   getDataInTimeWindow(UUID recordingId, i64 startTime, i64 endTime, DataFilter requestedData)')
    print('   getDataInTimeWindowWithLimit(UUID recordingId, i64 startTime, i64 endTime, i32 limit, DataFilter requestedData)')
    print('  string getDataFile(string fileName)')
    print('  void sendCommand(UUID componentId, Command command)')
    print('  Waypoint addWaypoint(string name, Location location)')
    print('  Waypoint editWaypoint(Waypoint waypoint)')
    print('  void deleteWaypoint(UUID waypointId)')
    print('   getWaypoints()')
    print('  BoundingBox addBoundingBox(string name,  vertices, BoundingBoxType type)')
    print('  BoundingBox editBoundingBox(BoundingBox boundingBox)')
    print('  void deleteBoundingBox(UUID boundingBoxId)')
    print('   getBoundingBoxes()')
    print('  Message addMessage(string message, i64 timeStampSent)')
    print('  Message editMessage(Message message)')
    print('  void deleteMessage(UUID messageId)')
    print('   getMessages()')
    print('  Marker addMarker(string name, MarkerType type, Location location)')
    print('  Marker editMarker(Marker marker)')
    print('  void deleteMarker(UUID markerId)')
    print('   getMarkers()')
    print('  MapOverlay addMapOverlay(string name, Location location, double width, double height, MapOverlayType type, string image)')
    print('  void editMapOverlay(MapOverlay overlay)')
    print('  void deleteMapOverlay(UUID mapOverlayId)')
    print('   getMapOverlays()')
    print('  bool registerAlgorithm(string uri, AlgorithmDefinition definition)')
    print('  void setCVRSAddress(string uri)')
    print('  UUID initiateCVRSSession()')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = PTU.Client(protocol)
transport.open()

if cmd == 'ping':
    if len(args) != 0:
        print('ping requires 0 args')
        sys.exit(1)
    pp.pprint(client.ping())

elif cmd == 'restart':
    if len(args) != 0:
        print('restart requires 0 args')
        sys.exit(1)
    pp.pprint(client.restart())

elif cmd == 'exit':
    if len(args) != 0:
        print('exit requires 0 args')
        sys.exit(1)
    pp.pprint(client.exit())

elif cmd == 'shutdown':
    if len(args) != 0:
        print('shutdown requires 0 args')
        sys.exit(1)
    pp.pprint(client.shutdown())

elif cmd == 'startRecording':
    if len(args) != 7:
        print('startRecording requires 7 args')
        sys.exit(1)
    pp.pprint(client.startRecording(args[0], args[1], eval(args[2]), args[3], args[4], eval(args[5]), eval(args[6]),))

elif cmd == 'getRecordingConfiguration':
    if len(args) != 1:
        print('getRecordingConfiguration requires 1 args')
        sys.exit(1)
    pp.pprint(client.getRecordingConfiguration(eval(args[0]),))

elif cmd == 'setRecordingDuration':
    if len(args) != 1:
        print('setRecordingDuration requires 1 args')
        sys.exit(1)
    pp.pprint(client.setRecordingDuration(eval(args[0]),))

elif cmd == 'getRecordings':
    if len(args) != 0:
        print('getRecordings requires 0 args')
        sys.exit(1)
    pp.pprint(client.getRecordings())

elif cmd == 'endRecording':
    if len(args) != 0:
        print('endRecording requires 0 args')
        sys.exit(1)
    pp.pprint(client.endRecording())

elif cmd == 'deleteRecordings':
    if len(args) != 1:
        print('deleteRecordings requires 1 args')
        sys.exit(1)
    pp.pprint(client.deleteRecordings(eval(args[0]),))

elif cmd == 'getStatus':
    if len(args) != 0:
        print('getStatus requires 0 args')
        sys.exit(1)
    pp.pprint(client.getStatus())

elif cmd == 'getUnitDefinition':
    if len(args) != 0:
        print('getUnitDefinition requires 0 args')
        sys.exit(1)
    pp.pprint(client.getUnitDefinition())

elif cmd == 'getSystemDefinition':
    if len(args) != 0:
        print('getSystemDefinition requires 0 args')
        sys.exit(1)
    pp.pprint(client.getSystemDefinition())

elif cmd == 'getSystemConfiguration':
    if len(args) != 0:
        print('getSystemConfiguration requires 0 args')
        sys.exit(1)
    pp.pprint(client.getSystemConfiguration())

elif cmd == 'setSystemConfiguration':
    if len(args) != 1:
        print('setSystemConfiguration requires 1 args')
        sys.exit(1)
    pp.pprint(client.setSystemConfiguration(eval(args[0]),))

elif cmd == 'getLatestData':
    if len(args) != 1:
        print('getLatestData requires 1 args')
        sys.exit(1)
    pp.pprint(client.getLatestData(eval(args[0]),))

elif cmd == 'getDataSinceTime':
    if len(args) != 3:
        print('getDataSinceTime requires 3 args')
        sys.exit(1)
    pp.pprint(client.getDataSinceTime(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'getDataSinceTimeWithLimit':
    if len(args) != 4:
        print('getDataSinceTimeWithLimit requires 4 args')
        sys.exit(1)
    pp.pprint(client.getDataSinceTimeWithLimit(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'getDataInTimeWindow':
    if len(args) != 4:
        print('getDataInTimeWindow requires 4 args')
        sys.exit(1)
    pp.pprint(client.getDataInTimeWindow(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'getDataInTimeWindowWithLimit':
    if len(args) != 5:
        print('getDataInTimeWindowWithLimit requires 5 args')
        sys.exit(1)
    pp.pprint(client.getDataInTimeWindowWithLimit(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]), eval(args[4]),))

elif cmd == 'getDataFile':
    if len(args) != 1:
        print('getDataFile requires 1 args')
        sys.exit(1)
    pp.pprint(client.getDataFile(args[0],))

elif cmd == 'sendCommand':
    if len(args) != 2:
        print('sendCommand requires 2 args')
        sys.exit(1)
    pp.pprint(client.sendCommand(eval(args[0]), eval(args[1]),))

elif cmd == 'addWaypoint':
    if len(args) != 2:
        print('addWaypoint requires 2 args')
        sys.exit(1)
    pp.pprint(client.addWaypoint(args[0], eval(args[1]),))

elif cmd == 'editWaypoint':
    if len(args) != 1:
        print('editWaypoint requires 1 args')
        sys.exit(1)
    pp.pprint(client.editWaypoint(eval(args[0]),))

elif cmd == 'deleteWaypoint':
    if len(args) != 1:
        print('deleteWaypoint requires 1 args')
        sys.exit(1)
    pp.pprint(client.deleteWaypoint(eval(args[0]),))

elif cmd == 'getWaypoints':
    if len(args) != 0:
        print('getWaypoints requires 0 args')
        sys.exit(1)
    pp.pprint(client.getWaypoints())

elif cmd == 'addBoundingBox':
    if len(args) != 3:
        print('addBoundingBox requires 3 args')
        sys.exit(1)
    pp.pprint(client.addBoundingBox(args[0], eval(args[1]), eval(args[2]),))

elif cmd == 'editBoundingBox':
    if len(args) != 1:
        print('editBoundingBox requires 1 args')
        sys.exit(1)
    pp.pprint(client.editBoundingBox(eval(args[0]),))

elif cmd == 'deleteBoundingBox':
    if len(args) != 1:
        print('deleteBoundingBox requires 1 args')
        sys.exit(1)
    pp.pprint(client.deleteBoundingBox(eval(args[0]),))

elif cmd == 'getBoundingBoxes':
    if len(args) != 0:
        print('getBoundingBoxes requires 0 args')
        sys.exit(1)
    pp.pprint(client.getBoundingBoxes())

elif cmd == 'addMessage':
    if len(args) != 2:
        print('addMessage requires 2 args')
        sys.exit(1)
    pp.pprint(client.addMessage(args[0], eval(args[1]),))

elif cmd == 'editMessage':
    if len(args) != 1:
        print('editMessage requires 1 args')
        sys.exit(1)
    pp.pprint(client.editMessage(eval(args[0]),))

elif cmd == 'deleteMessage':
    if len(args) != 1:
        print('deleteMessage requires 1 args')
        sys.exit(1)
    pp.pprint(client.deleteMessage(eval(args[0]),))

elif cmd == 'getMessages':
    if len(args) != 0:
        print('getMessages requires 0 args')
        sys.exit(1)
    pp.pprint(client.getMessages())

elif cmd == 'addMarker':
    if len(args) != 3:
        print('addMarker requires 3 args')
        sys.exit(1)
    pp.pprint(client.addMarker(args[0], eval(args[1]), eval(args[2]),))

elif cmd == 'editMarker':
    if len(args) != 1:
        print('editMarker requires 1 args')
        sys.exit(1)
    pp.pprint(client.editMarker(eval(args[0]),))

elif cmd == 'deleteMarker':
    if len(args) != 1:
        print('deleteMarker requires 1 args')
        sys.exit(1)
    pp.pprint(client.deleteMarker(eval(args[0]),))

elif cmd == 'getMarkers':
    if len(args) != 0:
        print('getMarkers requires 0 args')
        sys.exit(1)
    pp.pprint(client.getMarkers())

elif cmd == 'addMapOverlay':
    if len(args) != 6:
        print('addMapOverlay requires 6 args')
        sys.exit(1)
    pp.pprint(client.addMapOverlay(args[0], eval(args[1]), eval(args[2]), eval(args[3]), eval(args[4]), args[5],))

elif cmd == 'editMapOverlay':
    if len(args) != 1:
        print('editMapOverlay requires 1 args')
        sys.exit(1)
    pp.pprint(client.editMapOverlay(eval(args[0]),))

elif cmd == 'deleteMapOverlay':
    if len(args) != 1:
        print('deleteMapOverlay requires 1 args')
        sys.exit(1)
    pp.pprint(client.deleteMapOverlay(eval(args[0]),))

elif cmd == 'getMapOverlays':
    if len(args) != 0:
        print('getMapOverlays requires 0 args')
        sys.exit(1)
    pp.pprint(client.getMapOverlays())

elif cmd == 'registerAlgorithm':
    if len(args) != 2:
        print('registerAlgorithm requires 2 args')
        sys.exit(1)
    pp.pprint(client.registerAlgorithm(args[0], eval(args[1]),))

elif cmd == 'setCVRSAddress':
    if len(args) != 1:
        print('setCVRSAddress requires 1 args')
        sys.exit(1)
    pp.pprint(client.setCVRSAddress(args[0],))

elif cmd == 'initiateCVRSSession':
    if len(args) != 0:
        print('initiateCVRSSession requires 0 args')
        sys.exit(1)
    pp.pprint(client.initiateCVRSSession())

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
