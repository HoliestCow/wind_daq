#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys
import logging
from .ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
all_structs = []


class Iface(object):
    """
    CVRSEndpoint

    This is the service implemented by WIND-compliant CVRS
    software, and provides a mechanism for the PTU to push
    data, status, and other information to the CVRS.

    This service defines a basic flow for connecting to a
    CVRS and sending it data. Each time a PTU re-establishes
    connection to the CVRS, the PTU MUST call these methods
    in the following order:

    	1. registerPtu
    	2. define
    	loop (1hz):
    		3. reportStatus
    		4. pushData
    		5. pushAcknowledgements

    The initial registration establishes a session between the PTU
    and the CVRS which can be used to track the state of the connection.
    The CVRS MAY determine that a session has become invalid if it has
    not received a message from the PTU within a reasonable period of time.

    The specific semantics of each method are described in the
    comments on the method definitions below.
    *
    """
    def registerPtu(self, unitDefinition):
        """
        Parameters:
         - unitDefinition
        """
        pass

    def define(self, sessionId, status, systemDefinition, systemConfiguration, recordingUpdate):
        """
        Parameters:
         - sessionId
         - status
         - systemDefinition
         - systemConfiguration
         - recordingUpdate
        """
        pass

    def reportStatus(self, sessionId, status, definitionAndConfigurationUpdate):
        """
        Parameters:
         - sessionId
         - status
         - definitionAndConfigurationUpdate
        """
        pass

    def pushData(self, sessionId, datum, definitionAndConfigurationUpdate):
        """
        Parameters:
         - sessionId
         - datum
         - definitionAndConfigurationUpdate
        """
        pass

    def pushAcknowledgements(self, sessionId, acknowledgements):
        """
        Parameters:
         - sessionId
         - acknowledgements
        """
        pass


class Client(Iface):
    """
    CVRSEndpoint

    This is the service implemented by WIND-compliant CVRS
    software, and provides a mechanism for the PTU to push
    data, status, and other information to the CVRS.

    This service defines a basic flow for connecting to a
    CVRS and sending it data. Each time a PTU re-establishes
    connection to the CVRS, the PTU MUST call these methods
    in the following order:

    	1. registerPtu
    	2. define
    	loop (1hz):
    		3. reportStatus
    		4. pushData
    		5. pushAcknowledgements

    The initial registration establishes a session between the PTU
    and the CVRS which can be used to track the state of the connection.
    The CVRS MAY determine that a session has become invalid if it has
    not received a message from the PTU within a reasonable period of time.

    The specific semantics of each method are described in the
    comments on the method definitions below.
    *
    """
    def __init__(self, iprot, oprot=None):
        self._iprot = self._oprot = iprot
        if oprot is not None:
            self._oprot = oprot
        self._seqid = 0

    def registerPtu(self, unitDefinition):
        """
        Parameters:
         - unitDefinition
        """
        self.send_registerPtu(unitDefinition)
        return self.recv_registerPtu()

    def send_registerPtu(self, unitDefinition):
        self._oprot.writeMessageBegin('registerPtu', TMessageType.CALL, self._seqid)
        args = registerPtu_args()
        args.unitDefinition = unitDefinition
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_registerPtu(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = registerPtu_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "registerPtu failed: unknown result")

    def define(self, sessionId, status, systemDefinition, systemConfiguration, recordingUpdate):
        """
        Parameters:
         - sessionId
         - status
         - systemDefinition
         - systemConfiguration
         - recordingUpdate
        """
        self.send_define(sessionId, status, systemDefinition, systemConfiguration, recordingUpdate)
        return self.recv_define()

    def send_define(self, sessionId, status, systemDefinition, systemConfiguration, recordingUpdate):
        self._oprot.writeMessageBegin('define', TMessageType.CALL, self._seqid)
        args = define_args()
        args.sessionId = sessionId
        args.status = status
        args.systemDefinition = systemDefinition
        args.systemConfiguration = systemConfiguration
        args.recordingUpdate = recordingUpdate
        print('here')
        args.write(self._oprot)
        print('made it')
        self._oprot.writeMessageEnd()
        print('made it 2')
        self._oprot.trans.flush()
        print('made it 3')

    def recv_define(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = define_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.error is not None:
            raise result.error
        raise TApplicationException(TApplicationException.MISSING_RESULT, "define failed: unknown result")

    def reportStatus(self, sessionId, status, definitionAndConfigurationUpdate):
        """
        Parameters:
         - sessionId
         - status
         - definitionAndConfigurationUpdate
        """
        self.send_reportStatus(sessionId, status, definitionAndConfigurationUpdate)
        return self.recv_reportStatus()

    def send_reportStatus(self, sessionId, status, definitionAndConfigurationUpdate):
        self._oprot.writeMessageBegin('reportStatus', TMessageType.CALL, self._seqid)
        args = reportStatus_args()
        args.sessionId = sessionId
        args.status = status
        args.definitionAndConfigurationUpdate = definitionAndConfigurationUpdate
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_reportStatus(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = reportStatus_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.error is not None:
            raise result.error
        raise TApplicationException(TApplicationException.MISSING_RESULT, "reportStatus failed: unknown result")

    def pushData(self, sessionId, datum, definitionAndConfigurationUpdate):
        """
        Parameters:
         - sessionId
         - datum
         - definitionAndConfigurationUpdate
        """
        self.send_pushData(sessionId, datum, definitionAndConfigurationUpdate)
        return self.recv_pushData()

    def send_pushData(self, sessionId, datum, definitionAndConfigurationUpdate):
        self._oprot.writeMessageBegin('pushData', TMessageType.CALL, self._seqid)
        args = pushData_args()
        args.sessionId = sessionId
        args.datum = datum
        args.definitionAndConfigurationUpdate = definitionAndConfigurationUpdate
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_pushData(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = pushData_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.error is not None:
            raise result.error
        raise TApplicationException(TApplicationException.MISSING_RESULT, "pushData failed: unknown result")

    def pushAcknowledgements(self, sessionId, acknowledgements):
        """
        Parameters:
         - sessionId
         - acknowledgements
        """
        self.send_pushAcknowledgements(sessionId, acknowledgements)
        return self.recv_pushAcknowledgements()

    def send_pushAcknowledgements(self, sessionId, acknowledgements):
        self._oprot.writeMessageBegin('pushAcknowledgements', TMessageType.CALL, self._seqid)
        args = pushAcknowledgements_args()
        args.sessionId = sessionId
        args.acknowledgements = acknowledgements
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_pushAcknowledgements(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = pushAcknowledgements_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.error is not None:
            raise result.error
        raise TApplicationException(TApplicationException.MISSING_RESULT, "pushAcknowledgements failed: unknown result")


class Processor(Iface, TProcessor):
    def __init__(self, handler):
        self._handler = handler
        self._processMap = {}
        self._processMap["registerPtu"] = Processor.process_registerPtu
        self._processMap["define"] = Processor.process_define
        self._processMap["reportStatus"] = Processor.process_reportStatus
        self._processMap["pushData"] = Processor.process_pushData
        self._processMap["pushAcknowledgements"] = Processor.process_pushAcknowledgements

    def process(self, iprot, oprot):
        (name, type, seqid) = iprot.readMessageBegin()
        if name not in self._processMap:
            iprot.skip(TType.STRUCT)
            iprot.readMessageEnd()
            x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
            oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
            x.write(oprot)
            oprot.writeMessageEnd()
            oprot.trans.flush()
            return
        else:
            self._processMap[name](self, seqid, iprot, oprot)
        return True

    def process_registerPtu(self, seqid, iprot, oprot):
        args = registerPtu_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = registerPtu_result()
        try:
            result.success = self._handler.registerPtu(args.unitDefinition)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("registerPtu", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_define(self, seqid, iprot, oprot):
        args = define_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = define_result()
        try:
            result.success = self._handler.define(args.sessionId, args.status, args.systemDefinition, args.systemConfiguration, args.recordingUpdate)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except Exceptions.ttypes.InvalidSession as error:
            msg_type = TMessageType.REPLY
            result.error = error
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("define", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_reportStatus(self, seqid, iprot, oprot):
        args = reportStatus_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = reportStatus_result()
        try:
            result.success = self._handler.reportStatus(args.sessionId, args.status, args.definitionAndConfigurationUpdate)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except Exceptions.ttypes.InvalidSession as error:
            msg_type = TMessageType.REPLY
            result.error = error
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("reportStatus", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_pushData(self, seqid, iprot, oprot):
        args = pushData_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = pushData_result()
        try:
            result.success = self._handler.pushData(args.sessionId, args.datum, args.definitionAndConfigurationUpdate)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except Exceptions.ttypes.InvalidSession as error:
            msg_type = TMessageType.REPLY
            result.error = error
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("pushData", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_pushAcknowledgements(self, seqid, iprot, oprot):
        args = pushAcknowledgements_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = pushAcknowledgements_result()
        try:
            result.success = self._handler.pushAcknowledgements(args.sessionId, args.acknowledgements)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except Exceptions.ttypes.InvalidSession as error:
            msg_type = TMessageType.REPLY
            result.error = error
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("pushAcknowledgements", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

# HELPER FUNCTIONS AND STRUCTURES


class registerPtu_args(object):
    """
    Attributes:
     - unitDefinition
    """


    def __init__(self, unitDefinition=None,):
        self.unitDefinition = unitDefinition

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.unitDefinition = PTUPayload.ttypes.UnitDefinition()
                    self.unitDefinition.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('registerPtu_args')
        if self.unitDefinition is not None:
            oprot.writeFieldBegin('unitDefinition', TType.STRUCT, 1)
            self.unitDefinition.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(registerPtu_args)
registerPtu_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'unitDefinition', [PTUPayload.ttypes.UnitDefinition, None], None, ),  # 1
)


class registerPtu_result(object):
    """
    Attributes:
     - success
    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = Session()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('registerPtu_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(registerPtu_result)
registerPtu_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [Session, None], None, ),  # 0
)


class define_args(object):
    """
    Attributes:
     - sessionId
     - status
     - systemDefinition
     - systemConfiguration
     - recordingUpdate
    """


    def __init__(self, sessionId=None, status=None, systemDefinition=None, systemConfiguration=None, recordingUpdate=None,):
        self.sessionId = sessionId
        self.status = status
        self.systemDefinition = systemDefinition
        self.systemConfiguration = systemConfiguration
        self.recordingUpdate = recordingUpdate

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.sessionId = UUID.ttypes.UUID()
                    self.sessionId.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.status = PTUPayload.ttypes.Status()
                    self.status.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.systemDefinition = PTUPayload.ttypes.SystemDefinition()
                    self.systemDefinition.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.systemConfiguration = PTUPayload.ttypes.SystemConfiguration()
                    self.systemConfiguration.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.recordingUpdate = RecordingUpdate()
                    self.recordingUpdate.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('define_args')
        if self.sessionId is not None:
            oprot.writeFieldBegin('sessionId', TType.STRUCT, 1)
            self.sessionId.write(oprot)
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.STRUCT, 2)
            self.status.write(oprot)
            oprot.writeFieldEnd()
        if self.systemDefinition is not None:
            oprot.writeFieldBegin('systemDefinition', TType.STRUCT, 3)
            self.systemDefinition.write(oprot)
            oprot.writeFieldEnd()
        if self.systemConfiguration is not None:
            oprot.writeFieldBegin('systemConfiguration', TType.STRUCT, 4)
            self.systemConfiguration.write(oprot)
            oprot.writeFieldEnd()
        if self.recordingUpdate is not None:
            oprot.writeFieldBegin('recordingUpdate', TType.STRUCT, 5)
            self.recordingUpdate.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(define_args)
define_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'sessionId', [UUID.ttypes.UUID, None], None, ),  # 1
    (2, TType.STRUCT, 'status', [PTUPayload.ttypes.Status, None], None, ),  # 2
    (3, TType.STRUCT, 'systemDefinition', [PTUPayload.ttypes.SystemDefinition, None], None, ),  # 3
    (4, TType.STRUCT, 'systemConfiguration', [PTUPayload.ttypes.SystemConfiguration, None], None, ),  # 4
    (5, TType.STRUCT, 'recordingUpdate', [RecordingUpdate, None], None, ),  # 5
)


class define_result(object):
    """
    Attributes:
     - success
     - error
    """


    def __init__(self, success=None, error=None,):
        self.success = success
        self.error = error

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.BOOL:
                    self.success = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.error = Exceptions.ttypes.InvalidSession()
                    self.error.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('define_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.BOOL, 0)
            oprot.writeBool(self.success)
            oprot.writeFieldEnd()
        if self.error is not None:
            oprot.writeFieldBegin('error', TType.STRUCT, 1)
            self.error.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(define_result)
define_result.thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'error', [Exceptions.ttypes.InvalidSession, None], None, ),  # 1
)


class reportStatus_args(object):
    """
    Attributes:
     - sessionId
     - status
     - definitionAndConfigurationUpdate
    """


    def __init__(self, sessionId=None, status=None, definitionAndConfigurationUpdate=None,):
        self.sessionId = sessionId
        self.status = status
        self.definitionAndConfigurationUpdate = definitionAndConfigurationUpdate

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.sessionId = UUID.ttypes.UUID()
                    self.sessionId.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.status = PTUPayload.ttypes.Status()
                    self.status.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.definitionAndConfigurationUpdate = DefinitionAndConfigurationUpdate()
                    self.definitionAndConfigurationUpdate.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('reportStatus_args')
        if self.sessionId is not None:
            oprot.writeFieldBegin('sessionId', TType.STRUCT, 1)
            self.sessionId.write(oprot)
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.STRUCT, 2)
            self.status.write(oprot)
            oprot.writeFieldEnd()
        if self.definitionAndConfigurationUpdate is not None:
            oprot.writeFieldBegin('definitionAndConfigurationUpdate', TType.STRUCT, 3)
            self.definitionAndConfigurationUpdate.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(reportStatus_args)
reportStatus_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'sessionId', [UUID.ttypes.UUID, None], None, ),  # 1
    (2, TType.STRUCT, 'status', [PTUPayload.ttypes.Status, None], None, ),  # 2
    (3, TType.STRUCT, 'definitionAndConfigurationUpdate', [DefinitionAndConfigurationUpdate, None], None, ),  # 3
)


class reportStatus_result(object):
    """
    Attributes:
     - success
     - error
    """


    def __init__(self, success=None, error=None,):
        self.success = success
        self.error = error

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = ControlMessage()
                        _elem5.read(iprot)
                        self.success.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.error = Exceptions.ttypes.InvalidSession()
                    self.error.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('reportStatus_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.STRUCT, len(self.success))
            for iter6 in self.success:
                iter6.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.error is not None:
            oprot.writeFieldBegin('error', TType.STRUCT, 1)
            self.error.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(reportStatus_result)
reportStatus_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT, [ControlMessage, None], False), None, ),  # 0
    (1, TType.STRUCT, 'error', [Exceptions.ttypes.InvalidSession, None], None, ),  # 1
)


class pushData_args(object):
    """
    Attributes:
     - sessionId
     - datum
     - definitionAndConfigurationUpdate
    """


    def __init__(self, sessionId=None, datum=None, definitionAndConfigurationUpdate=None,):
        self.sessionId = sessionId
        self.datum = datum
        self.definitionAndConfigurationUpdate = definitionAndConfigurationUpdate

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.sessionId = UUID.ttypes.UUID()
                    self.sessionId.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.datum = PTUPayload.ttypes.DataPayload()
                    self.datum.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.definitionAndConfigurationUpdate = DefinitionAndConfigurationUpdate()
                    self.definitionAndConfigurationUpdate.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('pushData_args')
        if self.sessionId is not None:
            oprot.writeFieldBegin('sessionId', TType.STRUCT, 1)
            self.sessionId.write(oprot)
            oprot.writeFieldEnd()
        if self.datum is not None:
            oprot.writeFieldBegin('datum', TType.STRUCT, 2)
            self.datum.write(oprot)
            oprot.writeFieldEnd()
        if self.definitionAndConfigurationUpdate is not None:
            oprot.writeFieldBegin('definitionAndConfigurationUpdate', TType.STRUCT, 3)
            self.definitionAndConfigurationUpdate.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(pushData_args)
pushData_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'sessionId', [UUID.ttypes.UUID, None], None, ),  # 1
    (2, TType.STRUCT, 'datum', [PTUPayload.ttypes.DataPayload, None], None, ),  # 2
    (3, TType.STRUCT, 'definitionAndConfigurationUpdate', [DefinitionAndConfigurationUpdate, None], None, ),  # 3
)


class pushData_result(object):
    """
    Attributes:
     - success
     - error
    """


    def __init__(self, success=None, error=None,):
        self.success = success
        self.error = error

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.BOOL:
                    self.success = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.error = Exceptions.ttypes.InvalidSession()
                    self.error.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('pushData_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.BOOL, 0)
            oprot.writeBool(self.success)
            oprot.writeFieldEnd()
        if self.error is not None:
            oprot.writeFieldBegin('error', TType.STRUCT, 1)
            self.error.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(pushData_result)
pushData_result.thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'error', [Exceptions.ttypes.InvalidSession, None], None, ),  # 1
)


class pushAcknowledgements_args(object):
    """
    Attributes:
     - sessionId
     - acknowledgements
    """


    def __init__(self, sessionId=None, acknowledgements=None,):
        self.sessionId = sessionId
        self.acknowledgements = acknowledgements

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.sessionId = UUID.ttypes.UUID()
                    self.sessionId.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.acknowledgements = []
                    (_etype10, _size7) = iprot.readListBegin()
                    for _i11 in range(_size7):
                        _elem12 = ControlMessageAck()
                        _elem12.read(iprot)
                        self.acknowledgements.append(_elem12)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('pushAcknowledgements_args')
        if self.sessionId is not None:
            oprot.writeFieldBegin('sessionId', TType.STRUCT, 1)
            self.sessionId.write(oprot)
            oprot.writeFieldEnd()
        if self.acknowledgements is not None:
            oprot.writeFieldBegin('acknowledgements', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.acknowledgements))
            for iter13 in self.acknowledgements:
                iter13.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(pushAcknowledgements_args)
pushAcknowledgements_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'sessionId', [UUID.ttypes.UUID, None], None, ),  # 1
    (2, TType.LIST, 'acknowledgements', (TType.STRUCT, [ControlMessageAck, None], False), None, ),  # 2
)


class pushAcknowledgements_result(object):
    """
    Attributes:
     - success
     - error
    """


    def __init__(self, success=None, error=None,):
        self.success = success
        self.error = error

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.BOOL:
                    self.success = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.error = Exceptions.ttypes.InvalidSession()
                    self.error.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('pushAcknowledgements_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.BOOL, 0)
            oprot.writeBool(self.success)
            oprot.writeFieldEnd()
        if self.error is not None:
            oprot.writeFieldBegin('error', TType.STRUCT, 1)
            self.error.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(pushAcknowledgements_result)
pushAcknowledgements_result.thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'error', [Exceptions.ttypes.InvalidSession, None], None, ),  # 1
)
fix_spec(all_structs)
del all_structs

