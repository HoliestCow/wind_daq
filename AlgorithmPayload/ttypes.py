#
# Autogenerated by Thrift Compiler (1.0.0-dev)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys
import Identification.ttypes
import Localization.ttypes
import Detection.ttypes
import Health.ttypes
import UUID.ttypes

from thrift.transport import TTransport
all_structs = []


class AlgorithmConfiguration(object):
    """
    Defines algorithm settings that are changeable, but aren't data gathered by the sensor

    Attributes:
     - componentId
     - identificationConfiguration
     - detectionConfiguration
     - localizationConfiguration
    """


    def __init__(self, componentId=None, identificationConfiguration=None, detectionConfiguration=None, localizationConfiguration=None,):
        self.componentId = componentId
        self.identificationConfiguration = identificationConfiguration
        self.detectionConfiguration = detectionConfiguration
        self.localizationConfiguration = localizationConfiguration

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.componentId = UUID.ttypes.UUID()
                    self.componentId.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.identificationConfiguration = Identification.ttypes.IdentificationConfiguration()
                    self.identificationConfiguration.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.detectionConfiguration = Detection.ttypes.DetectionConfiguration()
                    self.detectionConfiguration.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.localizationConfiguration = Localization.ttypes.LocalizationConfiguration()
                    self.localizationConfiguration.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('AlgorithmConfiguration')
        if self.componentId is not None:
            oprot.writeFieldBegin('componentId', TType.STRUCT, 1)
            self.componentId.write(oprot)
            oprot.writeFieldEnd()
        if self.identificationConfiguration is not None:
            oprot.writeFieldBegin('identificationConfiguration', TType.STRUCT, 2)
            self.identificationConfiguration.write(oprot)
            oprot.writeFieldEnd()
        if self.detectionConfiguration is not None:
            oprot.writeFieldBegin('detectionConfiguration', TType.STRUCT, 3)
            self.detectionConfiguration.write(oprot)
            oprot.writeFieldEnd()
        if self.localizationConfiguration is not None:
            oprot.writeFieldBegin('localizationConfiguration', TType.STRUCT, 4)
            self.localizationConfiguration.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class AlgorithmDefinition(object):
    """
    Defines what the algorithm is and what it's capabilities are.  This should not change during normal operation

    Attributes:
     - componentId: Used to match data, configuration, and defintion.  MUST be unique in the system
     - componentName: RECOMMENDED should be unique or it will be hard to distinguish sensors in the UI
     - vendorName
     - version
     - doesIdentification
     - doesDetection
     - doesLocalization
     - hasDose
     - identificationDefinitions: Supports multiple identification algorithms
     - detectionDefinitions: Supports multiple detection algorithms
     - localizationDefinitions: Supports multiple localizationDefinitions
    """


    def __init__(self, componentId=None, componentName=None, vendorName=None, version=None, doesIdentification=False, doesDetection=False, doesLocalization=False, hasDose=False, identificationDefinitions=None, detectionDefinitions=None, localizationDefinitions=None,):
        self.componentId = componentId
        self.componentName = componentName
        self.vendorName = vendorName
        self.version = version
        self.doesIdentification = doesIdentification
        self.doesDetection = doesDetection
        self.doesLocalization = doesLocalization
        self.hasDose = hasDose
        self.identificationDefinitions = identificationDefinitions
        self.detectionDefinitions = detectionDefinitions
        self.localizationDefinitions = localizationDefinitions

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.componentId = UUID.ttypes.UUID()
                    self.componentId.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.componentName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.vendorName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.version = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.BOOL:
                    self.doesIdentification = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.BOOL:
                    self.doesDetection = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.BOOL:
                    self.doesLocalization = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.BOOL:
                    self.hasDose = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.LIST:
                    self.identificationDefinitions = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = Identification.ttypes.IdentificationDefinition()
                        _elem5.read(iprot)
                        self.identificationDefinitions.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.LIST:
                    self.detectionDefinitions = []
                    (_etype9, _size6) = iprot.readListBegin()
                    for _i10 in range(_size6):
                        _elem11 = Detection.ttypes.DetectionDefinition()
                        _elem11.read(iprot)
                        self.detectionDefinitions.append(_elem11)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.LIST:
                    self.localizationDefinitions = []
                    (_etype15, _size12) = iprot.readListBegin()
                    for _i16 in range(_size12):
                        _elem17 = Localization.ttypes.LocalizationDefinition()
                        _elem17.read(iprot)
                        self.localizationDefinitions.append(_elem17)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('AlgorithmDefinition')
        if self.componentId is not None:
            oprot.writeFieldBegin('componentId', TType.STRUCT, 1)
            self.componentId.write(oprot)
            oprot.writeFieldEnd()
        if self.componentName is not None:
            oprot.writeFieldBegin('componentName', TType.STRING, 2)
            oprot.writeString(self.componentName.encode('utf-8') if sys.version_info[0] == 2 else self.componentName)
            oprot.writeFieldEnd()
        if self.vendorName is not None:
            oprot.writeFieldBegin('vendorName', TType.STRING, 3)
            oprot.writeString(self.vendorName.encode('utf-8') if sys.version_info[0] == 2 else self.vendorName)
            oprot.writeFieldEnd()
        if self.version is not None:
            oprot.writeFieldBegin('version', TType.STRING, 4)
            oprot.writeString(self.version.encode('utf-8') if sys.version_info[0] == 2 else self.version)
            oprot.writeFieldEnd()
        if self.doesIdentification is not None:
            oprot.writeFieldBegin('doesIdentification', TType.BOOL, 6)
            oprot.writeBool(self.doesIdentification)
            oprot.writeFieldEnd()
        if self.doesDetection is not None:
            oprot.writeFieldBegin('doesDetection', TType.BOOL, 7)
            oprot.writeBool(self.doesDetection)
            oprot.writeFieldEnd()
        if self.doesLocalization is not None:
            oprot.writeFieldBegin('doesLocalization', TType.BOOL, 8)
            oprot.writeBool(self.doesLocalization)
            oprot.writeFieldEnd()
        if self.hasDose is not None:
            oprot.writeFieldBegin('hasDose', TType.BOOL, 9)
            oprot.writeBool(self.hasDose)
            oprot.writeFieldEnd()
        if self.identificationDefinitions is not None:
            oprot.writeFieldBegin('identificationDefinitions', TType.LIST, 10)
            oprot.writeListBegin(TType.STRUCT, len(self.identificationDefinitions))
            for iter18 in self.identificationDefinitions:
                iter18.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.detectionDefinitions is not None:
            oprot.writeFieldBegin('detectionDefinitions', TType.LIST, 11)
            oprot.writeListBegin(TType.STRUCT, len(self.detectionDefinitions))
            for iter19 in self.detectionDefinitions:
                iter19.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.localizationDefinitions is not None:
            oprot.writeFieldBegin('localizationDefinitions', TType.LIST, 12)
            oprot.writeListBegin(TType.STRUCT, len(self.localizationDefinitions))
            for iter20 in self.localizationDefinitions:
                iter20.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class AlgorithmData(object):
    """
    Attributes:
     - componentId: Used to match data, configuration, and defintion.  Must be unique in the system
     - startTimeStamp: Milliseconds since UNIX epoch - The start time associated with the Algorithm Result.  Used to match data and results
     - endTimeStamp: Milliseconds since UNIX epoch - The end time associated with the Algorithm Result.  Used to match data and results
     - health
     - identificationResults: SHOULD only be included if identification results available
     - identificationConfigurations: SHOULD only be included if configuration has changed
     - detectionResults: SHOULD only be included if detection results available
     - detectionConfigurations: SHOULD onlly be included if configuraton has changed
     - localizationResults: SHOULD only be included if localization results available
     - localizationConfigurations: SHOULD only be included if configuraton has changed
     - dose: Units TBD
     - debugData: Included for passing temporary varaibles for debugging.  String is used as all simple types can be converted to a string and back.
    """


    def __init__(self, componentId=None, startTimeStamp=None, endTimeStamp=None, health=None, identificationResults=None, identificationConfigurations=None, detectionResults=None, detectionConfigurations=None, localizationResults=None, localizationConfigurations=None, dose=None, debugData=None,):
        self.componentId = componentId
        self.startTimeStamp = startTimeStamp
        self.endTimeStamp = endTimeStamp
        self.health = health
        self.identificationResults = identificationResults
        self.identificationConfigurations = identificationConfigurations
        self.detectionResults = detectionResults
        self.detectionConfigurations = detectionConfigurations
        self.localizationResults = localizationResults
        self.localizationConfigurations = localizationConfigurations
        self.dose = dose
        self.debugData = debugData

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.componentId = UUID.ttypes.UUID()
                    self.componentId.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.startTimeStamp = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.endTimeStamp = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.health = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.LIST:
                    self.identificationResults = []
                    (_etype24, _size21) = iprot.readListBegin()
                    for _i25 in range(_size21):
                        _elem26 = Identification.ttypes.IdentificationResult()
                        _elem26.read(iprot)
                        self.identificationResults.append(_elem26)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.LIST:
                    self.identificationConfigurations = []
                    (_etype30, _size27) = iprot.readListBegin()
                    for _i31 in range(_size27):
                        _elem32 = Identification.ttypes.IdentificationConfiguration()
                        _elem32.read(iprot)
                        self.identificationConfigurations.append(_elem32)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.LIST:
                    self.detectionResults = []
                    (_etype36, _size33) = iprot.readListBegin()
                    for _i37 in range(_size33):
                        _elem38 = Detection.ttypes.DetectionResult()
                        _elem38.read(iprot)
                        self.detectionResults.append(_elem38)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.LIST:
                    self.detectionConfigurations = []
                    (_etype42, _size39) = iprot.readListBegin()
                    for _i43 in range(_size39):
                        _elem44 = Detection.ttypes.DetectionConfiguration()
                        _elem44.read(iprot)
                        self.detectionConfigurations.append(_elem44)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.LIST:
                    self.localizationResults = []
                    (_etype48, _size45) = iprot.readListBegin()
                    for _i49 in range(_size45):
                        _elem50 = Localization.ttypes.LocalizationResult()
                        _elem50.read(iprot)
                        self.localizationResults.append(_elem50)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.LIST:
                    self.localizationConfigurations = []
                    (_etype54, _size51) = iprot.readListBegin()
                    for _i55 in range(_size51):
                        _elem56 = Localization.ttypes.LocalizationConfiguration()
                        _elem56.read(iprot)
                        self.localizationConfigurations.append(_elem56)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.DOUBLE:
                    self.dose = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.MAP:
                    self.debugData = {}
                    (_ktype58, _vtype59, _size57) = iprot.readMapBegin()
                    for _i61 in range(_size57):
                        _key62 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val63 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.debugData[_key62] = _val63
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('AlgorithmData')
        if self.componentId is not None:
            oprot.writeFieldBegin('componentId', TType.STRUCT, 1)
            self.componentId.write(oprot)
            oprot.writeFieldEnd()
        if self.startTimeStamp is not None:
            oprot.writeFieldBegin('startTimeStamp', TType.I64, 2)
            oprot.writeI64(self.startTimeStamp)
            oprot.writeFieldEnd()
        if self.endTimeStamp is not None:
            oprot.writeFieldBegin('endTimeStamp', TType.I64, 3)
            oprot.writeI64(self.endTimeStamp)
            oprot.writeFieldEnd()
        if self.health is not None:
            oprot.writeFieldBegin('health', TType.I32, 4)
            oprot.writeI32(self.health)
            oprot.writeFieldEnd()
        if self.identificationResults is not None:
            oprot.writeFieldBegin('identificationResults', TType.LIST, 6)
            oprot.writeListBegin(TType.STRUCT, len(self.identificationResults))
            for iter64 in self.identificationResults:
                iter64.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.identificationConfigurations is not None:
            oprot.writeFieldBegin('identificationConfigurations', TType.LIST, 7)
            oprot.writeListBegin(TType.STRUCT, len(self.identificationConfigurations))
            for iter65 in self.identificationConfigurations:
                iter65.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.detectionResults is not None:
            oprot.writeFieldBegin('detectionResults', TType.LIST, 8)
            oprot.writeListBegin(TType.STRUCT, len(self.detectionResults))
            for iter66 in self.detectionResults:
                iter66.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.detectionConfigurations is not None:
            oprot.writeFieldBegin('detectionConfigurations', TType.LIST, 9)
            oprot.writeListBegin(TType.STRUCT, len(self.detectionConfigurations))
            for iter67 in self.detectionConfigurations:
                iter67.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.localizationResults is not None:
            oprot.writeFieldBegin('localizationResults', TType.LIST, 10)
            oprot.writeListBegin(TType.STRUCT, len(self.localizationResults))
            for iter68 in self.localizationResults:
                iter68.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.localizationConfigurations is not None:
            oprot.writeFieldBegin('localizationConfigurations', TType.LIST, 11)
            oprot.writeListBegin(TType.STRUCT, len(self.localizationConfigurations))
            for iter69 in self.localizationConfigurations:
                iter69.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.dose is not None:
            oprot.writeFieldBegin('dose', TType.DOUBLE, 12)
            oprot.writeDouble(self.dose)
            oprot.writeFieldEnd()
        if self.debugData is not None:
            oprot.writeFieldBegin('debugData', TType.MAP, 13)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.debugData))
            for kiter70, viter71 in self.debugData.items():
                oprot.writeString(kiter70.encode('utf-8') if sys.version_info[0] == 2 else kiter70)
                oprot.writeString(viter71.encode('utf-8') if sys.version_info[0] == 2 else viter71)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(AlgorithmConfiguration)
AlgorithmConfiguration.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'componentId', [UUID.ttypes.UUID, None], None, ),  # 1
    (2, TType.STRUCT, 'identificationConfiguration', [Identification.ttypes.IdentificationConfiguration, None], None, ),  # 2
    (3, TType.STRUCT, 'detectionConfiguration', [Detection.ttypes.DetectionConfiguration, None], None, ),  # 3
    (4, TType.STRUCT, 'localizationConfiguration', [Localization.ttypes.LocalizationConfiguration, None], None, ),  # 4
)
all_structs.append(AlgorithmDefinition)
AlgorithmDefinition.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'componentId', [UUID.ttypes.UUID, None], None, ),  # 1
    (2, TType.STRING, 'componentName', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'vendorName', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'version', 'UTF8', None, ),  # 4
    None,  # 5
    (6, TType.BOOL, 'doesIdentification', None, False, ),  # 6
    (7, TType.BOOL, 'doesDetection', None, False, ),  # 7
    (8, TType.BOOL, 'doesLocalization', None, False, ),  # 8
    (9, TType.BOOL, 'hasDose', None, False, ),  # 9
    (10, TType.LIST, 'identificationDefinitions', (TType.STRUCT, [Identification.ttypes.IdentificationDefinition, None], False), None, ),  # 10
    (11, TType.LIST, 'detectionDefinitions', (TType.STRUCT, [Detection.ttypes.DetectionDefinition, None], False), None, ),  # 11
    (12, TType.LIST, 'localizationDefinitions', (TType.STRUCT, [Localization.ttypes.LocalizationDefinition, None], False), None, ),  # 12
)
all_structs.append(AlgorithmData)
AlgorithmData.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'componentId', [UUID.ttypes.UUID, None], None, ),  # 1
    (2, TType.I64, 'startTimeStamp', None, None, ),  # 2
    (3, TType.I64, 'endTimeStamp', None, None, ),  # 3
    (4, TType.I32, 'health', None, None, ),  # 4
    None,  # 5
    (6, TType.LIST, 'identificationResults', (TType.STRUCT, [Identification.ttypes.IdentificationResult, None], False), None, ),  # 6
    (7, TType.LIST, 'identificationConfigurations', (TType.STRUCT, [Identification.ttypes.IdentificationConfiguration, None], False), None, ),  # 7
    (8, TType.LIST, 'detectionResults', (TType.STRUCT, [Detection.ttypes.DetectionResult, None], False), None, ),  # 8
    (9, TType.LIST, 'detectionConfigurations', (TType.STRUCT, [Detection.ttypes.DetectionConfiguration, None], False), None, ),  # 9
    (10, TType.LIST, 'localizationResults', (TType.STRUCT, [Localization.ttypes.LocalizationResult, None], False), None, ),  # 10
    (11, TType.LIST, 'localizationConfigurations', (TType.STRUCT, [Localization.ttypes.LocalizationConfiguration, None], False), None, ),  # 11
    (12, TType.DOUBLE, 'dose', None, None, ),  # 12
    (13, TType.MAP, 'debugData', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 13
)
fix_spec(all_structs)
del all_structs
