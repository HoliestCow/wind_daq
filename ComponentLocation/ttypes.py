#
# Autogenerated by Thrift Compiler (1.0.0-dev)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys

from thrift.transport import TTransport
all_structs = []


class GridPositionAndOrientation(object):
    """
    Attributes:
     - gridPositionX
     - gridPositionY
     - gridPositionZ
     - rotationQuaternionW
     - rotationQuaternionX
     - rotationQuaternionY
     - rotationQuaternionZ
    """


    def __init__(self, gridPositionX=None, gridPositionY=None, gridPositionZ=None, rotationQuaternionW=None, rotationQuaternionX=None, rotationQuaternionY=None, rotationQuaternionZ=None,):
        self.gridPositionX = gridPositionX
        self.gridPositionY = gridPositionY
        self.gridPositionZ = gridPositionZ
        self.rotationQuaternionW = rotationQuaternionW
        self.rotationQuaternionX = rotationQuaternionX
        self.rotationQuaternionY = rotationQuaternionY
        self.rotationQuaternionZ = rotationQuaternionZ

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.DOUBLE:
                    self.gridPositionX = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.DOUBLE:
                    self.gridPositionY = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.DOUBLE:
                    self.gridPositionZ = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.DOUBLE:
                    self.rotationQuaternionW = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.DOUBLE:
                    self.rotationQuaternionX = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.DOUBLE:
                    self.rotationQuaternionY = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.DOUBLE:
                    self.rotationQuaternionZ = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GridPositionAndOrientation')
        if self.gridPositionX is not None:
            oprot.writeFieldBegin('gridPositionX', TType.DOUBLE, 1)
            oprot.writeDouble(self.gridPositionX)
            oprot.writeFieldEnd()
        if self.gridPositionY is not None:
            oprot.writeFieldBegin('gridPositionY', TType.DOUBLE, 2)
            oprot.writeDouble(self.gridPositionY)
            oprot.writeFieldEnd()
        if self.gridPositionZ is not None:
            oprot.writeFieldBegin('gridPositionZ', TType.DOUBLE, 3)
            oprot.writeDouble(self.gridPositionZ)
            oprot.writeFieldEnd()
        if self.rotationQuaternionW is not None:
            oprot.writeFieldBegin('rotationQuaternionW', TType.DOUBLE, 4)
            oprot.writeDouble(self.rotationQuaternionW)
            oprot.writeFieldEnd()
        if self.rotationQuaternionX is not None:
            oprot.writeFieldBegin('rotationQuaternionX', TType.DOUBLE, 5)
            oprot.writeDouble(self.rotationQuaternionX)
            oprot.writeFieldEnd()
        if self.rotationQuaternionY is not None:
            oprot.writeFieldBegin('rotationQuaternionY', TType.DOUBLE, 6)
            oprot.writeDouble(self.rotationQuaternionY)
            oprot.writeFieldEnd()
        if self.rotationQuaternionZ is not None:
            oprot.writeFieldBegin('rotationQuaternionZ', TType.DOUBLE, 7)
            oprot.writeDouble(self.rotationQuaternionZ)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(GridPositionAndOrientation)
GridPositionAndOrientation.thrift_spec = (
    None,  # 0
    (1, TType.DOUBLE, 'gridPositionX', None, None, ),  # 1
    (2, TType.DOUBLE, 'gridPositionY', None, None, ),  # 2
    (3, TType.DOUBLE, 'gridPositionZ', None, None, ),  # 3
    (4, TType.DOUBLE, 'rotationQuaternionW', None, None, ),  # 4
    (5, TType.DOUBLE, 'rotationQuaternionX', None, None, ),  # 5
    (6, TType.DOUBLE, 'rotationQuaternionY', None, None, ),  # 6
    (7, TType.DOUBLE, 'rotationQuaternionZ', None, None, ),  # 7
)
fix_spec(all_structs)
del all_structs
