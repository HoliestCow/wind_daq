#
# Autogenerated by Thrift Compiler (1.0.0-dev)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys
import Health.ttypes
import UUID.ttypes

from thrift.transport import TTransport
all_structs = []


class FrameOfReference(object):
    LocalNED = 0
    VehicleCarriedNED = 1
    Body = 2
    Geodetic_NED = 3
    Geodetic_ECEF = 4
    LocalXYZ = 5

    _VALUES_TO_NAMES = {
        0: "LocalNED",
        1: "VehicleCarriedNED",
        2: "Body",
        3: "Geodetic_NED",
        4: "Geodetic_ECEF",
        5: "LocalXYZ",
    }

    _NAMES_TO_VALUES = {
        "LocalNED": 0,
        "VehicleCarriedNED": 1,
        "Body": 2,
        "Geodetic_NED": 3,
        "Geodetic_ECEF": 4,
        "LocalXYZ": 5,
    }


class GeodeticDatum(object):
    AGD84 = 0
    GRS80 = 1
    NAD83 = 2
    OSGB36 = 3
    PZ9011 = 4
    WGS84 = 5

    _VALUES_TO_NAMES = {
        0: "AGD84",
        1: "GRS80",
        2: "NAD83",
        3: "OSGB36",
        4: "PZ9011",
        5: "WGS84",
    }

    _NAMES_TO_VALUES = {
        "AGD84": 0,
        "GRS80": 1,
        "NAD83": 2,
        "OSGB36": 3,
        "PZ9011": 4,
        "WGS84": 5,
    }


class GPSFixType(object):
    NotAvailable = 0
    TimeOnly = 1
    TwoD = 2
    ThreeD = 3

    _VALUES_TO_NAMES = {
        0: "NotAvailable",
        1: "TimeOnly",
        2: "TwoD",
        3: "ThreeD",
    }

    _NAMES_TO_VALUES = {
        "NotAvailable": 0,
        "TimeOnly": 1,
        "TwoD": 2,
        "ThreeD": 3,
    }


class NavigationSensorDefinition(object):
    """
    Attributes:
     - componentId
     - componentName
     - vendorName
     - serialNumber
     - sensorFrameOfReference
     - datum
     - hasLatitude
     - hasLongitude
     - hasAltitude
     - hasX
     - hasY
     - hasZ
     - hasAccelerationX
     - hasAccelerationY
     - hasAccelerationZ
     - hasNumberOfSatellites
     - hasQualityOfFix
     - hasPitch
     - hasRoll
     - hasHeading
     - hasVelocityX
     - hasVelocityY
     - hasVelocityZ
     - hasSpeed
    """


    def __init__(self, componentId=None, componentName=None, vendorName=None, serialNumber=None, sensorFrameOfReference=3, datum=5, hasLatitude=False, hasLongitude=False, hasAltitude=False, hasX=False, hasY=False, hasZ=False, hasAccelerationX=False, hasAccelerationY=False, hasAccelerationZ=False, hasNumberOfSatellites=False, hasQualityOfFix=False, hasPitch=False, hasRoll=False, hasHeading=False, hasVelocityX=False, hasVelocityY=False, hasVelocityZ=False, hasSpeed=False,):
        self.componentId = componentId
        self.componentName = componentName
        self.vendorName = vendorName
        self.serialNumber = serialNumber
        self.sensorFrameOfReference = sensorFrameOfReference
        self.datum = datum
        self.hasLatitude = hasLatitude
        self.hasLongitude = hasLongitude
        self.hasAltitude = hasAltitude
        self.hasX = hasX
        self.hasY = hasY
        self.hasZ = hasZ
        self.hasAccelerationX = hasAccelerationX
        self.hasAccelerationY = hasAccelerationY
        self.hasAccelerationZ = hasAccelerationZ
        self.hasNumberOfSatellites = hasNumberOfSatellites
        self.hasQualityOfFix = hasQualityOfFix
        self.hasPitch = hasPitch
        self.hasRoll = hasRoll
        self.hasHeading = hasHeading
        self.hasVelocityX = hasVelocityX
        self.hasVelocityY = hasVelocityY
        self.hasVelocityZ = hasVelocityZ
        self.hasSpeed = hasSpeed

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.componentId = UUID.ttypes.UUID()
                    self.componentId.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.componentName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.vendorName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.serialNumber = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.sensorFrameOfReference = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.datum = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.BOOL:
                    self.hasLatitude = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.BOOL:
                    self.hasLongitude = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.BOOL:
                    self.hasAltitude = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.BOOL:
                    self.hasX = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.BOOL:
                    self.hasY = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.BOOL:
                    self.hasZ = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.BOOL:
                    self.hasAccelerationX = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.BOOL:
                    self.hasAccelerationY = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.BOOL:
                    self.hasAccelerationZ = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.BOOL:
                    self.hasNumberOfSatellites = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 17:
                if ftype == TType.BOOL:
                    self.hasQualityOfFix = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 18:
                if ftype == TType.BOOL:
                    self.hasPitch = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 19:
                if ftype == TType.BOOL:
                    self.hasRoll = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 20:
                if ftype == TType.BOOL:
                    self.hasHeading = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 21:
                if ftype == TType.BOOL:
                    self.hasVelocityX = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 22:
                if ftype == TType.BOOL:
                    self.hasVelocityY = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 23:
                if ftype == TType.BOOL:
                    self.hasVelocityZ = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 24:
                if ftype == TType.BOOL:
                    self.hasSpeed = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('NavigationSensorDefinition')
        if self.componentId is not None:
            oprot.writeFieldBegin('componentId', TType.STRUCT, 1)
            self.componentId.write(oprot)
            oprot.writeFieldEnd()
        if self.componentName is not None:
            oprot.writeFieldBegin('componentName', TType.STRING, 2)
            oprot.writeString(self.componentName.encode('utf-8') if sys.version_info[0] == 2 else self.componentName)
            oprot.writeFieldEnd()
        if self.vendorName is not None:
            oprot.writeFieldBegin('vendorName', TType.STRING, 3)
            oprot.writeString(self.vendorName.encode('utf-8') if sys.version_info[0] == 2 else self.vendorName)
            oprot.writeFieldEnd()
        if self.serialNumber is not None:
            oprot.writeFieldBegin('serialNumber', TType.STRING, 4)
            oprot.writeString(self.serialNumber.encode('utf-8') if sys.version_info[0] == 2 else self.serialNumber)
            oprot.writeFieldEnd()
        if self.sensorFrameOfReference is not None:
            oprot.writeFieldBegin('sensorFrameOfReference', TType.I32, 5)
            oprot.writeI32(self.sensorFrameOfReference)
            oprot.writeFieldEnd()
        if self.datum is not None:
            oprot.writeFieldBegin('datum', TType.I32, 6)
            oprot.writeI32(self.datum)
            oprot.writeFieldEnd()
        if self.hasLatitude is not None:
            oprot.writeFieldBegin('hasLatitude', TType.BOOL, 7)
            oprot.writeBool(self.hasLatitude)
            oprot.writeFieldEnd()
        if self.hasLongitude is not None:
            oprot.writeFieldBegin('hasLongitude', TType.BOOL, 8)
            oprot.writeBool(self.hasLongitude)
            oprot.writeFieldEnd()
        if self.hasAltitude is not None:
            oprot.writeFieldBegin('hasAltitude', TType.BOOL, 9)
            oprot.writeBool(self.hasAltitude)
            oprot.writeFieldEnd()
        if self.hasX is not None:
            oprot.writeFieldBegin('hasX', TType.BOOL, 10)
            oprot.writeBool(self.hasX)
            oprot.writeFieldEnd()
        if self.hasY is not None:
            oprot.writeFieldBegin('hasY', TType.BOOL, 11)
            oprot.writeBool(self.hasY)
            oprot.writeFieldEnd()
        if self.hasZ is not None:
            oprot.writeFieldBegin('hasZ', TType.BOOL, 12)
            oprot.writeBool(self.hasZ)
            oprot.writeFieldEnd()
        if self.hasAccelerationX is not None:
            oprot.writeFieldBegin('hasAccelerationX', TType.BOOL, 13)
            oprot.writeBool(self.hasAccelerationX)
            oprot.writeFieldEnd()
        if self.hasAccelerationY is not None:
            oprot.writeFieldBegin('hasAccelerationY', TType.BOOL, 14)
            oprot.writeBool(self.hasAccelerationY)
            oprot.writeFieldEnd()
        if self.hasAccelerationZ is not None:
            oprot.writeFieldBegin('hasAccelerationZ', TType.BOOL, 15)
            oprot.writeBool(self.hasAccelerationZ)
            oprot.writeFieldEnd()
        if self.hasNumberOfSatellites is not None:
            oprot.writeFieldBegin('hasNumberOfSatellites', TType.BOOL, 16)
            oprot.writeBool(self.hasNumberOfSatellites)
            oprot.writeFieldEnd()
        if self.hasQualityOfFix is not None:
            oprot.writeFieldBegin('hasQualityOfFix', TType.BOOL, 17)
            oprot.writeBool(self.hasQualityOfFix)
            oprot.writeFieldEnd()
        if self.hasPitch is not None:
            oprot.writeFieldBegin('hasPitch', TType.BOOL, 18)
            oprot.writeBool(self.hasPitch)
            oprot.writeFieldEnd()
        if self.hasRoll is not None:
            oprot.writeFieldBegin('hasRoll', TType.BOOL, 19)
            oprot.writeBool(self.hasRoll)
            oprot.writeFieldEnd()
        if self.hasHeading is not None:
            oprot.writeFieldBegin('hasHeading', TType.BOOL, 20)
            oprot.writeBool(self.hasHeading)
            oprot.writeFieldEnd()
        if self.hasVelocityX is not None:
            oprot.writeFieldBegin('hasVelocityX', TType.BOOL, 21)
            oprot.writeBool(self.hasVelocityX)
            oprot.writeFieldEnd()
        if self.hasVelocityY is not None:
            oprot.writeFieldBegin('hasVelocityY', TType.BOOL, 22)
            oprot.writeBool(self.hasVelocityY)
            oprot.writeFieldEnd()
        if self.hasVelocityZ is not None:
            oprot.writeFieldBegin('hasVelocityZ', TType.BOOL, 23)
            oprot.writeBool(self.hasVelocityZ)
            oprot.writeFieldEnd()
        if self.hasSpeed is not None:
            oprot.writeFieldBegin('hasSpeed', TType.BOOL, 24)
            oprot.writeBool(self.hasSpeed)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class NavigationSensorData(object):
    """
    What do we need to send the Vendors?*

    Attributes:
     - componentId
     - timeStamp
     - health
     - latitude
     - longitude
     - altitude
     - x
     - y
     - z
     - accelerationX
     - accelerationY
     - accelerationZ
     - numberOfSatellites
     - qualityOfFix
     - pitch
     - roll
     - heading
     - velocityX
     - velocityY
     - velocityZ
     - speed
     - angularRateX
     - angularRateY
     - angularRateZ
     - magneticFieldX
     - magneticFieldY
     - magneticFieldZ
     - gravityCompAccelX
     - gravityCompAccelY
     - gravityCompAccelZ
     - positionErrorX
     - positionErrorY
     - positionErrorZ
     - positionError
     - velocityErrorX
     - velocityErrorY
     - velocityErrorZ
     - speedError
     - pitchError
     - rollError
     - headingError
     - timeError
     - referenceFrameTimeStamp
    """


    def __init__(self, componentId=None, timeStamp=None, health=None, latitude=None, longitude=None, altitude=None, x=None, y=None, z=None, accelerationX=None, accelerationY=None, accelerationZ=None, numberOfSatellites=None, qualityOfFix=None, pitch=None, roll=None, heading=None, velocityX=None, velocityY=None, velocityZ=None, speed=None, angularRateX=None, angularRateY=None, angularRateZ=None, magneticFieldX=None, magneticFieldY=None, magneticFieldZ=None, gravityCompAccelX=None, gravityCompAccelY=None, gravityCompAccelZ=None, positionErrorX=None, positionErrorY=None, positionErrorZ=None, positionError=None, velocityErrorX=None, velocityErrorY=None, velocityErrorZ=None, speedError=None, pitchError=None, rollError=None, headingError=None, timeError=None, referenceFrameTimeStamp=None,):
        self.componentId = componentId
        self.timeStamp = timeStamp
        self.health = health
        self.latitude = latitude
        self.longitude = longitude
        self.altitude = altitude
        self.x = x
        self.y = y
        self.z = z
        self.accelerationX = accelerationX
        self.accelerationY = accelerationY
        self.accelerationZ = accelerationZ
        self.numberOfSatellites = numberOfSatellites
        self.qualityOfFix = qualityOfFix
        self.pitch = pitch
        self.roll = roll
        self.heading = heading
        self.velocityX = velocityX
        self.velocityY = velocityY
        self.velocityZ = velocityZ
        self.speed = speed
        self.angularRateX = angularRateX
        self.angularRateY = angularRateY
        self.angularRateZ = angularRateZ
        self.magneticFieldX = magneticFieldX
        self.magneticFieldY = magneticFieldY
        self.magneticFieldZ = magneticFieldZ
        self.gravityCompAccelX = gravityCompAccelX
        self.gravityCompAccelY = gravityCompAccelY
        self.gravityCompAccelZ = gravityCompAccelZ
        self.positionErrorX = positionErrorX
        self.positionErrorY = positionErrorY
        self.positionErrorZ = positionErrorZ
        self.positionError = positionError
        self.velocityErrorX = velocityErrorX
        self.velocityErrorY = velocityErrorY
        self.velocityErrorZ = velocityErrorZ
        self.speedError = speedError
        self.pitchError = pitchError
        self.rollError = rollError
        self.headingError = headingError
        self.timeError = timeError
        self.referenceFrameTimeStamp = referenceFrameTimeStamp

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.componentId = UUID.ttypes.UUID()
                    self.componentId.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.timeStamp = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.health = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.DOUBLE:
                    self.latitude = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.DOUBLE:
                    self.longitude = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.DOUBLE:
                    self.altitude = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.DOUBLE:
                    self.x = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.DOUBLE:
                    self.y = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.DOUBLE:
                    self.z = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.DOUBLE:
                    self.accelerationX = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.DOUBLE:
                    self.accelerationY = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.DOUBLE:
                    self.accelerationZ = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.I32:
                    self.numberOfSatellites = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.I32:
                    self.qualityOfFix = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.DOUBLE:
                    self.pitch = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.DOUBLE:
                    self.roll = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 17:
                if ftype == TType.DOUBLE:
                    self.heading = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 18:
                if ftype == TType.DOUBLE:
                    self.velocityX = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 19:
                if ftype == TType.DOUBLE:
                    self.velocityY = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 20:
                if ftype == TType.DOUBLE:
                    self.velocityZ = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 21:
                if ftype == TType.DOUBLE:
                    self.speed = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 22:
                if ftype == TType.DOUBLE:
                    self.angularRateX = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 23:
                if ftype == TType.DOUBLE:
                    self.angularRateY = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 24:
                if ftype == TType.DOUBLE:
                    self.angularRateZ = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 25:
                if ftype == TType.DOUBLE:
                    self.magneticFieldX = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 26:
                if ftype == TType.DOUBLE:
                    self.magneticFieldY = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 27:
                if ftype == TType.DOUBLE:
                    self.magneticFieldZ = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 28:
                if ftype == TType.DOUBLE:
                    self.gravityCompAccelX = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 29:
                if ftype == TType.DOUBLE:
                    self.gravityCompAccelY = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 30:
                if ftype == TType.DOUBLE:
                    self.gravityCompAccelZ = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 31:
                if ftype == TType.DOUBLE:
                    self.positionErrorX = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 32:
                if ftype == TType.DOUBLE:
                    self.positionErrorY = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 33:
                if ftype == TType.DOUBLE:
                    self.positionErrorZ = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 34:
                if ftype == TType.DOUBLE:
                    self.positionError = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 35:
                if ftype == TType.DOUBLE:
                    self.velocityErrorX = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 36:
                if ftype == TType.DOUBLE:
                    self.velocityErrorY = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 37:
                if ftype == TType.DOUBLE:
                    self.velocityErrorZ = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 38:
                if ftype == TType.DOUBLE:
                    self.speedError = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 39:
                if ftype == TType.DOUBLE:
                    self.pitchError = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 40:
                if ftype == TType.DOUBLE:
                    self.rollError = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 41:
                if ftype == TType.DOUBLE:
                    self.headingError = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 42:
                if ftype == TType.I64:
                    self.timeError = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 43:
                if ftype == TType.I64:
                    self.referenceFrameTimeStamp = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('NavigationSensorData')
        if self.componentId is not None:
            oprot.writeFieldBegin('componentId', TType.STRUCT, 1)
            self.componentId.write(oprot)
            oprot.writeFieldEnd()
        if self.timeStamp is not None:
            oprot.writeFieldBegin('timeStamp', TType.I64, 2)
            oprot.writeI64(self.timeStamp)
            oprot.writeFieldEnd()
        if self.health is not None:
            oprot.writeFieldBegin('health', TType.I32, 3)
            oprot.writeI32(self.health)
            oprot.writeFieldEnd()
        if self.latitude is not None:
            oprot.writeFieldBegin('latitude', TType.DOUBLE, 4)
            oprot.writeDouble(self.latitude)
            oprot.writeFieldEnd()
        if self.longitude is not None:
            oprot.writeFieldBegin('longitude', TType.DOUBLE, 5)
            oprot.writeDouble(self.longitude)
            oprot.writeFieldEnd()
        if self.altitude is not None:
            oprot.writeFieldBegin('altitude', TType.DOUBLE, 6)
            oprot.writeDouble(self.altitude)
            oprot.writeFieldEnd()
        if self.x is not None:
            oprot.writeFieldBegin('x', TType.DOUBLE, 7)
            oprot.writeDouble(self.x)
            oprot.writeFieldEnd()
        if self.y is not None:
            oprot.writeFieldBegin('y', TType.DOUBLE, 8)
            oprot.writeDouble(self.y)
            oprot.writeFieldEnd()
        if self.z is not None:
            oprot.writeFieldBegin('z', TType.DOUBLE, 9)
            oprot.writeDouble(self.z)
            oprot.writeFieldEnd()
        if self.accelerationX is not None:
            oprot.writeFieldBegin('accelerationX', TType.DOUBLE, 10)
            oprot.writeDouble(self.accelerationX)
            oprot.writeFieldEnd()
        if self.accelerationY is not None:
            oprot.writeFieldBegin('accelerationY', TType.DOUBLE, 11)
            oprot.writeDouble(self.accelerationY)
            oprot.writeFieldEnd()
        if self.accelerationZ is not None:
            oprot.writeFieldBegin('accelerationZ', TType.DOUBLE, 12)
            oprot.writeDouble(self.accelerationZ)
            oprot.writeFieldEnd()
        if self.numberOfSatellites is not None:
            oprot.writeFieldBegin('numberOfSatellites', TType.I32, 13)
            oprot.writeI32(self.numberOfSatellites)
            oprot.writeFieldEnd()
        if self.qualityOfFix is not None:
            oprot.writeFieldBegin('qualityOfFix', TType.I32, 14)
            oprot.writeI32(self.qualityOfFix)
            oprot.writeFieldEnd()
        if self.pitch is not None:
            oprot.writeFieldBegin('pitch', TType.DOUBLE, 15)
            oprot.writeDouble(self.pitch)
            oprot.writeFieldEnd()
        if self.roll is not None:
            oprot.writeFieldBegin('roll', TType.DOUBLE, 16)
            oprot.writeDouble(self.roll)
            oprot.writeFieldEnd()
        if self.heading is not None:
            oprot.writeFieldBegin('heading', TType.DOUBLE, 17)
            oprot.writeDouble(self.heading)
            oprot.writeFieldEnd()
        if self.velocityX is not None:
            oprot.writeFieldBegin('velocityX', TType.DOUBLE, 18)
            oprot.writeDouble(self.velocityX)
            oprot.writeFieldEnd()
        if self.velocityY is not None:
            oprot.writeFieldBegin('velocityY', TType.DOUBLE, 19)
            oprot.writeDouble(self.velocityY)
            oprot.writeFieldEnd()
        if self.velocityZ is not None:
            oprot.writeFieldBegin('velocityZ', TType.DOUBLE, 20)
            oprot.writeDouble(self.velocityZ)
            oprot.writeFieldEnd()
        if self.speed is not None:
            oprot.writeFieldBegin('speed', TType.DOUBLE, 21)
            oprot.writeDouble(self.speed)
            oprot.writeFieldEnd()
        if self.angularRateX is not None:
            oprot.writeFieldBegin('angularRateX', TType.DOUBLE, 22)
            oprot.writeDouble(self.angularRateX)
            oprot.writeFieldEnd()
        if self.angularRateY is not None:
            oprot.writeFieldBegin('angularRateY', TType.DOUBLE, 23)
            oprot.writeDouble(self.angularRateY)
            oprot.writeFieldEnd()
        if self.angularRateZ is not None:
            oprot.writeFieldBegin('angularRateZ', TType.DOUBLE, 24)
            oprot.writeDouble(self.angularRateZ)
            oprot.writeFieldEnd()
        if self.magneticFieldX is not None:
            oprot.writeFieldBegin('magneticFieldX', TType.DOUBLE, 25)
            oprot.writeDouble(self.magneticFieldX)
            oprot.writeFieldEnd()
        if self.magneticFieldY is not None:
            oprot.writeFieldBegin('magneticFieldY', TType.DOUBLE, 26)
            oprot.writeDouble(self.magneticFieldY)
            oprot.writeFieldEnd()
        if self.magneticFieldZ is not None:
            oprot.writeFieldBegin('magneticFieldZ', TType.DOUBLE, 27)
            oprot.writeDouble(self.magneticFieldZ)
            oprot.writeFieldEnd()
        if self.gravityCompAccelX is not None:
            oprot.writeFieldBegin('gravityCompAccelX', TType.DOUBLE, 28)
            oprot.writeDouble(self.gravityCompAccelX)
            oprot.writeFieldEnd()
        if self.gravityCompAccelY is not None:
            oprot.writeFieldBegin('gravityCompAccelY', TType.DOUBLE, 29)
            oprot.writeDouble(self.gravityCompAccelY)
            oprot.writeFieldEnd()
        if self.gravityCompAccelZ is not None:
            oprot.writeFieldBegin('gravityCompAccelZ', TType.DOUBLE, 30)
            oprot.writeDouble(self.gravityCompAccelZ)
            oprot.writeFieldEnd()
        if self.positionErrorX is not None:
            oprot.writeFieldBegin('positionErrorX', TType.DOUBLE, 31)
            oprot.writeDouble(self.positionErrorX)
            oprot.writeFieldEnd()
        if self.positionErrorY is not None:
            oprot.writeFieldBegin('positionErrorY', TType.DOUBLE, 32)
            oprot.writeDouble(self.positionErrorY)
            oprot.writeFieldEnd()
        if self.positionErrorZ is not None:
            oprot.writeFieldBegin('positionErrorZ', TType.DOUBLE, 33)
            oprot.writeDouble(self.positionErrorZ)
            oprot.writeFieldEnd()
        if self.positionError is not None:
            oprot.writeFieldBegin('positionError', TType.DOUBLE, 34)
            oprot.writeDouble(self.positionError)
            oprot.writeFieldEnd()
        if self.velocityErrorX is not None:
            oprot.writeFieldBegin('velocityErrorX', TType.DOUBLE, 35)
            oprot.writeDouble(self.velocityErrorX)
            oprot.writeFieldEnd()
        if self.velocityErrorY is not None:
            oprot.writeFieldBegin('velocityErrorY', TType.DOUBLE, 36)
            oprot.writeDouble(self.velocityErrorY)
            oprot.writeFieldEnd()
        if self.velocityErrorZ is not None:
            oprot.writeFieldBegin('velocityErrorZ', TType.DOUBLE, 37)
            oprot.writeDouble(self.velocityErrorZ)
            oprot.writeFieldEnd()
        if self.speedError is not None:
            oprot.writeFieldBegin('speedError', TType.DOUBLE, 38)
            oprot.writeDouble(self.speedError)
            oprot.writeFieldEnd()
        if self.pitchError is not None:
            oprot.writeFieldBegin('pitchError', TType.DOUBLE, 39)
            oprot.writeDouble(self.pitchError)
            oprot.writeFieldEnd()
        if self.rollError is not None:
            oprot.writeFieldBegin('rollError', TType.DOUBLE, 40)
            oprot.writeDouble(self.rollError)
            oprot.writeFieldEnd()
        if self.headingError is not None:
            oprot.writeFieldBegin('headingError', TType.DOUBLE, 41)
            oprot.writeDouble(self.headingError)
            oprot.writeFieldEnd()
        if self.timeError is not None:
            oprot.writeFieldBegin('timeError', TType.I64, 42)
            oprot.writeI64(self.timeError)
            oprot.writeFieldEnd()
        if self.referenceFrameTimeStamp is not None:
            oprot.writeFieldBegin('referenceFrameTimeStamp', TType.I64, 43)
            oprot.writeI64(self.referenceFrameTimeStamp)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(NavigationSensorDefinition)
NavigationSensorDefinition.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'componentId', [UUID.ttypes.UUID, None], None, ),  # 1
    (2, TType.STRING, 'componentName', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'vendorName', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'serialNumber', 'UTF8', None, ),  # 4
    (5, TType.I32, 'sensorFrameOfReference', None, 3, ),  # 5
    (6, TType.I32, 'datum', None, 5, ),  # 6
    (7, TType.BOOL, 'hasLatitude', None, False, ),  # 7
    (8, TType.BOOL, 'hasLongitude', None, False, ),  # 8
    (9, TType.BOOL, 'hasAltitude', None, False, ),  # 9
    (10, TType.BOOL, 'hasX', None, False, ),  # 10
    (11, TType.BOOL, 'hasY', None, False, ),  # 11
    (12, TType.BOOL, 'hasZ', None, False, ),  # 12
    (13, TType.BOOL, 'hasAccelerationX', None, False, ),  # 13
    (14, TType.BOOL, 'hasAccelerationY', None, False, ),  # 14
    (15, TType.BOOL, 'hasAccelerationZ', None, False, ),  # 15
    (16, TType.BOOL, 'hasNumberOfSatellites', None, False, ),  # 16
    (17, TType.BOOL, 'hasQualityOfFix', None, False, ),  # 17
    (18, TType.BOOL, 'hasPitch', None, False, ),  # 18
    (19, TType.BOOL, 'hasRoll', None, False, ),  # 19
    (20, TType.BOOL, 'hasHeading', None, False, ),  # 20
    (21, TType.BOOL, 'hasVelocityX', None, False, ),  # 21
    (22, TType.BOOL, 'hasVelocityY', None, False, ),  # 22
    (23, TType.BOOL, 'hasVelocityZ', None, False, ),  # 23
    (24, TType.BOOL, 'hasSpeed', None, False, ),  # 24
)
all_structs.append(NavigationSensorData)
NavigationSensorData.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'componentId', [UUID.ttypes.UUID, None], None, ),  # 1
    (2, TType.I64, 'timeStamp', None, None, ),  # 2
    (3, TType.I32, 'health', None, None, ),  # 3
    (4, TType.DOUBLE, 'latitude', None, None, ),  # 4
    (5, TType.DOUBLE, 'longitude', None, None, ),  # 5
    (6, TType.DOUBLE, 'altitude', None, None, ),  # 6
    (7, TType.DOUBLE, 'x', None, None, ),  # 7
    (8, TType.DOUBLE, 'y', None, None, ),  # 8
    (9, TType.DOUBLE, 'z', None, None, ),  # 9
    (10, TType.DOUBLE, 'accelerationX', None, None, ),  # 10
    (11, TType.DOUBLE, 'accelerationY', None, None, ),  # 11
    (12, TType.DOUBLE, 'accelerationZ', None, None, ),  # 12
    (13, TType.I32, 'numberOfSatellites', None, None, ),  # 13
    (14, TType.I32, 'qualityOfFix', None, None, ),  # 14
    (15, TType.DOUBLE, 'pitch', None, None, ),  # 15
    (16, TType.DOUBLE, 'roll', None, None, ),  # 16
    (17, TType.DOUBLE, 'heading', None, None, ),  # 17
    (18, TType.DOUBLE, 'velocityX', None, None, ),  # 18
    (19, TType.DOUBLE, 'velocityY', None, None, ),  # 19
    (20, TType.DOUBLE, 'velocityZ', None, None, ),  # 20
    (21, TType.DOUBLE, 'speed', None, None, ),  # 21
    (22, TType.DOUBLE, 'angularRateX', None, None, ),  # 22
    (23, TType.DOUBLE, 'angularRateY', None, None, ),  # 23
    (24, TType.DOUBLE, 'angularRateZ', None, None, ),  # 24
    (25, TType.DOUBLE, 'magneticFieldX', None, None, ),  # 25
    (26, TType.DOUBLE, 'magneticFieldY', None, None, ),  # 26
    (27, TType.DOUBLE, 'magneticFieldZ', None, None, ),  # 27
    (28, TType.DOUBLE, 'gravityCompAccelX', None, None, ),  # 28
    (29, TType.DOUBLE, 'gravityCompAccelY', None, None, ),  # 29
    (30, TType.DOUBLE, 'gravityCompAccelZ', None, None, ),  # 30
    (31, TType.DOUBLE, 'positionErrorX', None, None, ),  # 31
    (32, TType.DOUBLE, 'positionErrorY', None, None, ),  # 32
    (33, TType.DOUBLE, 'positionErrorZ', None, None, ),  # 33
    (34, TType.DOUBLE, 'positionError', None, None, ),  # 34
    (35, TType.DOUBLE, 'velocityErrorX', None, None, ),  # 35
    (36, TType.DOUBLE, 'velocityErrorY', None, None, ),  # 36
    (37, TType.DOUBLE, 'velocityErrorZ', None, None, ),  # 37
    (38, TType.DOUBLE, 'speedError', None, None, ),  # 38
    (39, TType.DOUBLE, 'pitchError', None, None, ),  # 39
    (40, TType.DOUBLE, 'rollError', None, None, ),  # 40
    (41, TType.DOUBLE, 'headingError', None, None, ),  # 41
    (42, TType.I64, 'timeError', None, None, ),  # 42
    (43, TType.I64, 'referenceFrameTimeStamp', None, None, ),  # 43
)
fix_spec(all_structs)
del all_structs
