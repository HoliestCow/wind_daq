#
# Autogenerated by Thrift Compiler (1.0.0-dev)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys
import Spectrum.ttypes

from thrift.transport import TTransport
all_structs = []


class ActivityUnit(object):
    BQ = 1
    KG = 2

    _VALUES_TO_NAMES = {
        1: "BQ",
        2: "KG",
    }

    _NAMES_TO_VALUES = {
        "BQ": 1,
        "KG": 2,
    }


class Classification(object):
    BACKGROUND = 100
    NORM = 101
    TENORM = 102
    MEDICAL = 200
    MEDICAL_SHIPMENT = 201
    INDUSTRIAL = 300
    RDD = 301
    NUCLEAR = 400
    OTHER = 500
    ACTIVATION = 501
    WASTE = 502
    FISSION = 503

    _VALUES_TO_NAMES = {
        100: "BACKGROUND",
        101: "NORM",
        102: "TENORM",
        200: "MEDICAL",
        201: "MEDICAL_SHIPMENT",
        300: "INDUSTRIAL",
        301: "RDD",
        400: "NUCLEAR",
        500: "OTHER",
        501: "ACTIVATION",
        502: "WASTE",
        503: "FISSION",
    }

    _NAMES_TO_VALUES = {
        "BACKGROUND": 100,
        "NORM": 101,
        "TENORM": 102,
        "MEDICAL": 200,
        "MEDICAL_SHIPMENT": 201,
        "INDUSTRIAL": 300,
        "RDD": 301,
        "NUCLEAR": 400,
        "OTHER": 500,
        "ACTIVATION": 501,
        "WASTE": 502,
        "FISSION": 503,
    }


class Nuclide(object):
    """
    ZA Numbered isotopes.
      ZA number is 10000 * Z + A + 300 * Metastable + 1000 * Process
    Z: Number of protons
    A: Atomic mass (protons + neutrons) (natural/unspecified = 0)
    Process: 1=XRay, 2=N_G (capture), 3=A_N, 4=A_P, 5=N_N (inelastic)

    Derived from SIGMA list
    """
    Unknown = 0
    Incoherent = 1
    HEU = 2
    LEU = 3
    WGPU = 4
    RGPU = 5
    NEUTRONS = 6
    H_N_G = 12000
    H_3 = 10003
    LI_N_G = 32000
    LI_A_G = 33000
    BE_N_G = 42000
    BE_A_N = 43000
    BE_7 = 40007
    B_A_G = 53000
    B_N_G = 52000
    C_A_G = 63000
    C_N_G = 62000
    C_11 = 60011
    C_14 = 60014
    N_A_P = 74000
    N_N_G = 72000
    N_13 = 70013
    N_16 = 70016
    O_A_N = 83000
    O_15 = 80015
    F_A_G = 93000
    F_N_G = 92000
    F_18 = 90018
    NA_A_G = 113000
    NA_22 = 110022
    NA_24 = 110024
    NA_25 = 110025
    MG_A_G = 123000
    MG_27 = 120027
    MG_28 = 120028
    AL_N_G = 121000
    AL_A_P = 124000
    AL_26 = 130026
    AL_28 = 130028
    SI_N_G = 142000
    SI_31 = 140031
    P_32 = 150032
    P_33 = 150033
    CL_A_P = 174000
    CL_N_G = 172000
    CL_36 = 170036
    CL_38 = 170038
    AR_41 = 180041
    K_A_P = 194000
    K_40 = 190040
    K_42 = 190042
    K_43 = 190043
    CA_45 = 200045
    CA_47 = 200047
    SC_44 = 210044
    SC_46 = 210046
    SC_47 = 210047
    SC_48 = 210048
    SC_44M = 210344
    TI_44 = 220044
    V_48 = 230048
    CR_N_G = 242000
    CR_48 = 240048
    CR_51 = 240051
    MN_51 = 250051
    MN_52 = 250052
    MN_54 = 250054
    MN_56 = 250056
    MN_52M = 250352
    FE_N_G = 252000
    FE_52 = 260052
    FE_55 = 260055
    FE_59 = 260059
    CO_55 = 270055
    CO_56 = 270056
    CO_57 = 270057
    CO_58 = 270058
    CO_60 = 270060
    CO_61 = 270061
    CO_62 = 270062
    NI_N_G = 282000
    NI_56 = 280056
    NI_57 = 280057
    NI_63 = 280063
    CU_N_G = 292000
    CU_61 = 290061
    CU_62 = 290062
    CU_64 = 290064
    CU_67 = 290067
    ZN_62 = 300062
    ZN_65 = 300065
    ZN_69 = 300069
    ZN_69M = 300369
    GA_66 = 310066
    GA_67 = 310067
    GA_68 = 310068
    GA_72 = 310072
    GE_N_G = 322000
    GE_N_N = 325000
    GE_68 = 320068
    GE_69 = 320069
    GE_75 = 320075
    GE_77 = 320077
    GE_75M = 320375
    GE_77M = 320377
    AS_71 = 330071
    AS_72 = 330072
    AS_73 = 330073
    AS_74 = 330074
    AS_76 = 330076
    AS_77 = 330077
    SE_72 = 340072
    SE_75 = 340075
    BR_75 = 350075
    BR_76 = 350076
    BR_77 = 350077
    BR_82 = 350082
    BR_85 = 350085
    KR_81 = 360081
    KR_85 = 360085
    KR_87 = 360087
    KR_88 = 360088
    KR_85M = 360385
    RB_81 = 370081
    RB_82 = 370082
    RB_83 = 370083
    RB_84 = 370084
    RB_86 = 370086
    RB_88 = 370088
    RB_89 = 370089
    SR_82 = 380082
    SR_83 = 380083
    SR_85 = 380085
    SR_89 = 380089
    SR_90 = 380090
    SR_91 = 380091
    SR_92 = 380092
    SR_87M = 380387
    Y_88 = 390088
    Y_90 = 390090
    Y_91 = 390091
    Y_92 = 390092
    Y_93 = 390093
    ZR_88 = 400088
    ZR_89 = 400089
    ZR_95 = 400095
    ZR_97 = 400097
    NB_89 = 410089
    NB_94 = 410094
    NB_95 = 410095
    NB_96 = 410096
    NB_97 = 410097
    NB_92M = 410392
    NB_95M = 410395
    MO_N_G = 422000
    MO_99 = 420099
    MO_101 = 420101
    TC_96 = 430096
    TC_98 = 430098
    TC_99 = 430099
    TC_94M = 430394
    TC_95M = 430395
    TC_99M = 430399
    RU_97 = 440097
    RU_103 = 440103
    RU_105 = 440105
    RU_106 = 440106
    RH_99 = 450099
    RH_100 = 450100
    RH_101 = 450101
    RH_102 = 450102
    RH_105 = 450105
    RH_106M = 450406
    PD_102 = 460102
    PD_109 = 460109
    PD_109M = 460409
    AGXRAYS = 471000
    AG_108M = 470408
    AG_110M = 470410
    CDXRAYS = 481000
    CD_N_G = 482000
    CD_109 = 480109
    CD_115 = 480115
    CD_115M = 480415
    IN_N_G = 492000
    IN_111 = 490111
    IN_114 = 490114
    IN_116 = 490116
    IN_113M = 490413
    IN_114M = 490414
    IN_115M = 490415
    IN_116M = 490416
    IN_116N = 490716
    SN_N_G = 502000
    SN_113 = 500113
    SN_125 = 500125
    SN_117M = 500417
    SB_122 = 510122
    SB_124 = 510124
    SB_125 = 510125
    SB_126 = 510126
    SB_127 = 510127
    SB_129 = 510129
    SB_120M = 510420
    TE_121 = 520121
    TE_129 = 520129
    TE_132 = 520132
    TE_133 = 520133
    TE_119M = 520419
    TE_123M = 520423
    TE_129M = 520429
    I_123 = 530123
    I_124 = 530124
    I_125 = 530125
    I_126 = 530126
    I_129 = 530129
    I_131 = 530131
    I_132 = 530132
    I_133 = 530133
    I_134 = 530134
    I_135 = 530135
    XE_122 = 540122
    XE_125 = 540125
    XE_127 = 540127
    XE_133 = 540133
    XE_135 = 540135
    XE_138 = 540138
    XE_129M = 540429
    XE_131M = 540431
    XE_133M = 540433
    XE_135M = 540435
    CS_130 = 550130
    CS_131 = 550131
    CS_132 = 550132
    CS_134 = 550134
    CS_136 = 550136
    CS_137 = 550137
    CS_138 = 550138
    BA_128 = 560128
    BA_131 = 560131
    BA_133 = 560133
    BA_139 = 560139
    BA_140 = 560140
    BA_141 = 560141
    LA_N_G = 572000
    LA_140 = 570140
    LA_141 = 570141
    LA_142 = 570142
    CE_139 = 580139
    CE_141 = 580141
    CE_143 = 580143
    CE_144 = 580144
    PR_144 = 590144
    PR_145 = 590145
    ND_147 = 600147
    ND_149 = 600149
    PM_143 = 610143
    PM_145 = 610145
    PM_146 = 610146
    PM_147 = 610147
    PM_149 = 610149
    PM_151 = 610151
    SM_145 = 620145
    SM_151 = 620151
    SM_153 = 620153
    EU_146 = 630146
    EU_150 = 630150
    EU_152 = 630152
    EU_154 = 630154
    EU_155 = 630155
    EU_156 = 630156
    EU_152M = 630452
    GD_146 = 640146
    GD_153 = 640153
    GD_159 = 640159
    TB_149 = 650149
    TB_160 = 650160
    DY_165 = 660165
    DY_166 = 660166
    HO_166 = 670166
    HO_167 = 670167
    HO_166M = 670466
    ER_169 = 680169
    TM_167 = 690167
    TM_170 = 690170
    TM_171 = 690171
    YB_167 = 700167
    YB_169 = 700169
    YB_175 = 700175
    YB_169M = 700469
    LUXRAYS = 711000
    LU_169 = 710169
    LU_171 = 710171
    LU_172 = 710172
    LU_173 = 710173
    LU_177 = 710177
    LU_171M = 710471
    LU_177M = 710477
    HF_171 = 720171
    HF_172 = 720172
    HF_173 = 720173
    HF_175 = 720175
    HF_181 = 720181
    HF_178M = 720478
    TA_178 = 730178
    TA_182 = 730182
    WXRAYS = 741000
    W_N_G = 742000
    W_178 = 740178
    W_185 = 740185
    W_187 = 740187
    W_188 = 740188
    RE_186 = 750186
    RE_188 = 750188
    OS_185 = 760185
    OS_191 = 760191
    OS_194 = 760194
    IR_188 = 770188
    IR_190 = 770190
    IR_192 = 770192
    IR_194 = 770194
    IR_192M = 770492
    IR_194M = 770494
    IR_194N = 770794
    PTXRAYS = 781000
    PT_188 = 780188
    PT_197 = 780197
    PT_195M = 780495
    AUXRAYS = 791000
    AU_194 = 790194
    AU_195 = 790195
    AU_196 = 790196
    AU_198 = 790198
    AU_199 = 790199
    AU_195M = 790495
    AU_197M = 790497
    HG_194 = 800194
    HG_197 = 800197
    HG_203 = 800203
    HG_195M = 800495
    HG_197M = 800497
    TL_200 = 810200
    TL_201 = 810201
    TL_202 = 810202
    TL_204 = 810204
    TL_206 = 810206
    TL_207 = 810207
    TL_208 = 810208
    PB_N_G = 822000
    PB_202 = 820202
    PB_203 = 820203
    PB_210 = 820210
    PB_212 = 820212
    PB_214 = 820214
    PB_202M = 820502
    BIXRAYS = 831000
    BI_N_G = 832000
    BI_205 = 830205
    BI_206 = 830206
    BI_207 = 830207
    BI_210 = 830210
    BI_211 = 830211
    BI_212 = 830212
    BI_213 = 830213
    BI_214 = 830214
    PO_209 = 840209
    PO_210 = 840210
    AT_211 = 850211
    FR_223 = 870223
    RA_223 = 880223
    RA_225 = 880225
    RA_226 = 880226
    AC_225 = 890225
    AC_227 = 890227
    THXRAYS = 901000
    TH_227 = 900227
    TH_228 = 900228
    TH_229 = 900229
    TH_231 = 900231
    TH_232 = 900232
    PA_231 = 910231
    PA_233 = 910233
    PA_234 = 910234
    PA_234M = 910534
    UXRAYS = 921000
    U_232 = 920232
    U_233 = 920233
    U_234 = 920234
    U_235 = 920235
    U_236 = 920236
    U_237 = 920237
    U_238 = 920238
    U_239 = 920239
    NP_236 = 930236
    NP_237 = 930237
    NP_238 = 930238
    NP_239 = 930239
    NP_240M = 930540
    PUXRAYS = 941000
    PU_236 = 940236
    PU_238 = 940238
    PU_239 = 940239
    PU_240 = 940240
    PU_241 = 940241
    PU_242 = 940242
    AM_241 = 950241
    AM_243 = 950243
    AM_242M = 950542
    CM_243 = 960243
    CM_244 = 960244
    CM_254 = 960254
    CF_249 = 980249
    CF_251 = 980251
    CF_252 = 980252

    _VALUES_TO_NAMES = {
        0: "Unknown",
        1: "Incoherent",
        2: "HEU",
        3: "LEU",
        4: "WGPU",
        5: "RGPU",
        6: "NEUTRONS",
        12000: "H_N_G",
        10003: "H_3",
        32000: "LI_N_G",
        33000: "LI_A_G",
        42000: "BE_N_G",
        43000: "BE_A_N",
        40007: "BE_7",
        53000: "B_A_G",
        52000: "B_N_G",
        63000: "C_A_G",
        62000: "C_N_G",
        60011: "C_11",
        60014: "C_14",
        74000: "N_A_P",
        72000: "N_N_G",
        70013: "N_13",
        70016: "N_16",
        83000: "O_A_N",
        80015: "O_15",
        93000: "F_A_G",
        92000: "F_N_G",
        90018: "F_18",
        113000: "NA_A_G",
        110022: "NA_22",
        110024: "NA_24",
        110025: "NA_25",
        123000: "MG_A_G",
        120027: "MG_27",
        120028: "MG_28",
        121000: "AL_N_G",
        124000: "AL_A_P",
        130026: "AL_26",
        130028: "AL_28",
        142000: "SI_N_G",
        140031: "SI_31",
        150032: "P_32",
        150033: "P_33",
        174000: "CL_A_P",
        172000: "CL_N_G",
        170036: "CL_36",
        170038: "CL_38",
        180041: "AR_41",
        194000: "K_A_P",
        190040: "K_40",
        190042: "K_42",
        190043: "K_43",
        200045: "CA_45",
        200047: "CA_47",
        210044: "SC_44",
        210046: "SC_46",
        210047: "SC_47",
        210048: "SC_48",
        210344: "SC_44M",
        220044: "TI_44",
        230048: "V_48",
        242000: "CR_N_G",
        240048: "CR_48",
        240051: "CR_51",
        250051: "MN_51",
        250052: "MN_52",
        250054: "MN_54",
        250056: "MN_56",
        250352: "MN_52M",
        252000: "FE_N_G",
        260052: "FE_52",
        260055: "FE_55",
        260059: "FE_59",
        270055: "CO_55",
        270056: "CO_56",
        270057: "CO_57",
        270058: "CO_58",
        270060: "CO_60",
        270061: "CO_61",
        270062: "CO_62",
        282000: "NI_N_G",
        280056: "NI_56",
        280057: "NI_57",
        280063: "NI_63",
        292000: "CU_N_G",
        290061: "CU_61",
        290062: "CU_62",
        290064: "CU_64",
        290067: "CU_67",
        300062: "ZN_62",
        300065: "ZN_65",
        300069: "ZN_69",
        300369: "ZN_69M",
        310066: "GA_66",
        310067: "GA_67",
        310068: "GA_68",
        310072: "GA_72",
        322000: "GE_N_G",
        325000: "GE_N_N",
        320068: "GE_68",
        320069: "GE_69",
        320075: "GE_75",
        320077: "GE_77",
        320375: "GE_75M",
        320377: "GE_77M",
        330071: "AS_71",
        330072: "AS_72",
        330073: "AS_73",
        330074: "AS_74",
        330076: "AS_76",
        330077: "AS_77",
        340072: "SE_72",
        340075: "SE_75",
        350075: "BR_75",
        350076: "BR_76",
        350077: "BR_77",
        350082: "BR_82",
        350085: "BR_85",
        360081: "KR_81",
        360085: "KR_85",
        360087: "KR_87",
        360088: "KR_88",
        360385: "KR_85M",
        370081: "RB_81",
        370082: "RB_82",
        370083: "RB_83",
        370084: "RB_84",
        370086: "RB_86",
        370088: "RB_88",
        370089: "RB_89",
        380082: "SR_82",
        380083: "SR_83",
        380085: "SR_85",
        380089: "SR_89",
        380090: "SR_90",
        380091: "SR_91",
        380092: "SR_92",
        380387: "SR_87M",
        390088: "Y_88",
        390090: "Y_90",
        390091: "Y_91",
        390092: "Y_92",
        390093: "Y_93",
        400088: "ZR_88",
        400089: "ZR_89",
        400095: "ZR_95",
        400097: "ZR_97",
        410089: "NB_89",
        410094: "NB_94",
        410095: "NB_95",
        410096: "NB_96",
        410097: "NB_97",
        410392: "NB_92M",
        410395: "NB_95M",
        422000: "MO_N_G",
        420099: "MO_99",
        420101: "MO_101",
        430096: "TC_96",
        430098: "TC_98",
        430099: "TC_99",
        430394: "TC_94M",
        430395: "TC_95M",
        430399: "TC_99M",
        440097: "RU_97",
        440103: "RU_103",
        440105: "RU_105",
        440106: "RU_106",
        450099: "RH_99",
        450100: "RH_100",
        450101: "RH_101",
        450102: "RH_102",
        450105: "RH_105",
        450406: "RH_106M",
        460102: "PD_102",
        460109: "PD_109",
        460409: "PD_109M",
        471000: "AGXRAYS",
        470408: "AG_108M",
        470410: "AG_110M",
        481000: "CDXRAYS",
        482000: "CD_N_G",
        480109: "CD_109",
        480115: "CD_115",
        480415: "CD_115M",
        492000: "IN_N_G",
        490111: "IN_111",
        490114: "IN_114",
        490116: "IN_116",
        490413: "IN_113M",
        490414: "IN_114M",
        490415: "IN_115M",
        490416: "IN_116M",
        490716: "IN_116N",
        502000: "SN_N_G",
        500113: "SN_113",
        500125: "SN_125",
        500417: "SN_117M",
        510122: "SB_122",
        510124: "SB_124",
        510125: "SB_125",
        510126: "SB_126",
        510127: "SB_127",
        510129: "SB_129",
        510420: "SB_120M",
        520121: "TE_121",
        520129: "TE_129",
        520132: "TE_132",
        520133: "TE_133",
        520419: "TE_119M",
        520423: "TE_123M",
        520429: "TE_129M",
        530123: "I_123",
        530124: "I_124",
        530125: "I_125",
        530126: "I_126",
        530129: "I_129",
        530131: "I_131",
        530132: "I_132",
        530133: "I_133",
        530134: "I_134",
        530135: "I_135",
        540122: "XE_122",
        540125: "XE_125",
        540127: "XE_127",
        540133: "XE_133",
        540135: "XE_135",
        540138: "XE_138",
        540429: "XE_129M",
        540431: "XE_131M",
        540433: "XE_133M",
        540435: "XE_135M",
        550130: "CS_130",
        550131: "CS_131",
        550132: "CS_132",
        550134: "CS_134",
        550136: "CS_136",
        550137: "CS_137",
        550138: "CS_138",
        560128: "BA_128",
        560131: "BA_131",
        560133: "BA_133",
        560139: "BA_139",
        560140: "BA_140",
        560141: "BA_141",
        572000: "LA_N_G",
        570140: "LA_140",
        570141: "LA_141",
        570142: "LA_142",
        580139: "CE_139",
        580141: "CE_141",
        580143: "CE_143",
        580144: "CE_144",
        590144: "PR_144",
        590145: "PR_145",
        600147: "ND_147",
        600149: "ND_149",
        610143: "PM_143",
        610145: "PM_145",
        610146: "PM_146",
        610147: "PM_147",
        610149: "PM_149",
        610151: "PM_151",
        620145: "SM_145",
        620151: "SM_151",
        620153: "SM_153",
        630146: "EU_146",
        630150: "EU_150",
        630152: "EU_152",
        630154: "EU_154",
        630155: "EU_155",
        630156: "EU_156",
        630452: "EU_152M",
        640146: "GD_146",
        640153: "GD_153",
        640159: "GD_159",
        650149: "TB_149",
        650160: "TB_160",
        660165: "DY_165",
        660166: "DY_166",
        670166: "HO_166",
        670167: "HO_167",
        670466: "HO_166M",
        680169: "ER_169",
        690167: "TM_167",
        690170: "TM_170",
        690171: "TM_171",
        700167: "YB_167",
        700169: "YB_169",
        700175: "YB_175",
        700469: "YB_169M",
        711000: "LUXRAYS",
        710169: "LU_169",
        710171: "LU_171",
        710172: "LU_172",
        710173: "LU_173",
        710177: "LU_177",
        710471: "LU_171M",
        710477: "LU_177M",
        720171: "HF_171",
        720172: "HF_172",
        720173: "HF_173",
        720175: "HF_175",
        720181: "HF_181",
        720478: "HF_178M",
        730178: "TA_178",
        730182: "TA_182",
        741000: "WXRAYS",
        742000: "W_N_G",
        740178: "W_178",
        740185: "W_185",
        740187: "W_187",
        740188: "W_188",
        750186: "RE_186",
        750188: "RE_188",
        760185: "OS_185",
        760191: "OS_191",
        760194: "OS_194",
        770188: "IR_188",
        770190: "IR_190",
        770192: "IR_192",
        770194: "IR_194",
        770492: "IR_192M",
        770494: "IR_194M",
        770794: "IR_194N",
        781000: "PTXRAYS",
        780188: "PT_188",
        780197: "PT_197",
        780495: "PT_195M",
        791000: "AUXRAYS",
        790194: "AU_194",
        790195: "AU_195",
        790196: "AU_196",
        790198: "AU_198",
        790199: "AU_199",
        790495: "AU_195M",
        790497: "AU_197M",
        800194: "HG_194",
        800197: "HG_197",
        800203: "HG_203",
        800495: "HG_195M",
        800497: "HG_197M",
        810200: "TL_200",
        810201: "TL_201",
        810202: "TL_202",
        810204: "TL_204",
        810206: "TL_206",
        810207: "TL_207",
        810208: "TL_208",
        822000: "PB_N_G",
        820202: "PB_202",
        820203: "PB_203",
        820210: "PB_210",
        820212: "PB_212",
        820214: "PB_214",
        820502: "PB_202M",
        831000: "BIXRAYS",
        832000: "BI_N_G",
        830205: "BI_205",
        830206: "BI_206",
        830207: "BI_207",
        830210: "BI_210",
        830211: "BI_211",
        830212: "BI_212",
        830213: "BI_213",
        830214: "BI_214",
        840209: "PO_209",
        840210: "PO_210",
        850211: "AT_211",
        870223: "FR_223",
        880223: "RA_223",
        880225: "RA_225",
        880226: "RA_226",
        890225: "AC_225",
        890227: "AC_227",
        901000: "THXRAYS",
        900227: "TH_227",
        900228: "TH_228",
        900229: "TH_229",
        900231: "TH_231",
        900232: "TH_232",
        910231: "PA_231",
        910233: "PA_233",
        910234: "PA_234",
        910534: "PA_234M",
        921000: "UXRAYS",
        920232: "U_232",
        920233: "U_233",
        920234: "U_234",
        920235: "U_235",
        920236: "U_236",
        920237: "U_237",
        920238: "U_238",
        920239: "U_239",
        930236: "NP_236",
        930237: "NP_237",
        930238: "NP_238",
        930239: "NP_239",
        930540: "NP_240M",
        941000: "PUXRAYS",
        940236: "PU_236",
        940238: "PU_238",
        940239: "PU_239",
        940240: "PU_240",
        940241: "PU_241",
        940242: "PU_242",
        950241: "AM_241",
        950243: "AM_243",
        950542: "AM_242M",
        960243: "CM_243",
        960244: "CM_244",
        960254: "CM_254",
        980249: "CF_249",
        980251: "CF_251",
        980252: "CF_252",
    }

    _NAMES_TO_VALUES = {
        "Unknown": 0,
        "Incoherent": 1,
        "HEU": 2,
        "LEU": 3,
        "WGPU": 4,
        "RGPU": 5,
        "NEUTRONS": 6,
        "H_N_G": 12000,
        "H_3": 10003,
        "LI_N_G": 32000,
        "LI_A_G": 33000,
        "BE_N_G": 42000,
        "BE_A_N": 43000,
        "BE_7": 40007,
        "B_A_G": 53000,
        "B_N_G": 52000,
        "C_A_G": 63000,
        "C_N_G": 62000,
        "C_11": 60011,
        "C_14": 60014,
        "N_A_P": 74000,
        "N_N_G": 72000,
        "N_13": 70013,
        "N_16": 70016,
        "O_A_N": 83000,
        "O_15": 80015,
        "F_A_G": 93000,
        "F_N_G": 92000,
        "F_18": 90018,
        "NA_A_G": 113000,
        "NA_22": 110022,
        "NA_24": 110024,
        "NA_25": 110025,
        "MG_A_G": 123000,
        "MG_27": 120027,
        "MG_28": 120028,
        "AL_N_G": 121000,
        "AL_A_P": 124000,
        "AL_26": 130026,
        "AL_28": 130028,
        "SI_N_G": 142000,
        "SI_31": 140031,
        "P_32": 150032,
        "P_33": 150033,
        "CL_A_P": 174000,
        "CL_N_G": 172000,
        "CL_36": 170036,
        "CL_38": 170038,
        "AR_41": 180041,
        "K_A_P": 194000,
        "K_40": 190040,
        "K_42": 190042,
        "K_43": 190043,
        "CA_45": 200045,
        "CA_47": 200047,
        "SC_44": 210044,
        "SC_46": 210046,
        "SC_47": 210047,
        "SC_48": 210048,
        "SC_44M": 210344,
        "TI_44": 220044,
        "V_48": 230048,
        "CR_N_G": 242000,
        "CR_48": 240048,
        "CR_51": 240051,
        "MN_51": 250051,
        "MN_52": 250052,
        "MN_54": 250054,
        "MN_56": 250056,
        "MN_52M": 250352,
        "FE_N_G": 252000,
        "FE_52": 260052,
        "FE_55": 260055,
        "FE_59": 260059,
        "CO_55": 270055,
        "CO_56": 270056,
        "CO_57": 270057,
        "CO_58": 270058,
        "CO_60": 270060,
        "CO_61": 270061,
        "CO_62": 270062,
        "NI_N_G": 282000,
        "NI_56": 280056,
        "NI_57": 280057,
        "NI_63": 280063,
        "CU_N_G": 292000,
        "CU_61": 290061,
        "CU_62": 290062,
        "CU_64": 290064,
        "CU_67": 290067,
        "ZN_62": 300062,
        "ZN_65": 300065,
        "ZN_69": 300069,
        "ZN_69M": 300369,
        "GA_66": 310066,
        "GA_67": 310067,
        "GA_68": 310068,
        "GA_72": 310072,
        "GE_N_G": 322000,
        "GE_N_N": 325000,
        "GE_68": 320068,
        "GE_69": 320069,
        "GE_75": 320075,
        "GE_77": 320077,
        "GE_75M": 320375,
        "GE_77M": 320377,
        "AS_71": 330071,
        "AS_72": 330072,
        "AS_73": 330073,
        "AS_74": 330074,
        "AS_76": 330076,
        "AS_77": 330077,
        "SE_72": 340072,
        "SE_75": 340075,
        "BR_75": 350075,
        "BR_76": 350076,
        "BR_77": 350077,
        "BR_82": 350082,
        "BR_85": 350085,
        "KR_81": 360081,
        "KR_85": 360085,
        "KR_87": 360087,
        "KR_88": 360088,
        "KR_85M": 360385,
        "RB_81": 370081,
        "RB_82": 370082,
        "RB_83": 370083,
        "RB_84": 370084,
        "RB_86": 370086,
        "RB_88": 370088,
        "RB_89": 370089,
        "SR_82": 380082,
        "SR_83": 380083,
        "SR_85": 380085,
        "SR_89": 380089,
        "SR_90": 380090,
        "SR_91": 380091,
        "SR_92": 380092,
        "SR_87M": 380387,
        "Y_88": 390088,
        "Y_90": 390090,
        "Y_91": 390091,
        "Y_92": 390092,
        "Y_93": 390093,
        "ZR_88": 400088,
        "ZR_89": 400089,
        "ZR_95": 400095,
        "ZR_97": 400097,
        "NB_89": 410089,
        "NB_94": 410094,
        "NB_95": 410095,
        "NB_96": 410096,
        "NB_97": 410097,
        "NB_92M": 410392,
        "NB_95M": 410395,
        "MO_N_G": 422000,
        "MO_99": 420099,
        "MO_101": 420101,
        "TC_96": 430096,
        "TC_98": 430098,
        "TC_99": 430099,
        "TC_94M": 430394,
        "TC_95M": 430395,
        "TC_99M": 430399,
        "RU_97": 440097,
        "RU_103": 440103,
        "RU_105": 440105,
        "RU_106": 440106,
        "RH_99": 450099,
        "RH_100": 450100,
        "RH_101": 450101,
        "RH_102": 450102,
        "RH_105": 450105,
        "RH_106M": 450406,
        "PD_102": 460102,
        "PD_109": 460109,
        "PD_109M": 460409,
        "AGXRAYS": 471000,
        "AG_108M": 470408,
        "AG_110M": 470410,
        "CDXRAYS": 481000,
        "CD_N_G": 482000,
        "CD_109": 480109,
        "CD_115": 480115,
        "CD_115M": 480415,
        "IN_N_G": 492000,
        "IN_111": 490111,
        "IN_114": 490114,
        "IN_116": 490116,
        "IN_113M": 490413,
        "IN_114M": 490414,
        "IN_115M": 490415,
        "IN_116M": 490416,
        "IN_116N": 490716,
        "SN_N_G": 502000,
        "SN_113": 500113,
        "SN_125": 500125,
        "SN_117M": 500417,
        "SB_122": 510122,
        "SB_124": 510124,
        "SB_125": 510125,
        "SB_126": 510126,
        "SB_127": 510127,
        "SB_129": 510129,
        "SB_120M": 510420,
        "TE_121": 520121,
        "TE_129": 520129,
        "TE_132": 520132,
        "TE_133": 520133,
        "TE_119M": 520419,
        "TE_123M": 520423,
        "TE_129M": 520429,
        "I_123": 530123,
        "I_124": 530124,
        "I_125": 530125,
        "I_126": 530126,
        "I_129": 530129,
        "I_131": 530131,
        "I_132": 530132,
        "I_133": 530133,
        "I_134": 530134,
        "I_135": 530135,
        "XE_122": 540122,
        "XE_125": 540125,
        "XE_127": 540127,
        "XE_133": 540133,
        "XE_135": 540135,
        "XE_138": 540138,
        "XE_129M": 540429,
        "XE_131M": 540431,
        "XE_133M": 540433,
        "XE_135M": 540435,
        "CS_130": 550130,
        "CS_131": 550131,
        "CS_132": 550132,
        "CS_134": 550134,
        "CS_136": 550136,
        "CS_137": 550137,
        "CS_138": 550138,
        "BA_128": 560128,
        "BA_131": 560131,
        "BA_133": 560133,
        "BA_139": 560139,
        "BA_140": 560140,
        "BA_141": 560141,
        "LA_N_G": 572000,
        "LA_140": 570140,
        "LA_141": 570141,
        "LA_142": 570142,
        "CE_139": 580139,
        "CE_141": 580141,
        "CE_143": 580143,
        "CE_144": 580144,
        "PR_144": 590144,
        "PR_145": 590145,
        "ND_147": 600147,
        "ND_149": 600149,
        "PM_143": 610143,
        "PM_145": 610145,
        "PM_146": 610146,
        "PM_147": 610147,
        "PM_149": 610149,
        "PM_151": 610151,
        "SM_145": 620145,
        "SM_151": 620151,
        "SM_153": 620153,
        "EU_146": 630146,
        "EU_150": 630150,
        "EU_152": 630152,
        "EU_154": 630154,
        "EU_155": 630155,
        "EU_156": 630156,
        "EU_152M": 630452,
        "GD_146": 640146,
        "GD_153": 640153,
        "GD_159": 640159,
        "TB_149": 650149,
        "TB_160": 650160,
        "DY_165": 660165,
        "DY_166": 660166,
        "HO_166": 670166,
        "HO_167": 670167,
        "HO_166M": 670466,
        "ER_169": 680169,
        "TM_167": 690167,
        "TM_170": 690170,
        "TM_171": 690171,
        "YB_167": 700167,
        "YB_169": 700169,
        "YB_175": 700175,
        "YB_169M": 700469,
        "LUXRAYS": 711000,
        "LU_169": 710169,
        "LU_171": 710171,
        "LU_172": 710172,
        "LU_173": 710173,
        "LU_177": 710177,
        "LU_171M": 710471,
        "LU_177M": 710477,
        "HF_171": 720171,
        "HF_172": 720172,
        "HF_173": 720173,
        "HF_175": 720175,
        "HF_181": 720181,
        "HF_178M": 720478,
        "TA_178": 730178,
        "TA_182": 730182,
        "WXRAYS": 741000,
        "W_N_G": 742000,
        "W_178": 740178,
        "W_185": 740185,
        "W_187": 740187,
        "W_188": 740188,
        "RE_186": 750186,
        "RE_188": 750188,
        "OS_185": 760185,
        "OS_191": 760191,
        "OS_194": 760194,
        "IR_188": 770188,
        "IR_190": 770190,
        "IR_192": 770192,
        "IR_194": 770194,
        "IR_192M": 770492,
        "IR_194M": 770494,
        "IR_194N": 770794,
        "PTXRAYS": 781000,
        "PT_188": 780188,
        "PT_197": 780197,
        "PT_195M": 780495,
        "AUXRAYS": 791000,
        "AU_194": 790194,
        "AU_195": 790195,
        "AU_196": 790196,
        "AU_198": 790198,
        "AU_199": 790199,
        "AU_195M": 790495,
        "AU_197M": 790497,
        "HG_194": 800194,
        "HG_197": 800197,
        "HG_203": 800203,
        "HG_195M": 800495,
        "HG_197M": 800497,
        "TL_200": 810200,
        "TL_201": 810201,
        "TL_202": 810202,
        "TL_204": 810204,
        "TL_206": 810206,
        "TL_207": 810207,
        "TL_208": 810208,
        "PB_N_G": 822000,
        "PB_202": 820202,
        "PB_203": 820203,
        "PB_210": 820210,
        "PB_212": 820212,
        "PB_214": 820214,
        "PB_202M": 820502,
        "BIXRAYS": 831000,
        "BI_N_G": 832000,
        "BI_205": 830205,
        "BI_206": 830206,
        "BI_207": 830207,
        "BI_210": 830210,
        "BI_211": 830211,
        "BI_212": 830212,
        "BI_213": 830213,
        "BI_214": 830214,
        "PO_209": 840209,
        "PO_210": 840210,
        "AT_211": 850211,
        "FR_223": 870223,
        "RA_223": 880223,
        "RA_225": 880225,
        "RA_226": 880226,
        "AC_225": 890225,
        "AC_227": 890227,
        "THXRAYS": 901000,
        "TH_227": 900227,
        "TH_228": 900228,
        "TH_229": 900229,
        "TH_231": 900231,
        "TH_232": 900232,
        "PA_231": 910231,
        "PA_233": 910233,
        "PA_234": 910234,
        "PA_234M": 910534,
        "UXRAYS": 921000,
        "U_232": 920232,
        "U_233": 920233,
        "U_234": 920234,
        "U_235": 920235,
        "U_236": 920236,
        "U_237": 920237,
        "U_238": 920238,
        "U_239": 920239,
        "NP_236": 930236,
        "NP_237": 930237,
        "NP_238": 930238,
        "NP_239": 930239,
        "NP_240M": 930540,
        "PUXRAYS": 941000,
        "PU_236": 940236,
        "PU_238": 940238,
        "PU_239": 940239,
        "PU_240": 940240,
        "PU_241": 940241,
        "PU_242": 940242,
        "AM_241": 950241,
        "AM_243": 950243,
        "AM_242M": 950542,
        "CM_243": 960243,
        "CM_244": 960244,
        "CM_254": 960254,
        "CF_249": 980249,
        "CF_251": 980251,
        "CF_252": 980252,
    }


class DoseInfo(object):
    """
    Attributes:
     - gammaDose
     - neutronDose
    """


    def __init__(self, gammaDose=None, neutronDose=None,):
        self.gammaDose = gammaDose
        self.neutronDose = neutronDose

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.DOUBLE:
                    self.gammaDose = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.DOUBLE:
                    self.neutronDose = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('DoseInfo')
        if self.gammaDose is not None:
            oprot.writeFieldBegin('gammaDose', TType.DOUBLE, 1)
            oprot.writeDouble(self.gammaDose)
            oprot.writeFieldEnd()
        if self.neutronDose is not None:
            oprot.writeFieldBegin('neutronDose', TType.DOUBLE, 2)
            oprot.writeDouble(self.neutronDose)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ShieldingInfo(object):
    """
    Attributes:
     - effectiveZ
     - effectiveAD
    """


    def __init__(self, effectiveZ=None, effectiveAD=None,):
        self.effectiveZ = effectiveZ
        self.effectiveAD = effectiveAD

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.DOUBLE:
                    self.effectiveZ = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.DOUBLE:
                    self.effectiveAD = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ShieldingInfo')
        if self.effectiveZ is not None:
            oprot.writeFieldBegin('effectiveZ', TType.DOUBLE, 1)
            oprot.writeDouble(self.effectiveZ)
            oprot.writeFieldEnd()
        if self.effectiveAD is not None:
            oprot.writeFieldBegin('effectiveAD', TType.DOUBLE, 2)
            oprot.writeDouble(self.effectiveAD)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ActivityInfo(object):
    """
    Attributes:
     - activity
     - activityUnit
    """


    def __init__(self, activity=None, activityUnit=None,):
        self.activity = activity
        self.activityUnit = activityUnit

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.DOUBLE:
                    self.activity = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.activityUnit = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ActivityInfo')
        if self.activity is not None:
            oprot.writeFieldBegin('activity', TType.DOUBLE, 1)
            oprot.writeDouble(self.activity)
            oprot.writeFieldEnd()
        if self.activityUnit is not None:
            oprot.writeFieldBegin('activityUnit', TType.I32, 2)
            oprot.writeI32(self.activityUnit)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ClassificationSummaryEntry(object):
    """
    Attributes:
     - classification
     - probability
    """


    def __init__(self, classification=None, probability=None,):
        self.classification = classification
        self.probability = probability

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.classification = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.DOUBLE:
                    self.probability = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ClassificationSummaryEntry')
        if self.classification is not None:
            oprot.writeFieldBegin('classification', TType.I32, 1)
            oprot.writeI32(self.classification)
            oprot.writeFieldEnd()
        if self.probability is not None:
            oprot.writeFieldBegin('probability', TType.DOUBLE, 2)
            oprot.writeDouble(self.probability)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ClassificationSummary(object):


    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ClassificationSummary')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class NuclideSummaryEntry(object):
    """
    Attributes:
     - nuclide
     - probability
     - activityInfo
     - doseInfo
    """


    def __init__(self, nuclide=None, probability=None, activityInfo=None, doseInfo=None,):
        self.nuclide = nuclide
        self.probability = probability
        self.activityInfo = activityInfo
        self.doseInfo = doseInfo

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.nuclide = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.DOUBLE:
                    self.probability = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.activityInfo = ActivityInfo()
                    self.activityInfo.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.doseInfo = DoseInfo()
                    self.doseInfo.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('NuclideSummaryEntry')
        if self.nuclide is not None:
            oprot.writeFieldBegin('nuclide', TType.I32, 1)
            oprot.writeI32(self.nuclide)
            oprot.writeFieldEnd()
        if self.probability is not None:
            oprot.writeFieldBegin('probability', TType.DOUBLE, 2)
            oprot.writeDouble(self.probability)
            oprot.writeFieldEnd()
        if self.activityInfo is not None:
            oprot.writeFieldBegin('activityInfo', TType.STRUCT, 3)
            self.activityInfo.write(oprot)
            oprot.writeFieldEnd()
        if self.doseInfo is not None:
            oprot.writeFieldBegin('doseInfo', TType.STRUCT, 4)
            self.doseInfo.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class IdentificationSolutionEntry(object):
    """
    Attributes:
     - nuclide
     - countFraction
     - activityInfo
     - doseInfo
     - shieldingInfo
    """


    def __init__(self, nuclide=None, countFraction=None, activityInfo=None, doseInfo=None, shieldingInfo=None,):
        self.nuclide = nuclide
        self.countFraction = countFraction
        self.activityInfo = activityInfo
        self.doseInfo = doseInfo
        self.shieldingInfo = shieldingInfo

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.nuclide = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.DOUBLE:
                    self.countFraction = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.activityInfo = ActivityInfo()
                    self.activityInfo.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.doseInfo = DoseInfo()
                    self.doseInfo.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.shieldingInfo = ShieldingInfo()
                    self.shieldingInfo.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('IdentificationSolutionEntry')
        if self.nuclide is not None:
            oprot.writeFieldBegin('nuclide', TType.I32, 1)
            oprot.writeI32(self.nuclide)
            oprot.writeFieldEnd()
        if self.countFraction is not None:
            oprot.writeFieldBegin('countFraction', TType.DOUBLE, 2)
            oprot.writeDouble(self.countFraction)
            oprot.writeFieldEnd()
        if self.activityInfo is not None:
            oprot.writeFieldBegin('activityInfo', TType.STRUCT, 3)
            self.activityInfo.write(oprot)
            oprot.writeFieldEnd()
        if self.doseInfo is not None:
            oprot.writeFieldBegin('doseInfo', TType.STRUCT, 4)
            self.doseInfo.write(oprot)
            oprot.writeFieldEnd()
        if self.shieldingInfo is not None:
            oprot.writeFieldBegin('shieldingInfo', TType.STRUCT, 5)
            self.shieldingInfo.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class IdentificationSolution(object):
    """
    Attributes:
     - probability
     - nuclides
     - doseInfo
     - classification
    """


    def __init__(self, probability=None, nuclides=None, doseInfo=None, classification=None,):
        self.probability = probability
        self.nuclides = nuclides
        self.doseInfo = doseInfo
        self.classification = classification

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.DOUBLE:
                    self.probability = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.nuclides = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = IdentificationSolutionEntry()
                        _elem5.read(iprot)
                        self.nuclides.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.doseInfo = DoseInfo()
                    self.doseInfo.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.classification = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('IdentificationSolution')
        if self.probability is not None:
            oprot.writeFieldBegin('probability', TType.DOUBLE, 1)
            oprot.writeDouble(self.probability)
            oprot.writeFieldEnd()
        if self.nuclides is not None:
            oprot.writeFieldBegin('nuclides', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.nuclides))
            for iter6 in self.nuclides:
                iter6.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.doseInfo is not None:
            oprot.writeFieldBegin('doseInfo', TType.STRUCT, 3)
            self.doseInfo.write(oprot)
            oprot.writeFieldEnd()
        if self.classification is not None:
            oprot.writeFieldBegin('classification', TType.I32, 4)
            oprot.writeI32(self.classification)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class IdentificationConfiguration(object):
    """
    Attributes:
     - includedNuclides
     - backgroundTime
    """


    def __init__(self, includedNuclides=None, backgroundTime=None,):
        self.includedNuclides = includedNuclides
        self.backgroundTime = backgroundTime

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.includedNuclides = []
                    (_etype10, _size7) = iprot.readListBegin()
                    for _i11 in range(_size7):
                        _elem12 = iprot.readI32()
                        self.includedNuclides.append(_elem12)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.backgroundTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('IdentificationConfiguration')
        if self.includedNuclides is not None:
            oprot.writeFieldBegin('includedNuclides', TType.LIST, 1)
            oprot.writeListBegin(TType.I32, len(self.includedNuclides))
            for iter13 in self.includedNuclides:
                oprot.writeI32(iter13)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.backgroundTime is not None:
            oprot.writeFieldBegin('backgroundTime', TType.I64, 2)
            oprot.writeI64(self.backgroundTime)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class IdentificationDefinition(object):
    """
    Attributes:
     - hasDoseInfo
     - startingIdentificationConfiguration
    """


    def __init__(self, hasDoseInfo=False, startingIdentificationConfiguration=None,):
        self.hasDoseInfo = hasDoseInfo
        self.startingIdentificationConfiguration = startingIdentificationConfiguration

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BOOL:
                    self.hasDoseInfo = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.startingIdentificationConfiguration = IdentificationConfiguration()
                    self.startingIdentificationConfiguration.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('IdentificationDefinition')
        if self.hasDoseInfo is not None:
            oprot.writeFieldBegin('hasDoseInfo', TType.BOOL, 1)
            oprot.writeBool(self.hasDoseInfo)
            oprot.writeFieldEnd()
        if self.startingIdentificationConfiguration is not None:
            oprot.writeFieldBegin('startingIdentificationConfiguration', TType.STRUCT, 2)
            self.startingIdentificationConfiguration.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class IdentificationResult(object):
    """
    Attributes:
     - liveTime: time in milliseconds used for computation of result
     - distance: effective distance assumed for this source analysis (see notes)
     - timeOfDecision: Millseconds since Unix Epoch - Time the decision was actually reached
     - doseInfo: Information about the estimated dose
     - classificationSummaries: Classification summary
     - nuclideSummaries: List of all nuclides that may be present with probabilites
     - solutions: Specific fits to the spectrum including mixtures
     - spectrumResult: Return spectrum used to determine result
    """


    def __init__(self, liveTime=None, distance=None, timeOfDecision=None, doseInfo=None, classificationSummaries=None, nuclideSummaries=None, solutions=None, spectrumResult=None,):
        self.liveTime = liveTime
        self.distance = distance
        self.timeOfDecision = timeOfDecision
        self.doseInfo = doseInfo
        self.classificationSummaries = classificationSummaries
        self.nuclideSummaries = nuclideSummaries
        self.solutions = solutions
        self.spectrumResult = spectrumResult

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.liveTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.DOUBLE:
                    self.distance = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.timeOfDecision = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.doseInfo = DoseInfo()
                    self.doseInfo.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.LIST:
                    self.classificationSummaries = []
                    (_etype17, _size14) = iprot.readListBegin()
                    for _i18 in range(_size14):
                        _elem19 = ClassificationSummaryEntry()
                        _elem19.read(iprot)
                        self.classificationSummaries.append(_elem19)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.LIST:
                    self.nuclideSummaries = []
                    (_etype23, _size20) = iprot.readListBegin()
                    for _i24 in range(_size20):
                        _elem25 = NuclideSummaryEntry()
                        _elem25.read(iprot)
                        self.nuclideSummaries.append(_elem25)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.LIST:
                    self.solutions = []
                    (_etype29, _size26) = iprot.readListBegin()
                    for _i30 in range(_size26):
                        _elem31 = IdentificationSolution()
                        _elem31.read(iprot)
                        self.solutions.append(_elem31)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRUCT:
                    self.spectrumResult = Spectrum.ttypes.SpectrumResult()
                    self.spectrumResult.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('IdentificationResult')
        if self.liveTime is not None:
            oprot.writeFieldBegin('liveTime', TType.I64, 1)
            oprot.writeI64(self.liveTime)
            oprot.writeFieldEnd()
        if self.distance is not None:
            oprot.writeFieldBegin('distance', TType.DOUBLE, 2)
            oprot.writeDouble(self.distance)
            oprot.writeFieldEnd()
        if self.timeOfDecision is not None:
            oprot.writeFieldBegin('timeOfDecision', TType.I64, 3)
            oprot.writeI64(self.timeOfDecision)
            oprot.writeFieldEnd()
        if self.doseInfo is not None:
            oprot.writeFieldBegin('doseInfo', TType.STRUCT, 4)
            self.doseInfo.write(oprot)
            oprot.writeFieldEnd()
        if self.classificationSummaries is not None:
            oprot.writeFieldBegin('classificationSummaries', TType.LIST, 5)
            oprot.writeListBegin(TType.STRUCT, len(self.classificationSummaries))
            for iter32 in self.classificationSummaries:
                iter32.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.nuclideSummaries is not None:
            oprot.writeFieldBegin('nuclideSummaries', TType.LIST, 6)
            oprot.writeListBegin(TType.STRUCT, len(self.nuclideSummaries))
            for iter33 in self.nuclideSummaries:
                iter33.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.solutions is not None:
            oprot.writeFieldBegin('solutions', TType.LIST, 7)
            oprot.writeListBegin(TType.STRUCT, len(self.solutions))
            for iter34 in self.solutions:
                iter34.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.spectrumResult is not None:
            oprot.writeFieldBegin('spectrumResult', TType.STRUCT, 8)
            self.spectrumResult.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(DoseInfo)
DoseInfo.thrift_spec = (
    None,  # 0
    (1, TType.DOUBLE, 'gammaDose', None, None, ),  # 1
    (2, TType.DOUBLE, 'neutronDose', None, None, ),  # 2
)
all_structs.append(ShieldingInfo)
ShieldingInfo.thrift_spec = (
    None,  # 0
    (1, TType.DOUBLE, 'effectiveZ', None, None, ),  # 1
    (2, TType.DOUBLE, 'effectiveAD', None, None, ),  # 2
)
all_structs.append(ActivityInfo)
ActivityInfo.thrift_spec = (
    None,  # 0
    (1, TType.DOUBLE, 'activity', None, None, ),  # 1
    (2, TType.I32, 'activityUnit', None, None, ),  # 2
)
all_structs.append(ClassificationSummaryEntry)
ClassificationSummaryEntry.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'classification', None, None, ),  # 1
    (2, TType.DOUBLE, 'probability', None, None, ),  # 2
)
all_structs.append(ClassificationSummary)
ClassificationSummary.thrift_spec = (
)
all_structs.append(NuclideSummaryEntry)
NuclideSummaryEntry.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'nuclide', None, None, ),  # 1
    (2, TType.DOUBLE, 'probability', None, None, ),  # 2
    (3, TType.STRUCT, 'activityInfo', [ActivityInfo, None], None, ),  # 3
    (4, TType.STRUCT, 'doseInfo', [DoseInfo, None], None, ),  # 4
)
all_structs.append(IdentificationSolutionEntry)
IdentificationSolutionEntry.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'nuclide', None, None, ),  # 1
    (2, TType.DOUBLE, 'countFraction', None, None, ),  # 2
    (3, TType.STRUCT, 'activityInfo', [ActivityInfo, None], None, ),  # 3
    (4, TType.STRUCT, 'doseInfo', [DoseInfo, None], None, ),  # 4
    (5, TType.STRUCT, 'shieldingInfo', [ShieldingInfo, None], None, ),  # 5
)
all_structs.append(IdentificationSolution)
IdentificationSolution.thrift_spec = (
    None,  # 0
    (1, TType.DOUBLE, 'probability', None, None, ),  # 1
    (2, TType.LIST, 'nuclides', (TType.STRUCT, [IdentificationSolutionEntry, None], False), None, ),  # 2
    (3, TType.STRUCT, 'doseInfo', [DoseInfo, None], None, ),  # 3
    (4, TType.I32, 'classification', None, None, ),  # 4
)
all_structs.append(IdentificationConfiguration)
IdentificationConfiguration.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'includedNuclides', (TType.I32, None, False), None, ),  # 1
    (2, TType.I64, 'backgroundTime', None, None, ),  # 2
)
all_structs.append(IdentificationDefinition)
IdentificationDefinition.thrift_spec = (
    None,  # 0
    (1, TType.BOOL, 'hasDoseInfo', None, False, ),  # 1
    (2, TType.STRUCT, 'startingIdentificationConfiguration', [IdentificationConfiguration, None], None, ),  # 2
)
all_structs.append(IdentificationResult)
IdentificationResult.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'liveTime', None, None, ),  # 1
    (2, TType.DOUBLE, 'distance', None, None, ),  # 2
    (3, TType.I64, 'timeOfDecision', None, None, ),  # 3
    (4, TType.STRUCT, 'doseInfo', [DoseInfo, None], None, ),  # 4
    (5, TType.LIST, 'classificationSummaries', (TType.STRUCT, [ClassificationSummaryEntry, None], False), None, ),  # 5
    (6, TType.LIST, 'nuclideSummaries', (TType.STRUCT, [NuclideSummaryEntry, None], False), None, ),  # 6
    (7, TType.LIST, 'solutions', (TType.STRUCT, [IdentificationSolution, None], False), None, ),  # 7
    (8, TType.STRUCT, 'spectrumResult', [Spectrum.ttypes.SpectrumResult, None], None, ),  # 8
)
fix_spec(all_structs)
del all_structs
