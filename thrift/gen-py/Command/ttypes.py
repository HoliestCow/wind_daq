#
# Autogenerated by Thrift Compiler (1.0.0-dev)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys
import UUID.ttypes

from thrift.transport import TTransport
all_structs = []


class Instructions(object):
    Start = 0
    Stop = 1
    ResetAll = 2
    ResetBackground = 3
    ResetForeground = 4
    Freeze = 5
    Thaw = 6
    Other = 7

    _VALUES_TO_NAMES = {
        0: "Start",
        1: "Stop",
        2: "ResetAll",
        3: "ResetBackground",
        4: "ResetForeground",
        5: "Freeze",
        6: "Thaw",
        7: "Other",
    }

    _NAMES_TO_VALUES = {
        "Start": 0,
        "Stop": 1,
        "ResetAll": 2,
        "ResetBackground": 3,
        "ResetForeground": 4,
        "Freeze": 5,
        "Thaw": 6,
        "Other": 7,
    }


class Command(object):
    """
    Attributes:
     - componentId
     - instruction
     - commandData
    """


    def __init__(self, componentId=None, instruction=None, commandData=None,):
        self.componentId = componentId
        self.instruction = instruction
        self.commandData = commandData

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.componentId = UUID.ttypes.UUID()
                    self.componentId.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.instruction = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.commandData = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Command')
        if self.componentId is not None:
            oprot.writeFieldBegin('componentId', TType.STRUCT, 1)
            self.componentId.write(oprot)
            oprot.writeFieldEnd()
        if self.instruction is not None:
            oprot.writeFieldBegin('instruction', TType.I32, 2)
            oprot.writeI32(self.instruction)
            oprot.writeFieldEnd()
        if self.commandData is not None:
            oprot.writeFieldBegin('commandData', TType.STRING, 3)
            oprot.writeString(self.commandData.encode('utf-8') if sys.version_info[0] == 2 else self.commandData)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(Command)
Command.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'componentId', [UUID.ttypes.UUID, None], None, ),  # 1
    (2, TType.I32, 'instruction', None, None, ),  # 2
    (3, TType.STRING, 'commandData', 'UTF8', None, ),  # 3
)
fix_spec(all_structs)
del all_structs
