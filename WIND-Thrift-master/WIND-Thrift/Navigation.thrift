namespace cpp wind
namespace java org.wind
namespace csharp org.wind

include "UUID.thrift"
include "Common.thrift"

struct Location
{
  /** Latitude in decimal degrees */
  1: double latitude;

  /** Longitude in decimal degrees */
  2: double longitude;

  /** Altitude of the point in meters.
   * If not specified then the surface of the Earth is assumed. 
   * Units are in meters.
   */
  3: optional double altitude;
}

/** Description of the uncertainty in an absolute location.  
 * This is an elipsoid centered about the location expressed in 
 * 2+ dimensions. The altitude uncertainty is 
 * not correlated with latitude or longitude.
 */
struct LocationUncertainty
{
  /** Angle in degrees to rotate the majorUncertainty axis into the lat/long 
   * coordinate system. 
   * For example, if angle is 0, the majorUncertainty refers to uncertainty in 
   * latitude and minorUncertainty is in longitude. An angle of 90 indicates 
   * that majorUncertainty refers to longitude and minorUncertainty to latitude.
   */
  1: double angle;

  /** Uncertainty along major and minor axes of an ellipse. 
   * majorUncertainty must be greater than or equal to the minorUncertainty.
   * Units are the standard deviation in decimal degrees.
   */
  2: double majorUncertainty;
  3: double minorUncertainty;

  /** Uncertainty in the altitude if available.
   * Units are the standard deviation in meters.
   */
  4: optional double altitudeUncertainty;
}

enum BoundingBoxType
{
  MissionArea,
  AreaOfInterest,
  Other
}

struct Waypoint
{
  1: UUID.UUID waypointId;
  2: i64 timeStamp; // POSIX time * 1000 - should match data packet's time stamp
  3: string name;
  4: Location location;
}

struct BoundingBox
{
  1: UUID.UUID boundingBoxId;  // Unique identifier
  2: i64 timeStamp; // POSIX time * 1000 - should match data packet's time stamp
  3: string name;
  4: BoundingBoxType type;
  5: list<Location> vertices;
}

/**
 * Map overlays are used by PTU operators to aid them in localizing themselves and 
 * understanding their progress in completing tasks such as clearing an area. A 
 * floorplan may be provided by the CVRS or generated by algorithms as PTUs move through an area.
 * A clearing map will show what area of interest remains to be cleared. Provision of such a map
 * may be useful to sync information between PTUs (especially PTUs joining a task that is 
 * already underway).
 */
enum MapOverlayType
{
  Floorplan,
  ClearingMap
  // Additional overlay types go here
}

struct MapOverlay
{
  1: UUID.UUID mapOverlayId;
  2: i64 timeStamp;
  3: string name;
  4: Location location; // top left corner of image
  5: double width; // meters
  6: double height; // meters
  7: MapOverlayType type;
  8: binary image;
  9: string mimeType;
}
