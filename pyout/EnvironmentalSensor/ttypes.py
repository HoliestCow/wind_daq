#
# Autogenerated by Thrift Compiler (1.0.0-dev)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys
import Health.ttypes
import ComponentLocation.ttypes
import UUID.ttypes

from thrift.transport import TTransport
all_structs = []


class EnvironmentalTypes(object):
    RelativeHumidity = 0
    Pressure = 1
    Temperature = 2
    WindDirection = 3
    WindSpeed = 4
    UVIndex = 5

    _VALUES_TO_NAMES = {
        0: "RelativeHumidity",
        1: "Pressure",
        2: "Temperature",
        3: "WindDirection",
        4: "WindSpeed",
        5: "UVIndex",
    }

    _NAMES_TO_VALUES = {
        "RelativeHumidity": 0,
        "Pressure": 1,
        "Temperature": 2,
        "WindDirection": 3,
        "WindSpeed": 4,
        "UVIndex": 5,
    }


class EnvironmentalSensorDefinition(object):
    """
    Defines what the sensor is and what it's capabilities are.  This should not change during normal operation

    Attributes:
     - componentId
     - componentName
     - vendorName
     - serialNumber
     - sensorType
     - location
     - componentPositionAndOrientation
    """


    def __init__(self, componentId=None, componentName=None, vendorName=None, serialNumber=None, sensorType=None, location=None, componentPositionAndOrientation=None,):
        self.componentId = componentId
        self.componentName = componentName
        self.vendorName = vendorName
        self.serialNumber = serialNumber
        self.sensorType = sensorType
        self.location = location
        self.componentPositionAndOrientation = componentPositionAndOrientation

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.componentId = UUID.ttypes.UUID()
                    self.componentId.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.componentName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.vendorName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.serialNumber = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.sensorType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.location = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRUCT:
                    self.componentPositionAndOrientation = ComponentLocation.ttypes.GridPositionAndOrientation()
                    self.componentPositionAndOrientation.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('EnvironmentalSensorDefinition')
        if self.componentId is not None:
            oprot.writeFieldBegin('componentId', TType.STRUCT, 1)
            self.componentId.write(oprot)
            oprot.writeFieldEnd()
        if self.componentName is not None:
            oprot.writeFieldBegin('componentName', TType.STRING, 2)
            oprot.writeString(self.componentName.encode('utf-8') if sys.version_info[0] == 2 else self.componentName)
            oprot.writeFieldEnd()
        if self.vendorName is not None:
            oprot.writeFieldBegin('vendorName', TType.STRING, 3)
            oprot.writeString(self.vendorName.encode('utf-8') if sys.version_info[0] == 2 else self.vendorName)
            oprot.writeFieldEnd()
        if self.serialNumber is not None:
            oprot.writeFieldBegin('serialNumber', TType.STRING, 4)
            oprot.writeString(self.serialNumber.encode('utf-8') if sys.version_info[0] == 2 else self.serialNumber)
            oprot.writeFieldEnd()
        if self.sensorType is not None:
            oprot.writeFieldBegin('sensorType', TType.I32, 5)
            oprot.writeI32(self.sensorType)
            oprot.writeFieldEnd()
        if self.location is not None:
            oprot.writeFieldBegin('location', TType.STRING, 6)
            oprot.writeString(self.location.encode('utf-8') if sys.version_info[0] == 2 else self.location)
            oprot.writeFieldEnd()
        if self.componentPositionAndOrientation is not None:
            oprot.writeFieldBegin('componentPositionAndOrientation', TType.STRUCT, 7)
            self.componentPositionAndOrientation.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class EnvironmentalSensorData(object):
    """
    Attributes:
     - componentId
     - timeStamp: Milliseconds since Unix epoch
     - health
     - value
    """


    def __init__(self, componentId=None, timeStamp=None, health=None, value=None,):
        self.componentId = componentId
        self.timeStamp = timeStamp
        self.health = health
        self.value = value

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.componentId = UUID.ttypes.UUID()
                    self.componentId.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.timeStamp = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.health = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.DOUBLE:
                    self.value = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('EnvironmentalSensorData')
        if self.componentId is not None:
            oprot.writeFieldBegin('componentId', TType.STRUCT, 1)
            self.componentId.write(oprot)
            oprot.writeFieldEnd()
        if self.timeStamp is not None:
            oprot.writeFieldBegin('timeStamp', TType.I64, 2)
            oprot.writeI64(self.timeStamp)
            oprot.writeFieldEnd()
        if self.health is not None:
            oprot.writeFieldBegin('health', TType.I32, 3)
            oprot.writeI32(self.health)
            oprot.writeFieldEnd()
        if self.value is not None:
            oprot.writeFieldBegin('value', TType.DOUBLE, 4)
            oprot.writeDouble(self.value)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(EnvironmentalSensorDefinition)
EnvironmentalSensorDefinition.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'componentId', [UUID.ttypes.UUID, None], None, ),  # 1
    (2, TType.STRING, 'componentName', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'vendorName', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'serialNumber', 'UTF8', None, ),  # 4
    (5, TType.I32, 'sensorType', None, None, ),  # 5
    (6, TType.STRING, 'location', 'UTF8', None, ),  # 6
    (7, TType.STRUCT, 'componentPositionAndOrientation', [ComponentLocation.ttypes.GridPositionAndOrientation, None], None, ),  # 7
)
all_structs.append(EnvironmentalSensorData)
EnvironmentalSensorData.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'componentId', [UUID.ttypes.UUID, None], None, ),  # 1
    (2, TType.I64, 'timeStamp', None, None, ),  # 2
    (3, TType.I32, 'health', None, None, ),  # 3
    (4, TType.DOUBLE, 'value', None, None, ),  # 4
)
fix_spec(all_structs)
del all_structs
