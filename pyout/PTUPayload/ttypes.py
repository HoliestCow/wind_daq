#
# Autogenerated by Thrift Compiler (1.0.0-dev)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys
from ..GammaSensor.ttypes import *
from ..NeutronSensor.ttypes import *
from ..AlgorithmPayload.ttypes import *
from ..NavigationSensor.ttypes import *
from ..ContextSensor.ttypes import *
from ..EnvironmentalSensor.ttypes import *
from ..WINDMessage.ttypes import *
from ..Navigation.ttypes import *
from ..Health.ttypes import *
from ..Marker.ttypes import *
from ..UUID.ttypes import *

from thrift.transport import TTransport
all_structs = []


class RecordingType(object):
    Other = 0
    Calibration = 1
    Measurement = 2
    Background = 3
    Search = 4

    _VALUES_TO_NAMES = {
        0: "Other",
        1: "Calibration",
        2: "Measurement",
        3: "Background",
        4: "Search",
    }

    _NAMES_TO_VALUES = {
        "Other": 0,
        "Calibration": 1,
        "Measurement": 2,
        "Background": 3,
        "Search": 4,
    }


class UnitType(object):
    Wearable = 0
    Luggable = 1
    Portal = 2
    Stationary = 3
    Aerial = 4
    Vehicle = 5
    Source = 6
    Other = 7

    _VALUES_TO_NAMES = {
        0: "Wearable",
        1: "Luggable",
        2: "Portal",
        3: "Stationary",
        4: "Aerial",
        5: "Vehicle",
        6: "Source",
        7: "Other",
    }

    _NAMES_TO_VALUES = {
        "Wearable": 0,
        "Luggable": 1,
        "Portal": 2,
        "Stationary": 3,
        "Aerial": 4,
        "Vehicle": 5,
        "Source": 6,
        "Other": 7,
    }


class RecordingConfiguration(object):
    """
    Attributes:
     - unitId
     - recordingId
     - campaign
     - tag
     - description: OBSOLETE_FIELD
        5: string measurementNumber;
    *
     - location
     - fileName
     - recordingType
     - recordingDuration: Zero here implies no duration - this could be made optional?
     - POSIXStartTime
     - measurementNumber
    """


    def __init__(self, unitId=None, recordingId=None, campaign=None, tag=None, description=None, location=None, fileName=None, recordingType=None, recordingDuration=None, POSIXStartTime=None, measurementNumber=None,):
        self.unitId = unitId
        self.recordingId = recordingId
        self.campaign = campaign
        self.tag = tag
        self.description = description
        self.location = location
        self.fileName = fileName
        self.recordingType = recordingType
        self.recordingDuration = recordingDuration
        self.POSIXStartTime = POSIXStartTime
        self.measurementNumber = measurementNumber

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.unitId = UUID.ttypes.UUID()
                    self.unitId.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.recordingId = UUID.ttypes.UUID()
                    self.recordingId.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.campaign = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.tag = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.description = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.location = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.fileName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.I32:
                    self.recordingType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.I64:
                    self.recordingDuration = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.I64:
                    self.POSIXStartTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.I32:
                    self.measurementNumber = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('RecordingConfiguration')
        if self.unitId is not None:
            oprot.writeFieldBegin('unitId', TType.STRUCT, 1)
            self.unitId.write(oprot)
            oprot.writeFieldEnd()
        if self.recordingId is not None:
            oprot.writeFieldBegin('recordingId', TType.STRUCT, 2)
            self.recordingId.write(oprot)
            oprot.writeFieldEnd()
        if self.campaign is not None:
            oprot.writeFieldBegin('campaign', TType.STRING, 3)
            oprot.writeString(self.campaign.encode('utf-8') if sys.version_info[0] == 2 else self.campaign)
            oprot.writeFieldEnd()
        if self.tag is not None:
            oprot.writeFieldBegin('tag', TType.STRING, 4)
            oprot.writeString(self.tag.encode('utf-8') if sys.version_info[0] == 2 else self.tag)
            oprot.writeFieldEnd()
        if self.description is not None:
            oprot.writeFieldBegin('description', TType.STRING, 6)
            oprot.writeString(self.description.encode('utf-8') if sys.version_info[0] == 2 else self.description)
            oprot.writeFieldEnd()
        if self.location is not None:
            oprot.writeFieldBegin('location', TType.STRING, 7)
            oprot.writeString(self.location.encode('utf-8') if sys.version_info[0] == 2 else self.location)
            oprot.writeFieldEnd()
        if self.fileName is not None:
            oprot.writeFieldBegin('fileName', TType.STRING, 8)
            oprot.writeString(self.fileName.encode('utf-8') if sys.version_info[0] == 2 else self.fileName)
            oprot.writeFieldEnd()
        if self.recordingType is not None:
            oprot.writeFieldBegin('recordingType', TType.I32, 9)
            oprot.writeI32(self.recordingType)
            oprot.writeFieldEnd()
        if self.recordingDuration is not None:
            oprot.writeFieldBegin('recordingDuration', TType.I64, 10)
            oprot.writeI64(self.recordingDuration)
            oprot.writeFieldEnd()
        if self.POSIXStartTime is not None:
            oprot.writeFieldBegin('POSIXStartTime', TType.I64, 11)
            oprot.writeI64(self.POSIXStartTime)
            oprot.writeFieldEnd()
        if self.measurementNumber is not None:
            oprot.writeFieldBegin('measurementNumber', TType.I32, 12)
            oprot.writeI32(self.measurementNumber)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Status(object):
    """
    Attributes:
     - unitId
     - isRecording
     - recordingId: Zero indicates no prior recording,
    If recordingState is true AND there is a recordingId THEN this field
    is the current recording id
    If recordingState is false AND there is a recordingId, THEN this field
    is the previous recording id
     - hardDriveUsedPercent
     - batteryRemainingPercent
     - systemTime: OBSOLETE_FIELDS (Preserved here so we don't re-use the field ID)
    6: string systemTime
    7: optional double latitude; // See #6
    8: optional double longitude; // See #6
    9: optional double altitude; // See #6
    *
    """


    def __init__(self, unitId=None, isRecording=None, recordingId=None, hardDriveUsedPercent=None, batteryRemainingPercent=None, systemTime=None,):
        self.unitId = unitId
        self.isRecording = isRecording
        self.recordingId = recordingId
        self.hardDriveUsedPercent = hardDriveUsedPercent
        self.batteryRemainingPercent = batteryRemainingPercent
        self.systemTime = systemTime

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.unitId = UUID.ttypes.UUID()
                    self.unitId.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BOOL:
                    self.isRecording = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.recordingId = UUID.ttypes.UUID()
                    self.recordingId.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.DOUBLE:
                    self.hardDriveUsedPercent = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.DOUBLE:
                    self.batteryRemainingPercent = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.I64:
                    self.systemTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Status')
        if self.unitId is not None:
            oprot.writeFieldBegin('unitId', TType.STRUCT, 1)
            self.unitId.write(oprot)
            oprot.writeFieldEnd()
        if self.isRecording is not None:
            oprot.writeFieldBegin('isRecording', TType.BOOL, 2)
            oprot.writeBool(self.isRecording)
            oprot.writeFieldEnd()
        if self.recordingId is not None:
            oprot.writeFieldBegin('recordingId', TType.STRUCT, 3)
            self.recordingId.write(oprot)
            oprot.writeFieldEnd()
        if self.hardDriveUsedPercent is not None:
            oprot.writeFieldBegin('hardDriveUsedPercent', TType.DOUBLE, 4)
            oprot.writeDouble(self.hardDriveUsedPercent)
            oprot.writeFieldEnd()
        if self.batteryRemainingPercent is not None:
            oprot.writeFieldBegin('batteryRemainingPercent', TType.DOUBLE, 5)
            oprot.writeDouble(self.batteryRemainingPercent)
            oprot.writeFieldEnd()
        if self.systemTime is not None:
            oprot.writeFieldBegin('systemTime', TType.I64, 10)
            oprot.writeI64(self.systemTime)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class DataFilter(object):
    """
    Attributes:
     - componentIds: Empty list specifies that PTU MUST NOT send component data
     - includeMessages
     - includeWaypoints
     - includeBoundingBoxes
     - includeMarkers
    """


    def __init__(self, componentIds=None, includeMessages=True, includeWaypoints=True, includeBoundingBoxes=True, includeMarkers=True,):
        self.componentIds = componentIds
        self.includeMessages = includeMessages
        self.includeWaypoints = includeWaypoints
        self.includeBoundingBoxes = includeBoundingBoxes
        self.includeMarkers = includeMarkers

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.componentIds = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = UUID.ttypes.UUID()
                        _elem5.read(iprot)
                        self.componentIds.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BOOL:
                    self.includeMessages = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.includeWaypoints = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.BOOL:
                    self.includeBoundingBoxes = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.BOOL:
                    self.includeMarkers = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('DataFilter')
        if self.componentIds is not None:
            oprot.writeFieldBegin('componentIds', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.componentIds))
            for iter6 in self.componentIds:
                iter6.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.includeMessages is not None:
            oprot.writeFieldBegin('includeMessages', TType.BOOL, 2)
            oprot.writeBool(self.includeMessages)
            oprot.writeFieldEnd()
        if self.includeWaypoints is not None:
            oprot.writeFieldBegin('includeWaypoints', TType.BOOL, 3)
            oprot.writeBool(self.includeWaypoints)
            oprot.writeFieldEnd()
        if self.includeBoundingBoxes is not None:
            oprot.writeFieldBegin('includeBoundingBoxes', TType.BOOL, 4)
            oprot.writeBool(self.includeBoundingBoxes)
            oprot.writeFieldEnd()
        if self.includeMarkers is not None:
            oprot.writeFieldBegin('includeMarkers', TType.BOOL, 5)
            oprot.writeBool(self.includeMarkers)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class UnitDefinition(object):
    """
    Attributes:
     - unitId
     - unitName
     - softwareVersion
     - hardwareRevision
     - vendor
     - unitType
     - protocolVersion
    """


    def __init__(self, unitId=None, unitName=None, softwareVersion=None, hardwareRevision=None, vendor=None, unitType=None, protocolVersion="0.2.1",):
        self.unitId = unitId
        self.unitName = unitName
        self.softwareVersion = softwareVersion
        self.hardwareRevision = hardwareRevision
        self.vendor = vendor
        self.unitType = unitType
        self.protocolVersion = protocolVersion

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.unitId = UUID.ttypes.UUID()
                    self.unitId.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.unitName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.softwareVersion = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.hardwareRevision = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.vendor = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.unitType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.protocolVersion = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('UnitDefinition')
        if self.unitId is not None:
            oprot.writeFieldBegin('unitId', TType.STRUCT, 1)
            self.unitId.write(oprot)
            oprot.writeFieldEnd()
        if self.unitName is not None:
            oprot.writeFieldBegin('unitName', TType.STRING, 2)
            oprot.writeString(self.unitName.encode('utf-8') if sys.version_info[0] == 2 else self.unitName)
            oprot.writeFieldEnd()
        if self.softwareVersion is not None:
            oprot.writeFieldBegin('softwareVersion', TType.STRING, 3)
            oprot.writeString(self.softwareVersion.encode('utf-8') if sys.version_info[0] == 2 else self.softwareVersion)
            oprot.writeFieldEnd()
        if self.hardwareRevision is not None:
            oprot.writeFieldBegin('hardwareRevision', TType.STRING, 5)
            oprot.writeString(self.hardwareRevision.encode('utf-8') if sys.version_info[0] == 2 else self.hardwareRevision)
            oprot.writeFieldEnd()
        if self.vendor is not None:
            oprot.writeFieldBegin('vendor', TType.STRING, 6)
            oprot.writeString(self.vendor.encode('utf-8') if sys.version_info[0] == 2 else self.vendor)
            oprot.writeFieldEnd()
        if self.unitType is not None:
            oprot.writeFieldBegin('unitType', TType.I32, 7)
            oprot.writeI32(self.unitType)
            oprot.writeFieldEnd()
        if self.protocolVersion is not None:
            oprot.writeFieldBegin('protocolVersion', TType.STRING, 8)
            oprot.writeString(self.protocolVersion.encode('utf-8') if sys.version_info[0] == 2 else self.protocolVersion)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class SystemConfiguration(object):
    """
    Attributes:
     - unitId
     - gammaSpectrumConfigurations
     - gammaListConfigurations
     - gammaGrossCountConfigurations
     - gammaDoseConfigurations
     - neutronListConfigurations
     - neutronSpectrumConfigurations
     - neutronGrossCountConfigurations
     - contextVideoConfigurations
     - contextPointCloudConfigurations
     - contextVoxelConfigurations
     - contextMeshConfigurations
     - algorithmConfigurations
    """


    def __init__(self, unitId=None, gammaSpectrumConfigurations=None, gammaListConfigurations=None, gammaGrossCountConfigurations=None, gammaDoseConfigurations=None, neutronListConfigurations=None, neutronSpectrumConfigurations=None, neutronGrossCountConfigurations=None, contextVideoConfigurations=None, contextPointCloudConfigurations=None, contextVoxelConfigurations=None, contextMeshConfigurations=None, algorithmConfigurations=None,):
        self.unitId = unitId
        self.gammaSpectrumConfigurations = gammaSpectrumConfigurations
        self.gammaListConfigurations = gammaListConfigurations
        self.gammaGrossCountConfigurations = gammaGrossCountConfigurations
        self.gammaDoseConfigurations = gammaDoseConfigurations
        self.neutronListConfigurations = neutronListConfigurations
        self.neutronSpectrumConfigurations = neutronSpectrumConfigurations
        self.neutronGrossCountConfigurations = neutronGrossCountConfigurations
        self.contextVideoConfigurations = contextVideoConfigurations
        self.contextPointCloudConfigurations = contextPointCloudConfigurations
        self.contextVoxelConfigurations = contextVoxelConfigurations
        self.contextMeshConfigurations = contextMeshConfigurations
        self.algorithmConfigurations = algorithmConfigurations

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.unitId = UUID.ttypes.UUID()
                    self.unitId.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.gammaSpectrumConfigurations = []
                    (_etype10, _size7) = iprot.readListBegin()
                    for _i11 in range(_size7):
                        _elem12 = GammaSensor.ttypes.GammaListAndSpectrumConfiguration()
                        _elem12.read(iprot)
                        self.gammaSpectrumConfigurations.append(_elem12)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.gammaListConfigurations = []
                    (_etype16, _size13) = iprot.readListBegin()
                    for _i17 in range(_size13):
                        _elem18 = GammaSensor.ttypes.GammaListAndSpectrumConfiguration()
                        _elem18.read(iprot)
                        self.gammaListConfigurations.append(_elem18)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.gammaGrossCountConfigurations = []
                    (_etype22, _size19) = iprot.readListBegin()
                    for _i23 in range(_size19):
                        _elem24 = GammaSensor.ttypes.GammaGrossCountConfiguration()
                        _elem24.read(iprot)
                        self.gammaGrossCountConfigurations.append(_elem24)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.LIST:
                    self.gammaDoseConfigurations = []
                    (_etype28, _size25) = iprot.readListBegin()
                    for _i29 in range(_size25):
                        _elem30 = GammaSensor.ttypes.GammaDoseConfiguration()
                        _elem30.read(iprot)
                        self.gammaDoseConfigurations.append(_elem30)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.LIST:
                    self.neutronListConfigurations = []
                    (_etype34, _size31) = iprot.readListBegin()
                    for _i35 in range(_size31):
                        _elem36 = NeutronSensor.ttypes.NeutronConfiguration()
                        _elem36.read(iprot)
                        self.neutronListConfigurations.append(_elem36)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.LIST:
                    self.neutronSpectrumConfigurations = []
                    (_etype40, _size37) = iprot.readListBegin()
                    for _i41 in range(_size37):
                        _elem42 = NeutronSensor.ttypes.NeutronConfiguration()
                        _elem42.read(iprot)
                        self.neutronSpectrumConfigurations.append(_elem42)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.LIST:
                    self.neutronGrossCountConfigurations = []
                    (_etype46, _size43) = iprot.readListBegin()
                    for _i47 in range(_size43):
                        _elem48 = NeutronSensor.ttypes.NeutronConfiguration()
                        _elem48.read(iprot)
                        self.neutronGrossCountConfigurations.append(_elem48)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.LIST:
                    self.contextVideoConfigurations = []
                    (_etype52, _size49) = iprot.readListBegin()
                    for _i53 in range(_size49):
                        _elem54 = ContextSensor.ttypes.ContextVideoConfiguration()
                        _elem54.read(iprot)
                        self.contextVideoConfigurations.append(_elem54)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.LIST:
                    self.contextPointCloudConfigurations = []
                    (_etype58, _size55) = iprot.readListBegin()
                    for _i59 in range(_size55):
                        _elem60 = ContextSensor.ttypes.Context3DConfiguration()
                        _elem60.read(iprot)
                        self.contextPointCloudConfigurations.append(_elem60)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.LIST:
                    self.contextVoxelConfigurations = []
                    (_etype64, _size61) = iprot.readListBegin()
                    for _i65 in range(_size61):
                        _elem66 = ContextSensor.ttypes.Context3DConfiguration()
                        _elem66.read(iprot)
                        self.contextVoxelConfigurations.append(_elem66)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.LIST:
                    self.contextMeshConfigurations = []
                    (_etype70, _size67) = iprot.readListBegin()
                    for _i71 in range(_size67):
                        _elem72 = ContextSensor.ttypes.Context3DConfiguration()
                        _elem72.read(iprot)
                        self.contextMeshConfigurations.append(_elem72)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.LIST:
                    self.algorithmConfigurations = []
                    (_etype76, _size73) = iprot.readListBegin()
                    for _i77 in range(_size73):
                        _elem78 = AlgorithmPayload.ttypes.AlgorithmConfiguration()
                        _elem78.read(iprot)
                        self.algorithmConfigurations.append(_elem78)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('SystemConfiguration')
        if self.unitId is not None:
            oprot.writeFieldBegin('unitId', TType.STRUCT, 1)
            self.unitId.write(oprot)
            oprot.writeFieldEnd()
        if self.gammaSpectrumConfigurations is not None:
            oprot.writeFieldBegin('gammaSpectrumConfigurations', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.gammaSpectrumConfigurations))
            for iter79 in self.gammaSpectrumConfigurations:
                iter79.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.gammaListConfigurations is not None:
            oprot.writeFieldBegin('gammaListConfigurations', TType.LIST, 3)
            oprot.writeListBegin(TType.STRUCT, len(self.gammaListConfigurations))
            for iter80 in self.gammaListConfigurations:
                iter80.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.gammaGrossCountConfigurations is not None:
            oprot.writeFieldBegin('gammaGrossCountConfigurations', TType.LIST, 4)
            oprot.writeListBegin(TType.STRUCT, len(self.gammaGrossCountConfigurations))
            for iter81 in self.gammaGrossCountConfigurations:
                iter81.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.gammaDoseConfigurations is not None:
            oprot.writeFieldBegin('gammaDoseConfigurations', TType.LIST, 5)
            oprot.writeListBegin(TType.STRUCT, len(self.gammaDoseConfigurations))
            for iter82 in self.gammaDoseConfigurations:
                iter82.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.neutronListConfigurations is not None:
            oprot.writeFieldBegin('neutronListConfigurations', TType.LIST, 6)
            oprot.writeListBegin(TType.STRUCT, len(self.neutronListConfigurations))
            for iter83 in self.neutronListConfigurations:
                iter83.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.neutronSpectrumConfigurations is not None:
            oprot.writeFieldBegin('neutronSpectrumConfigurations', TType.LIST, 7)
            oprot.writeListBegin(TType.STRUCT, len(self.neutronSpectrumConfigurations))
            for iter84 in self.neutronSpectrumConfigurations:
                iter84.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.neutronGrossCountConfigurations is not None:
            oprot.writeFieldBegin('neutronGrossCountConfigurations', TType.LIST, 8)
            oprot.writeListBegin(TType.STRUCT, len(self.neutronGrossCountConfigurations))
            for iter85 in self.neutronGrossCountConfigurations:
                iter85.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.contextVideoConfigurations is not None:
            oprot.writeFieldBegin('contextVideoConfigurations', TType.LIST, 9)
            oprot.writeListBegin(TType.STRUCT, len(self.contextVideoConfigurations))
            for iter86 in self.contextVideoConfigurations:
                iter86.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.contextPointCloudConfigurations is not None:
            oprot.writeFieldBegin('contextPointCloudConfigurations', TType.LIST, 10)
            oprot.writeListBegin(TType.STRUCT, len(self.contextPointCloudConfigurations))
            for iter87 in self.contextPointCloudConfigurations:
                iter87.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.contextVoxelConfigurations is not None:
            oprot.writeFieldBegin('contextVoxelConfigurations', TType.LIST, 11)
            oprot.writeListBegin(TType.STRUCT, len(self.contextVoxelConfigurations))
            for iter88 in self.contextVoxelConfigurations:
                iter88.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.contextMeshConfigurations is not None:
            oprot.writeFieldBegin('contextMeshConfigurations', TType.LIST, 12)
            oprot.writeListBegin(TType.STRUCT, len(self.contextMeshConfigurations))
            for iter89 in self.contextMeshConfigurations:
                iter89.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.algorithmConfigurations is not None:
            oprot.writeFieldBegin('algorithmConfigurations', TType.LIST, 13)
            oprot.writeListBegin(TType.STRUCT, len(self.algorithmConfigurations))
            for iter90 in self.algorithmConfigurations:
                iter90.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class SystemDefinition(object):
    """
    Attributes:
     - gammaSpectrumDefinitions
     - gammaListDefinitions
     - gammaGrossCountDefinitions
     - gammaDoseDefinitions
     - neutronListDefinitions
     - neutronSpectrumDefinitions
     - neutronGrossCountDefinitions
     - environmentalDefinitions
     - navigationSensorDefinitions
     - contextVideoDefinitions
     - contextPointCloudDefinitions
     - contextVoxelDefinitions
     - contextMeshDefinitions
     - algorithmDefinitions
     - apiVersion
    """


    def __init__(self, gammaSpectrumDefinitions=None, gammaListDefinitions=None, gammaGrossCountDefinitions=None, gammaDoseDefinitions=None, neutronListDefinitions=None, neutronSpectrumDefinitions=None, neutronGrossCountDefinitions=None, environmentalDefinitions=None, navigationSensorDefinitions=None, contextVideoDefinitions=None, contextPointCloudDefinitions=None, contextVoxelDefinitions=None, contextMeshDefinitions=None, algorithmDefinitions=None, apiVersion="0.2.1",):
        self.gammaSpectrumDefinitions = gammaSpectrumDefinitions
        self.gammaListDefinitions = gammaListDefinitions
        self.gammaGrossCountDefinitions = gammaGrossCountDefinitions
        self.gammaDoseDefinitions = gammaDoseDefinitions
        self.neutronListDefinitions = neutronListDefinitions
        self.neutronSpectrumDefinitions = neutronSpectrumDefinitions
        self.neutronGrossCountDefinitions = neutronGrossCountDefinitions
        self.environmentalDefinitions = environmentalDefinitions
        self.navigationSensorDefinitions = navigationSensorDefinitions
        self.contextVideoDefinitions = contextVideoDefinitions
        self.contextPointCloudDefinitions = contextPointCloudDefinitions
        self.contextVoxelDefinitions = contextVoxelDefinitions
        self.contextMeshDefinitions = contextMeshDefinitions
        self.algorithmDefinitions = algorithmDefinitions
        self.apiVersion = apiVersion

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.gammaSpectrumDefinitions = []
                    (_etype94, _size91) = iprot.readListBegin()
                    for _i95 in range(_size91):
                        _elem96 = GammaSensor.ttypes.GammaListAndSpectrumDefinition()
                        _elem96.read(iprot)
                        self.gammaSpectrumDefinitions.append(_elem96)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.gammaListDefinitions = []
                    (_etype100, _size97) = iprot.readListBegin()
                    for _i101 in range(_size97):
                        _elem102 = GammaSensor.ttypes.GammaListAndSpectrumDefinition()
                        _elem102.read(iprot)
                        self.gammaListDefinitions.append(_elem102)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.gammaGrossCountDefinitions = []
                    (_etype106, _size103) = iprot.readListBegin()
                    for _i107 in range(_size103):
                        _elem108 = GammaSensor.ttypes.GammaGrossCountDefinition()
                        _elem108.read(iprot)
                        self.gammaGrossCountDefinitions.append(_elem108)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.gammaDoseDefinitions = []
                    (_etype112, _size109) = iprot.readListBegin()
                    for _i113 in range(_size109):
                        _elem114 = GammaSensor.ttypes.GammaDoseDefinition()
                        _elem114.read(iprot)
                        self.gammaDoseDefinitions.append(_elem114)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.LIST:
                    self.neutronListDefinitions = []
                    (_etype118, _size115) = iprot.readListBegin()
                    for _i119 in range(_size115):
                        _elem120 = NeutronSensor.ttypes.NeutronListDefinition()
                        _elem120.read(iprot)
                        self.neutronListDefinitions.append(_elem120)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.LIST:
                    self.neutronSpectrumDefinitions = []
                    (_etype124, _size121) = iprot.readListBegin()
                    for _i125 in range(_size121):
                        _elem126 = NeutronSensor.ttypes.NeutronSpectrumDefinition()
                        _elem126.read(iprot)
                        self.neutronSpectrumDefinitions.append(_elem126)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.LIST:
                    self.neutronGrossCountDefinitions = []
                    (_etype130, _size127) = iprot.readListBegin()
                    for _i131 in range(_size127):
                        _elem132 = NeutronSensor.ttypes.NeutronGrossCountDefinition()
                        _elem132.read(iprot)
                        self.neutronGrossCountDefinitions.append(_elem132)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.LIST:
                    self.environmentalDefinitions = []
                    (_etype136, _size133) = iprot.readListBegin()
                    for _i137 in range(_size133):
                        _elem138 = EnvironmentalSensor.ttypes.EnvironmentalSensorDefinition()
                        _elem138.read(iprot)
                        self.environmentalDefinitions.append(_elem138)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.LIST:
                    self.navigationSensorDefinitions = []
                    (_etype142, _size139) = iprot.readListBegin()
                    for _i143 in range(_size139):
                        _elem144 = NavigationSensor.ttypes.NavigationSensorDefinition()
                        _elem144.read(iprot)
                        self.navigationSensorDefinitions.append(_elem144)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.LIST:
                    self.contextVideoDefinitions = []
                    (_etype148, _size145) = iprot.readListBegin()
                    for _i149 in range(_size145):
                        _elem150 = ContextSensor.ttypes.ContextVideoDefinition()
                        _elem150.read(iprot)
                        self.contextVideoDefinitions.append(_elem150)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.LIST:
                    self.contextPointCloudDefinitions = []
                    (_etype154, _size151) = iprot.readListBegin()
                    for _i155 in range(_size151):
                        _elem156 = ContextSensor.ttypes.Context3DDefinition()
                        _elem156.read(iprot)
                        self.contextPointCloudDefinitions.append(_elem156)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.LIST:
                    self.contextVoxelDefinitions = []
                    (_etype160, _size157) = iprot.readListBegin()
                    for _i161 in range(_size157):
                        _elem162 = ContextSensor.ttypes.Context3DDefinition()
                        _elem162.read(iprot)
                        self.contextVoxelDefinitions.append(_elem162)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.LIST:
                    self.contextMeshDefinitions = []
                    (_etype166, _size163) = iprot.readListBegin()
                    for _i167 in range(_size163):
                        _elem168 = ContextSensor.ttypes.Context3DDefinition()
                        _elem168.read(iprot)
                        self.contextMeshDefinitions.append(_elem168)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.LIST:
                    self.algorithmDefinitions = []
                    (_etype172, _size169) = iprot.readListBegin()
                    for _i173 in range(_size169):
                        _elem174 = AlgorithmPayload.ttypes.AlgorithmDefinition()
                        _elem174.read(iprot)
                        self.algorithmDefinitions.append(_elem174)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.STRING:
                    self.apiVersion = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('SystemDefinition')
        if self.gammaSpectrumDefinitions is not None:
            oprot.writeFieldBegin('gammaSpectrumDefinitions', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.gammaSpectrumDefinitions))
            for iter175 in self.gammaSpectrumDefinitions:
                iter175.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.gammaListDefinitions is not None:
            oprot.writeFieldBegin('gammaListDefinitions', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.gammaListDefinitions))
            for iter176 in self.gammaListDefinitions:
                iter176.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.gammaGrossCountDefinitions is not None:
            oprot.writeFieldBegin('gammaGrossCountDefinitions', TType.LIST, 3)
            oprot.writeListBegin(TType.STRUCT, len(self.gammaGrossCountDefinitions))
            for iter177 in self.gammaGrossCountDefinitions:
                iter177.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.gammaDoseDefinitions is not None:
            oprot.writeFieldBegin('gammaDoseDefinitions', TType.LIST, 4)
            oprot.writeListBegin(TType.STRUCT, len(self.gammaDoseDefinitions))
            for iter178 in self.gammaDoseDefinitions:
                iter178.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.neutronListDefinitions is not None:
            oprot.writeFieldBegin('neutronListDefinitions', TType.LIST, 5)
            oprot.writeListBegin(TType.STRUCT, len(self.neutronListDefinitions))
            for iter179 in self.neutronListDefinitions:
                iter179.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.neutronSpectrumDefinitions is not None:
            oprot.writeFieldBegin('neutronSpectrumDefinitions', TType.LIST, 6)
            oprot.writeListBegin(TType.STRUCT, len(self.neutronSpectrumDefinitions))
            for iter180 in self.neutronSpectrumDefinitions:
                iter180.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.neutronGrossCountDefinitions is not None:
            oprot.writeFieldBegin('neutronGrossCountDefinitions', TType.LIST, 7)
            oprot.writeListBegin(TType.STRUCT, len(self.neutronGrossCountDefinitions))
            for iter181 in self.neutronGrossCountDefinitions:
                iter181.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.environmentalDefinitions is not None:
            oprot.writeFieldBegin('environmentalDefinitions', TType.LIST, 8)
            oprot.writeListBegin(TType.STRUCT, len(self.environmentalDefinitions))
            for iter182 in self.environmentalDefinitions:
                iter182.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.navigationSensorDefinitions is not None:
            oprot.writeFieldBegin('navigationSensorDefinitions', TType.LIST, 9)
            oprot.writeListBegin(TType.STRUCT, len(self.navigationSensorDefinitions))
            for iter183 in self.navigationSensorDefinitions:
                iter183.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.contextVideoDefinitions is not None:
            oprot.writeFieldBegin('contextVideoDefinitions', TType.LIST, 10)
            oprot.writeListBegin(TType.STRUCT, len(self.contextVideoDefinitions))
            for iter184 in self.contextVideoDefinitions:
                iter184.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.contextPointCloudDefinitions is not None:
            oprot.writeFieldBegin('contextPointCloudDefinitions', TType.LIST, 11)
            oprot.writeListBegin(TType.STRUCT, len(self.contextPointCloudDefinitions))
            for iter185 in self.contextPointCloudDefinitions:
                iter185.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.contextVoxelDefinitions is not None:
            oprot.writeFieldBegin('contextVoxelDefinitions', TType.LIST, 12)
            oprot.writeListBegin(TType.STRUCT, len(self.contextVoxelDefinitions))
            for iter186 in self.contextVoxelDefinitions:
                iter186.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.contextMeshDefinitions is not None:
            oprot.writeFieldBegin('contextMeshDefinitions', TType.LIST, 13)
            oprot.writeListBegin(TType.STRUCT, len(self.contextMeshDefinitions))
            for iter187 in self.contextMeshDefinitions:
                iter187.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.algorithmDefinitions is not None:
            oprot.writeFieldBegin('algorithmDefinitions', TType.LIST, 14)
            oprot.writeListBegin(TType.STRUCT, len(self.algorithmDefinitions))
            for iter188 in self.algorithmDefinitions:
                iter188.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.apiVersion is not None:
            oprot.writeFieldBegin('apiVersion', TType.STRING, 15)
            oprot.writeString(self.apiVersion.encode('utf-8') if sys.version_info[0] == 2 else self.apiVersion)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class DataPayload(object):
    """
    Attributes:
     - unitId
     - timeStamp: Milliseconds since Unix epoch
     - systemHealth
     - isEOF: Sent in *emtpy* message with this set to true when the data stream is over for a recording
     - recordingConfig: Only sent with very first message or if the configuration changes (i.e. duration changes)
     - gammaSpectrumData: Gamma data associated with this timestamp
     - gammaListData
     - gammaGrossCountData
     - gammaDoseData
     - neutronListData: Neutron data associated with this timestamp
     - neutronSpectrumData
     - neutronGrossCountData
     - environmentalData: Environmental data associated with this timestamp
     - navigationData: Navigation data associated with this timestamp
     - videoData: Context data associated with this timestamp
     - pointCloudData
     - voxelData
     - meshData
     - messages: Messages associated with this timestamp
     - waypoints: Waypoints associated with this timestamp
     - boundingBoxes: Bounding boxes associated with this timestamp
     - markers: Markers associated with this timestamp
     - algorithmData
    """


    def __init__(self, unitId=None, timeStamp=None, systemHealth=None, isEOF=False, recordingConfig=None, gammaSpectrumData=None, gammaListData=None, gammaGrossCountData=None, gammaDoseData=None, neutronListData=None, neutronSpectrumData=None, neutronGrossCountData=None, environmentalData=None, navigationData=None, videoData=None, pointCloudData=None, voxelData=None, meshData=None, messages=None, waypoints=None, boundingBoxes=None, markers=None, algorithmData=None,):
        self.unitId = unitId
        self.timeStamp = timeStamp
        self.systemHealth = systemHealth
        self.isEOF = isEOF
        self.recordingConfig = recordingConfig
        self.gammaSpectrumData = gammaSpectrumData
        self.gammaListData = gammaListData
        self.gammaGrossCountData = gammaGrossCountData
        self.gammaDoseData = gammaDoseData
        self.neutronListData = neutronListData
        self.neutronSpectrumData = neutronSpectrumData
        self.neutronGrossCountData = neutronGrossCountData
        self.environmentalData = environmentalData
        self.navigationData = navigationData
        self.videoData = videoData
        self.pointCloudData = pointCloudData
        self.voxelData = voxelData
        self.meshData = meshData
        self.messages = messages
        self.waypoints = waypoints
        self.boundingBoxes = boundingBoxes
        self.markers = markers
        self.algorithmData = algorithmData

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.unitId = UUID.ttypes.UUID()
                    self.unitId.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.timeStamp = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.systemHealth = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.BOOL:
                    self.isEOF = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.recordingConfig = RecordingConfiguration()
                    self.recordingConfig.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.LIST:
                    self.gammaSpectrumData = []
                    (_etype192, _size189) = iprot.readListBegin()
                    for _i193 in range(_size189):
                        _elem194 = GammaSensor.ttypes.GammaSpectrumData()
                        _elem194.read(iprot)
                        self.gammaSpectrumData.append(_elem194)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.LIST:
                    self.gammaListData = []
                    (_etype198, _size195) = iprot.readListBegin()
                    for _i199 in range(_size195):
                        _elem200 = GammaSensor.ttypes.GammaListData()
                        _elem200.read(iprot)
                        self.gammaListData.append(_elem200)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.LIST:
                    self.gammaGrossCountData = []
                    (_etype204, _size201) = iprot.readListBegin()
                    for _i205 in range(_size201):
                        _elem206 = GammaSensor.ttypes.GammaGrossCountData()
                        _elem206.read(iprot)
                        self.gammaGrossCountData.append(_elem206)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.LIST:
                    self.gammaDoseData = []
                    (_etype210, _size207) = iprot.readListBegin()
                    for _i211 in range(_size207):
                        _elem212 = GammaSensor.ttypes.GammaDoseData()
                        _elem212.read(iprot)
                        self.gammaDoseData.append(_elem212)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.LIST:
                    self.neutronListData = []
                    (_etype216, _size213) = iprot.readListBegin()
                    for _i217 in range(_size213):
                        _elem218 = NeutronSensor.ttypes.NeutronListData()
                        _elem218.read(iprot)
                        self.neutronListData.append(_elem218)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.LIST:
                    self.neutronSpectrumData = []
                    (_etype222, _size219) = iprot.readListBegin()
                    for _i223 in range(_size219):
                        _elem224 = NeutronSensor.ttypes.NeutronSpectrumData()
                        _elem224.read(iprot)
                        self.neutronSpectrumData.append(_elem224)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.LIST:
                    self.neutronGrossCountData = []
                    (_etype228, _size225) = iprot.readListBegin()
                    for _i229 in range(_size225):
                        _elem230 = NeutronSensor.ttypes.NeutronGrossCountData()
                        _elem230.read(iprot)
                        self.neutronGrossCountData.append(_elem230)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.LIST:
                    self.environmentalData = []
                    (_etype234, _size231) = iprot.readListBegin()
                    for _i235 in range(_size231):
                        _elem236 = EnvironmentalSensor.ttypes.EnvironmentalSensorData()
                        _elem236.read(iprot)
                        self.environmentalData.append(_elem236)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.LIST:
                    self.navigationData = []
                    (_etype240, _size237) = iprot.readListBegin()
                    for _i241 in range(_size237):
                        _elem242 = NavigationSensor.ttypes.NavigationSensorData()
                        _elem242.read(iprot)
                        self.navigationData.append(_elem242)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.LIST:
                    self.videoData = []
                    (_etype246, _size243) = iprot.readListBegin()
                    for _i247 in range(_size243):
                        _elem248 = ContextSensor.ttypes.ContextVideoData()
                        _elem248.read(iprot)
                        self.videoData.append(_elem248)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.LIST:
                    self.pointCloudData = []
                    (_etype252, _size249) = iprot.readListBegin()
                    for _i253 in range(_size249):
                        _elem254 = ContextSensor.ttypes.ContextPointCloudData()
                        _elem254.read(iprot)
                        self.pointCloudData.append(_elem254)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 17:
                if ftype == TType.LIST:
                    self.voxelData = []
                    (_etype258, _size255) = iprot.readListBegin()
                    for _i259 in range(_size255):
                        _elem260 = ContextSensor.ttypes.ContextVoxelData()
                        _elem260.read(iprot)
                        self.voxelData.append(_elem260)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 18:
                if ftype == TType.LIST:
                    self.meshData = []
                    (_etype264, _size261) = iprot.readListBegin()
                    for _i265 in range(_size261):
                        _elem266 = ContextSensor.ttypes.ContextMeshData()
                        _elem266.read(iprot)
                        self.meshData.append(_elem266)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 19:
                if ftype == TType.LIST:
                    self.messages = []
                    (_etype270, _size267) = iprot.readListBegin()
                    for _i271 in range(_size267):
                        _elem272 = WINDMessage.ttypes.Message()
                        _elem272.read(iprot)
                        self.messages.append(_elem272)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 20:
                if ftype == TType.LIST:
                    self.waypoints = []
                    (_etype276, _size273) = iprot.readListBegin()
                    for _i277 in range(_size273):
                        _elem278 = Navigation.ttypes.Waypoint()
                        _elem278.read(iprot)
                        self.waypoints.append(_elem278)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 21:
                if ftype == TType.LIST:
                    self.boundingBoxes = []
                    (_etype282, _size279) = iprot.readListBegin()
                    for _i283 in range(_size279):
                        _elem284 = Navigation.ttypes.BoundingBox()
                        _elem284.read(iprot)
                        self.boundingBoxes.append(_elem284)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 22:
                if ftype == TType.LIST:
                    self.markers = []
                    (_etype288, _size285) = iprot.readListBegin()
                    for _i289 in range(_size285):
                        _elem290 = Marker.ttypes.Marker()
                        _elem290.read(iprot)
                        self.markers.append(_elem290)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 23:
                if ftype == TType.LIST:
                    self.algorithmData = []
                    (_etype294, _size291) = iprot.readListBegin()
                    for _i295 in range(_size291):
                        _elem296 = AlgorithmPayload.ttypes.AlgorithmData()
                        _elem296.read(iprot)
                        self.algorithmData.append(_elem296)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('DataPayload')
        if self.unitId is not None:
            oprot.writeFieldBegin('unitId', TType.STRUCT, 1)
            self.unitId.write(oprot)
            oprot.writeFieldEnd()
        if self.timeStamp is not None:
            oprot.writeFieldBegin('timeStamp', TType.I64, 2)
            oprot.writeI64(self.timeStamp)
            oprot.writeFieldEnd()
        if self.systemHealth is not None:
            oprot.writeFieldBegin('systemHealth', TType.I32, 3)
            oprot.writeI32(self.systemHealth)
            oprot.writeFieldEnd()
        if self.isEOF is not None:
            oprot.writeFieldBegin('isEOF', TType.BOOL, 4)
            oprot.writeBool(self.isEOF)
            oprot.writeFieldEnd()
        if self.recordingConfig is not None:
            oprot.writeFieldBegin('recordingConfig', TType.STRUCT, 5)
            self.recordingConfig.write(oprot)
            oprot.writeFieldEnd()
        if self.gammaSpectrumData is not None:
            oprot.writeFieldBegin('gammaSpectrumData', TType.LIST, 6)
            oprot.writeListBegin(TType.STRUCT, len(self.gammaSpectrumData))
            for iter297 in self.gammaSpectrumData:
                iter297.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.gammaListData is not None:
            oprot.writeFieldBegin('gammaListData', TType.LIST, 7)
            oprot.writeListBegin(TType.STRUCT, len(self.gammaListData))
            for iter298 in self.gammaListData:
                iter298.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.gammaGrossCountData is not None:
            oprot.writeFieldBegin('gammaGrossCountData', TType.LIST, 8)
            oprot.writeListBegin(TType.STRUCT, len(self.gammaGrossCountData))
            for iter299 in self.gammaGrossCountData:
                iter299.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.gammaDoseData is not None:
            oprot.writeFieldBegin('gammaDoseData', TType.LIST, 9)
            oprot.writeListBegin(TType.STRUCT, len(self.gammaDoseData))
            for iter300 in self.gammaDoseData:
                iter300.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.neutronListData is not None:
            oprot.writeFieldBegin('neutronListData', TType.LIST, 10)
            oprot.writeListBegin(TType.STRUCT, len(self.neutronListData))
            for iter301 in self.neutronListData:
                iter301.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.neutronSpectrumData is not None:
            oprot.writeFieldBegin('neutronSpectrumData', TType.LIST, 11)
            oprot.writeListBegin(TType.STRUCT, len(self.neutronSpectrumData))
            for iter302 in self.neutronSpectrumData:
                iter302.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.neutronGrossCountData is not None:
            oprot.writeFieldBegin('neutronGrossCountData', TType.LIST, 12)
            oprot.writeListBegin(TType.STRUCT, len(self.neutronGrossCountData))
            for iter303 in self.neutronGrossCountData:
                iter303.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.environmentalData is not None:
            oprot.writeFieldBegin('environmentalData', TType.LIST, 13)
            oprot.writeListBegin(TType.STRUCT, len(self.environmentalData))
            for iter304 in self.environmentalData:
                iter304.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.navigationData is not None:
            oprot.writeFieldBegin('navigationData', TType.LIST, 14)
            oprot.writeListBegin(TType.STRUCT, len(self.navigationData))
            for iter305 in self.navigationData:
                iter305.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.videoData is not None:
            oprot.writeFieldBegin('videoData', TType.LIST, 15)
            oprot.writeListBegin(TType.STRUCT, len(self.videoData))
            for iter306 in self.videoData:
                iter306.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.pointCloudData is not None:
            oprot.writeFieldBegin('pointCloudData', TType.LIST, 16)
            oprot.writeListBegin(TType.STRUCT, len(self.pointCloudData))
            for iter307 in self.pointCloudData:
                iter307.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.voxelData is not None:
            oprot.writeFieldBegin('voxelData', TType.LIST, 17)
            oprot.writeListBegin(TType.STRUCT, len(self.voxelData))
            for iter308 in self.voxelData:
                iter308.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.meshData is not None:
            oprot.writeFieldBegin('meshData', TType.LIST, 18)
            oprot.writeListBegin(TType.STRUCT, len(self.meshData))
            for iter309 in self.meshData:
                iter309.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.messages is not None:
            oprot.writeFieldBegin('messages', TType.LIST, 19)
            oprot.writeListBegin(TType.STRUCT, len(self.messages))
            for iter310 in self.messages:
                iter310.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.waypoints is not None:
            oprot.writeFieldBegin('waypoints', TType.LIST, 20)
            oprot.writeListBegin(TType.STRUCT, len(self.waypoints))
            for iter311 in self.waypoints:
                iter311.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.boundingBoxes is not None:
            oprot.writeFieldBegin('boundingBoxes', TType.LIST, 21)
            oprot.writeListBegin(TType.STRUCT, len(self.boundingBoxes))
            for iter312 in self.boundingBoxes:
                iter312.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.markers is not None:
            oprot.writeFieldBegin('markers', TType.LIST, 22)
            oprot.writeListBegin(TType.STRUCT, len(self.markers))
            for iter313 in self.markers:
                iter313.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.algorithmData is not None:
            oprot.writeFieldBegin('algorithmData', TType.LIST, 23)
            oprot.writeListBegin(TType.STRUCT, len(self.algorithmData))
            for iter314 in self.algorithmData:
                iter314.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(RecordingConfiguration)
RecordingConfiguration.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'unitId', [UUID.ttypes.UUID, None], None, ),  # 1
    (2, TType.STRUCT, 'recordingId', [UUID.ttypes.UUID, None], None, ),  # 2
    (3, TType.STRING, 'campaign', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'tag', 'UTF8', None, ),  # 4
    None,  # 5
    (6, TType.STRING, 'description', 'UTF8', None, ),  # 6
    (7, TType.STRING, 'location', 'UTF8', None, ),  # 7
    (8, TType.STRING, 'fileName', 'UTF8', None, ),  # 8
    (9, TType.I32, 'recordingType', None, None, ),  # 9
    (10, TType.I64, 'recordingDuration', None, None, ),  # 10
    (11, TType.I64, 'POSIXStartTime', None, None, ),  # 11
    (12, TType.I32, 'measurementNumber', None, None, ),  # 12
)
all_structs.append(Status)
Status.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'unitId', [UUID.ttypes.UUID, None], None, ),  # 1
    (2, TType.BOOL, 'isRecording', None, None, ),  # 2
    (3, TType.STRUCT, 'recordingId', [UUID.ttypes.UUID, None], None, ),  # 3
    (4, TType.DOUBLE, 'hardDriveUsedPercent', None, None, ),  # 4
    (5, TType.DOUBLE, 'batteryRemainingPercent', None, None, ),  # 5
    None,  # 6
    None,  # 7
    None,  # 8
    None,  # 9
    (10, TType.I64, 'systemTime', None, None, ),  # 10
)
all_structs.append(DataFilter)
DataFilter.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'componentIds', (TType.STRUCT, [UUID.ttypes.UUID, None], False), None, ),  # 1
    (2, TType.BOOL, 'includeMessages', None, True, ),  # 2
    (3, TType.BOOL, 'includeWaypoints', None, True, ),  # 3
    (4, TType.BOOL, 'includeBoundingBoxes', None, True, ),  # 4
    (5, TType.BOOL, 'includeMarkers', None, True, ),  # 5
)
all_structs.append(UnitDefinition)
UnitDefinition.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'unitId', [UUID.ttypes.UUID, None], None, ),  # 1
    (2, TType.STRING, 'unitName', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'softwareVersion', 'UTF8', None, ),  # 3
    None,  # 4
    (5, TType.STRING, 'hardwareRevision', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'vendor', 'UTF8', None, ),  # 6
    (7, TType.I32, 'unitType', None, None, ),  # 7
    (8, TType.STRING, 'protocolVersion', 'UTF8', "0.2.1", ),  # 8
)
all_structs.append(SystemConfiguration)
SystemConfiguration.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'unitId', [UUID.ttypes.UUID, None], None, ),  # 1
    (2, TType.LIST, 'gammaSpectrumConfigurations', (TType.STRUCT, [GammaSensor.ttypes.GammaListAndSpectrumConfiguration, None], False), None, ),  # 2
    (3, TType.LIST, 'gammaListConfigurations', (TType.STRUCT, [GammaSensor.ttypes.GammaListAndSpectrumConfiguration, None], False), None, ),  # 3
    (4, TType.LIST, 'gammaGrossCountConfigurations', (TType.STRUCT, [GammaSensor.ttypes.GammaGrossCountConfiguration, None], False), None, ),  # 4
    (5, TType.LIST, 'gammaDoseConfigurations', (TType.STRUCT, [GammaSensor.ttypes.GammaDoseConfiguration, None], False), None, ),  # 5
    (6, TType.LIST, 'neutronListConfigurations', (TType.STRUCT, [NeutronSensor.ttypes.NeutronConfiguration, None], False), None, ),  # 6
    (7, TType.LIST, 'neutronSpectrumConfigurations', (TType.STRUCT, [NeutronSensor.ttypes.NeutronConfiguration, None], False), None, ),  # 7
    (8, TType.LIST, 'neutronGrossCountConfigurations', (TType.STRUCT, [NeutronSensor.ttypes.NeutronConfiguration, None], False), None, ),  # 8
    (9, TType.LIST, 'contextVideoConfigurations', (TType.STRUCT, [ContextSensor.ttypes.ContextVideoConfiguration, None], False), None, ),  # 9
    (10, TType.LIST, 'contextPointCloudConfigurations', (TType.STRUCT, [ContextSensor.ttypes.Context3DConfiguration, None], False), None, ),  # 10
    (11, TType.LIST, 'contextVoxelConfigurations', (TType.STRUCT, [ContextSensor.ttypes.Context3DConfiguration, None], False), None, ),  # 11
    (12, TType.LIST, 'contextMeshConfigurations', (TType.STRUCT, [ContextSensor.ttypes.Context3DConfiguration, None], False), None, ),  # 12
    (13, TType.LIST, 'algorithmConfigurations', (TType.STRUCT, [AlgorithmPayload.ttypes.AlgorithmConfiguration, None], False), None, ),  # 13
)
all_structs.append(SystemDefinition)
SystemDefinition.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'gammaSpectrumDefinitions', (TType.STRUCT, [GammaSensor.ttypes.GammaListAndSpectrumDefinition, None], False), None, ),  # 1
    (2, TType.LIST, 'gammaListDefinitions', (TType.STRUCT, [GammaSensor.ttypes.GammaListAndSpectrumDefinition, None], False), None, ),  # 2
    (3, TType.LIST, 'gammaGrossCountDefinitions', (TType.STRUCT, [GammaSensor.ttypes.GammaGrossCountDefinition, None], False), None, ),  # 3
    (4, TType.LIST, 'gammaDoseDefinitions', (TType.STRUCT, [GammaSensor.ttypes.GammaDoseDefinition, None], False), None, ),  # 4
    (5, TType.LIST, 'neutronListDefinitions', (TType.STRUCT, [NeutronSensor.ttypes.NeutronListDefinition, None], False), None, ),  # 5
    (6, TType.LIST, 'neutronSpectrumDefinitions', (TType.STRUCT, [NeutronSensor.ttypes.NeutronSpectrumDefinition, None], False), None, ),  # 6
    (7, TType.LIST, 'neutronGrossCountDefinitions', (TType.STRUCT, [NeutronSensor.ttypes.NeutronGrossCountDefinition, None], False), None, ),  # 7
    (8, TType.LIST, 'environmentalDefinitions', (TType.STRUCT, [EnvironmentalSensor.ttypes.EnvironmentalSensorDefinition, None], False), None, ),  # 8
    (9, TType.LIST, 'navigationSensorDefinitions', (TType.STRUCT, [NavigationSensor.ttypes.NavigationSensorDefinition, None], False), None, ),  # 9
    (10, TType.LIST, 'contextVideoDefinitions', (TType.STRUCT, [ContextSensor.ttypes.ContextVideoDefinition, None], False), None, ),  # 10
    (11, TType.LIST, 'contextPointCloudDefinitions', (TType.STRUCT, [ContextSensor.ttypes.Context3DDefinition, None], False), None, ),  # 11
    (12, TType.LIST, 'contextVoxelDefinitions', (TType.STRUCT, [ContextSensor.ttypes.Context3DDefinition, None], False), None, ),  # 12
    (13, TType.LIST, 'contextMeshDefinitions', (TType.STRUCT, [ContextSensor.ttypes.Context3DDefinition, None], False), None, ),  # 13
    (14, TType.LIST, 'algorithmDefinitions', (TType.STRUCT, [AlgorithmPayload.ttypes.AlgorithmDefinition, None], False), None, ),  # 14
    (15, TType.STRING, 'apiVersion', 'UTF8', "0.2.1", ),  # 15
)
all_structs.append(DataPayload)
DataPayload.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'unitId', [UUID.ttypes.UUID, None], None, ),  # 1
    (2, TType.I64, 'timeStamp', None, None, ),  # 2
    (3, TType.I32, 'systemHealth', None, None, ),  # 3
    (4, TType.BOOL, 'isEOF', None, False, ),  # 4
    (5, TType.STRUCT, 'recordingConfig', [RecordingConfiguration, None], None, ),  # 5
    (6, TType.LIST, 'gammaSpectrumData', (TType.STRUCT, [GammaSensor.ttypes.GammaSpectrumData, None], False), None, ),  # 6
    (7, TType.LIST, 'gammaListData', (TType.STRUCT, [GammaSensor.ttypes.GammaListData, None], False), None, ),  # 7
    (8, TType.LIST, 'gammaGrossCountData', (TType.STRUCT, [GammaSensor.ttypes.GammaGrossCountData, None], False), None, ),  # 8
    (9, TType.LIST, 'gammaDoseData', (TType.STRUCT, [GammaSensor.ttypes.GammaDoseData, None], False), None, ),  # 9
    (10, TType.LIST, 'neutronListData', (TType.STRUCT, [NeutronSensor.ttypes.NeutronListData, None], False), None, ),  # 10
    (11, TType.LIST, 'neutronSpectrumData', (TType.STRUCT, [NeutronSensor.ttypes.NeutronSpectrumData, None], False), None, ),  # 11
    (12, TType.LIST, 'neutronGrossCountData', (TType.STRUCT, [NeutronSensor.ttypes.NeutronGrossCountData, None], False), None, ),  # 12
    (13, TType.LIST, 'environmentalData', (TType.STRUCT, [EnvironmentalSensor.ttypes.EnvironmentalSensorData, None], False), None, ),  # 13
    (14, TType.LIST, 'navigationData', (TType.STRUCT, [NavigationSensor.ttypes.NavigationSensorData, None], False), None, ),  # 14
    (15, TType.LIST, 'videoData', (TType.STRUCT, [ContextSensor.ttypes.ContextVideoData, None], False), None, ),  # 15
    (16, TType.LIST, 'pointCloudData', (TType.STRUCT, [ContextSensor.ttypes.ContextPointCloudData, None], False), None, ),  # 16
    (17, TType.LIST, 'voxelData', (TType.STRUCT, [ContextSensor.ttypes.ContextVoxelData, None], False), None, ),  # 17
    (18, TType.LIST, 'meshData', (TType.STRUCT, [ContextSensor.ttypes.ContextMeshData, None], False), None, ),  # 18
    (19, TType.LIST, 'messages', (TType.STRUCT, [WINDMessage.ttypes.Message, None], False), None, ),  # 19
    (20, TType.LIST, 'waypoints', (TType.STRUCT, [Navigation.ttypes.Waypoint, None], False), None, ),  # 20
    (21, TType.LIST, 'boundingBoxes', (TType.STRUCT, [Navigation.ttypes.BoundingBox, None], False), None, ),  # 21
    (22, TType.LIST, 'markers', (TType.STRUCT, [Marker.ttypes.Marker, None], False), None, ),  # 22
    (23, TType.LIST, 'algorithmData', (TType.STRUCT, [AlgorithmPayload.ttypes.AlgorithmData, None], False), None, ),  # 23
)
fix_spec(all_structs)
del all_structs
