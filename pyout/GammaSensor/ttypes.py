#
# Autogenerated by Thrift Compiler (1.0.0-dev)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys
from ..Health.ttypes import *
from ..DetectorCharacteristics.ttypes import *
from ..Angular.ttypes import *
from ..Spectrum.ttypes import *
from ..ComponentLocation.ttypes import *
from ..UUID.ttypes import *

from thrift.transport import TTransport
all_structs = []


class SIPMSettings(object):
    """
    Attributes:
     - highVoltage
    """


    def __init__(self, highVoltage=None,):
        self.highVoltage = highVoltage

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.DOUBLE:
                    self.highVoltage = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('SIPMSettings')
        if self.highVoltage is not None:
            oprot.writeFieldBegin('highVoltage', TType.DOUBLE, 1)
            oprot.writeDouble(self.highVoltage)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class PMTSettings(object):
    """
    Attributes:
     - highVoltage
     - gain
     - lowerLevelDiscriminator
     - upperLevelDiscriminator
    """


    def __init__(self, highVoltage=None, gain=None, lowerLevelDiscriminator=None, upperLevelDiscriminator=None,):
        self.highVoltage = highVoltage
        self.gain = gain
        self.lowerLevelDiscriminator = lowerLevelDiscriminator
        self.upperLevelDiscriminator = upperLevelDiscriminator

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.DOUBLE:
                    self.highVoltage = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.DOUBLE:
                    self.gain = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.DOUBLE:
                    self.lowerLevelDiscriminator = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.DOUBLE:
                    self.upperLevelDiscriminator = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('PMTSettings')
        if self.highVoltage is not None:
            oprot.writeFieldBegin('highVoltage', TType.DOUBLE, 1)
            oprot.writeDouble(self.highVoltage)
            oprot.writeFieldEnd()
        if self.gain is not None:
            oprot.writeFieldBegin('gain', TType.DOUBLE, 2)
            oprot.writeDouble(self.gain)
            oprot.writeFieldEnd()
        if self.lowerLevelDiscriminator is not None:
            oprot.writeFieldBegin('lowerLevelDiscriminator', TType.DOUBLE, 3)
            oprot.writeDouble(self.lowerLevelDiscriminator)
            oprot.writeFieldEnd()
        if self.upperLevelDiscriminator is not None:
            oprot.writeFieldBegin('upperLevelDiscriminator', TType.DOUBLE, 4)
            oprot.writeDouble(self.upperLevelDiscriminator)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class SIPM_PMTSettings(object):
    """
    Attributes:
     - sipmSettings
     - pmtSettings
    """


    def __init__(self, sipmSettings=None, pmtSettings=None,):
        self.sipmSettings = sipmSettings
        self.pmtSettings = pmtSettings

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.sipmSettings = SIPMSettings()
                    self.sipmSettings.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.pmtSettings = PMTSettings()
                    self.pmtSettings.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('SIPM_PMTSettings')
        if self.sipmSettings is not None:
            oprot.writeFieldBegin('sipmSettings', TType.STRUCT, 1)
            self.sipmSettings.write(oprot)
            oprot.writeFieldEnd()
        if self.pmtSettings is not None:
            oprot.writeFieldBegin('pmtSettings', TType.STRUCT, 2)
            self.pmtSettings.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class GammaListAndSpectrumConfiguration(object):
    """
    Attributes:
     - componentId: Used to match data, configuration, and definition.  Must be unique in the system
     - settings
     - energyCalibration
     - componentPositionAndOrientation
    """


    def __init__(self, componentId=None, settings=None, energyCalibration=None, componentPositionAndOrientation=None,):
        self.componentId = componentId
        self.settings = settings
        self.energyCalibration = energyCalibration
        self.componentPositionAndOrientation = componentPositionAndOrientation

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.componentId = UUID.ttypes.UUID()
                    self.componentId.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.settings = SIPM_PMTSettings()
                    self.settings.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.energyCalibration = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = DetectorCharacteristics.ttypes.EnergyCalibration()
                        _elem5.read(iprot)
                        self.energyCalibration.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.componentPositionAndOrientation = ComponentLocation.ttypes.GridPositionAndOrientation()
                    self.componentPositionAndOrientation.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GammaListAndSpectrumConfiguration')
        if self.componentId is not None:
            oprot.writeFieldBegin('componentId', TType.STRUCT, 1)
            self.componentId.write(oprot)
            oprot.writeFieldEnd()
        if self.settings is not None:
            oprot.writeFieldBegin('settings', TType.STRUCT, 2)
            self.settings.write(oprot)
            oprot.writeFieldEnd()
        if self.energyCalibration is not None:
            oprot.writeFieldBegin('energyCalibration', TType.LIST, 3)
            oprot.writeListBegin(TType.STRUCT, len(self.energyCalibration))
            for iter6 in self.energyCalibration:
                iter6.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.componentPositionAndOrientation is not None:
            oprot.writeFieldBegin('componentPositionAndOrientation', TType.STRUCT, 4)
            self.componentPositionAndOrientation.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class GammaListAndSpectrumDefinition(object):
    """
    Attributes:
     - componentId: Used to match data, configuration, and definition.  Must be unique in the system
     - componentName
     - vendorName
     - serialNumber
     - numberOfChannels
     - physicalDimensions
     - detectorMaterial
     - startingGammaConfiguration: Starting values for the configuration options
     - angularEfficiencies
    """


    def __init__(self, componentId=None, componentName=None, vendorName=None, serialNumber=None, numberOfChannels=None, physicalDimensions=None, detectorMaterial=None, startingGammaConfiguration=None, angularEfficiencies=None,):
        self.componentId = componentId
        self.componentName = componentName
        self.vendorName = vendorName
        self.serialNumber = serialNumber
        self.numberOfChannels = numberOfChannels
        self.physicalDimensions = physicalDimensions
        self.detectorMaterial = detectorMaterial
        self.startingGammaConfiguration = startingGammaConfiguration
        self.angularEfficiencies = angularEfficiencies

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.componentId = UUID.ttypes.UUID()
                    self.componentId.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.componentName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.vendorName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.serialNumber = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.numberOfChannels = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.physicalDimensions = DetectorCharacteristics.ttypes.Dimensions()
                    self.physicalDimensions.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.detectorMaterial = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRUCT:
                    self.startingGammaConfiguration = GammaListAndSpectrumConfiguration()
                    self.startingGammaConfiguration.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.LIST:
                    self.angularEfficiencies = []
                    (_etype10, _size7) = iprot.readListBegin()
                    for _i11 in range(_size7):
                        _elem12 = Angular.ttypes.AngularEfficiencyDefinition()
                        _elem12.read(iprot)
                        self.angularEfficiencies.append(_elem12)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GammaListAndSpectrumDefinition')
        if self.componentId is not None:
            oprot.writeFieldBegin('componentId', TType.STRUCT, 1)
            self.componentId.write(oprot)
            oprot.writeFieldEnd()
        if self.componentName is not None:
            oprot.writeFieldBegin('componentName', TType.STRING, 2)
            oprot.writeString(self.componentName.encode('utf-8') if sys.version_info[0] == 2 else self.componentName)
            oprot.writeFieldEnd()
        if self.vendorName is not None:
            oprot.writeFieldBegin('vendorName', TType.STRING, 3)
            oprot.writeString(self.vendorName.encode('utf-8') if sys.version_info[0] == 2 else self.vendorName)
            oprot.writeFieldEnd()
        if self.serialNumber is not None:
            oprot.writeFieldBegin('serialNumber', TType.STRING, 4)
            oprot.writeString(self.serialNumber.encode('utf-8') if sys.version_info[0] == 2 else self.serialNumber)
            oprot.writeFieldEnd()
        if self.numberOfChannels is not None:
            oprot.writeFieldBegin('numberOfChannels', TType.I32, 5)
            oprot.writeI32(self.numberOfChannels)
            oprot.writeFieldEnd()
        if self.physicalDimensions is not None:
            oprot.writeFieldBegin('physicalDimensions', TType.STRUCT, 6)
            self.physicalDimensions.write(oprot)
            oprot.writeFieldEnd()
        if self.detectorMaterial is not None:
            oprot.writeFieldBegin('detectorMaterial', TType.I32, 7)
            oprot.writeI32(self.detectorMaterial)
            oprot.writeFieldEnd()
        if self.startingGammaConfiguration is not None:
            oprot.writeFieldBegin('startingGammaConfiguration', TType.STRUCT, 8)
            self.startingGammaConfiguration.write(oprot)
            oprot.writeFieldEnd()
        if self.angularEfficiencies is not None:
            oprot.writeFieldBegin('angularEfficiencies', TType.LIST, 9)
            oprot.writeListBegin(TType.STRUCT, len(self.angularEfficiencies))
            for iter13 in self.angularEfficiencies:
                iter13.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class GammaSpectrumData(object):
    """
    Attributes:
     - componentId: Used to match data, configuration, and definition.  Must be unique in the system
     - timeStamp: Milliseconds since UNIX epoch
     - health
     - spectrum
     - gammaSpectrumConfiguration: Send this only if things have changed
     - liveTime
     - realTime
    """


    def __init__(self, componentId=None, timeStamp=None, health=None, spectrum=None, gammaSpectrumConfiguration=None, liveTime=None, realTime=None,):
        self.componentId = componentId
        self.timeStamp = timeStamp
        self.health = health
        self.spectrum = spectrum
        self.gammaSpectrumConfiguration = gammaSpectrumConfiguration
        self.liveTime = liveTime
        self.realTime = realTime

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.componentId = UUID.ttypes.UUID()
                    self.componentId.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.timeStamp = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.health = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.spectrum = Spectrum.ttypes.SpectrumResult()
                    self.spectrum.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.gammaSpectrumConfiguration = GammaListAndSpectrumConfiguration()
                    self.gammaSpectrumConfiguration.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I64:
                    self.liveTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I64:
                    self.realTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GammaSpectrumData')
        if self.componentId is not None:
            oprot.writeFieldBegin('componentId', TType.STRUCT, 1)
            self.componentId.write(oprot)
            oprot.writeFieldEnd()
        if self.timeStamp is not None:
            oprot.writeFieldBegin('timeStamp', TType.I64, 2)
            oprot.writeI64(self.timeStamp)
            oprot.writeFieldEnd()
        if self.health is not None:
            oprot.writeFieldBegin('health', TType.I32, 3)
            oprot.writeI32(self.health)
            oprot.writeFieldEnd()
        if self.spectrum is not None:
            oprot.writeFieldBegin('spectrum', TType.STRUCT, 4)
            self.spectrum.write(oprot)
            oprot.writeFieldEnd()
        if self.gammaSpectrumConfiguration is not None:
            oprot.writeFieldBegin('gammaSpectrumConfiguration', TType.STRUCT, 5)
            self.gammaSpectrumConfiguration.write(oprot)
            oprot.writeFieldEnd()
        if self.liveTime is not None:
            oprot.writeFieldBegin('liveTime', TType.I64, 6)
            oprot.writeI64(self.liveTime)
            oprot.writeFieldEnd()
        if self.realTime is not None:
            oprot.writeFieldBegin('realTime', TType.I64, 7)
            oprot.writeI64(self.realTime)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class GammaListData(object):
    """
    Attributes:
     - componentId: Used to match data, configuration, and definition.  Must be unique in the system
     - timeStamp: Milliseconds since UNIX epoch
     - health
     - gammaListConfiguration: Send this only if things have changed
     - listModeData
     - liveTime
     - realTime
    """


    def __init__(self, componentId=None, timeStamp=None, health=None, gammaListConfiguration=None, listModeData=None, liveTime=None, realTime=None,):
        self.componentId = componentId
        self.timeStamp = timeStamp
        self.health = health
        self.gammaListConfiguration = gammaListConfiguration
        self.listModeData = listModeData
        self.liveTime = liveTime
        self.realTime = realTime

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.componentId = UUID.ttypes.UUID()
                    self.componentId.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.timeStamp = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.health = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.gammaListConfiguration = GammaListAndSpectrumConfiguration()
                    self.gammaListConfiguration.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.LIST:
                    self.listModeData = []
                    (_etype17, _size14) = iprot.readListBegin()
                    for _i18 in range(_size14):
                        _elem19 = Spectrum.ttypes.ListMode()
                        _elem19.read(iprot)
                        self.listModeData.append(_elem19)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I64:
                    self.liveTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I64:
                    self.realTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GammaListData')
        if self.componentId is not None:
            oprot.writeFieldBegin('componentId', TType.STRUCT, 1)
            self.componentId.write(oprot)
            oprot.writeFieldEnd()
        if self.timeStamp is not None:
            oprot.writeFieldBegin('timeStamp', TType.I64, 2)
            oprot.writeI64(self.timeStamp)
            oprot.writeFieldEnd()
        if self.health is not None:
            oprot.writeFieldBegin('health', TType.I32, 3)
            oprot.writeI32(self.health)
            oprot.writeFieldEnd()
        if self.gammaListConfiguration is not None:
            oprot.writeFieldBegin('gammaListConfiguration', TType.STRUCT, 4)
            self.gammaListConfiguration.write(oprot)
            oprot.writeFieldEnd()
        if self.listModeData is not None:
            oprot.writeFieldBegin('listModeData', TType.LIST, 5)
            oprot.writeListBegin(TType.STRUCT, len(self.listModeData))
            for iter20 in self.listModeData:
                iter20.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.liveTime is not None:
            oprot.writeFieldBegin('liveTime', TType.I64, 6)
            oprot.writeI64(self.liveTime)
            oprot.writeFieldEnd()
        if self.realTime is not None:
            oprot.writeFieldBegin('realTime', TType.I64, 7)
            oprot.writeI64(self.realTime)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class GammaGrossCountConfiguration(object):
    """
    Attributes:
     - componentId: Used to match data, configuration, and definition.  Must be unique in the system
     - componentPositionAndOrientation
    """


    def __init__(self, componentId=None, componentPositionAndOrientation=None,):
        self.componentId = componentId
        self.componentPositionAndOrientation = componentPositionAndOrientation

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.componentId = UUID.ttypes.UUID()
                    self.componentId.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.componentPositionAndOrientation = ComponentLocation.ttypes.GridPositionAndOrientation()
                    self.componentPositionAndOrientation.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GammaGrossCountConfiguration')
        if self.componentId is not None:
            oprot.writeFieldBegin('componentId', TType.STRUCT, 1)
            self.componentId.write(oprot)
            oprot.writeFieldEnd()
        if self.componentPositionAndOrientation is not None:
            oprot.writeFieldBegin('componentPositionAndOrientation', TType.STRUCT, 2)
            self.componentPositionAndOrientation.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class GammaGrossCountDefinition(object):
    """
    Attributes:
     - componentId: Used to match data, configuration, and definition.  Must be unique in the system
     - componentName
     - vendorName
     - serialNumber
     - physicalDimensions
     - detectorMaterial
     - startingGammaGrossCountConfiguration
     - angularEfficiencies
    """


    def __init__(self, componentId=None, componentName=None, vendorName=None, serialNumber=None, physicalDimensions=None, detectorMaterial=None, startingGammaGrossCountConfiguration=None, angularEfficiencies=None,):
        self.componentId = componentId
        self.componentName = componentName
        self.vendorName = vendorName
        self.serialNumber = serialNumber
        self.physicalDimensions = physicalDimensions
        self.detectorMaterial = detectorMaterial
        self.startingGammaGrossCountConfiguration = startingGammaGrossCountConfiguration
        self.angularEfficiencies = angularEfficiencies

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.componentId = UUID.ttypes.UUID()
                    self.componentId.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.componentName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.vendorName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.serialNumber = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.physicalDimensions = DetectorCharacteristics.ttypes.Dimensions()
                    self.physicalDimensions.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.detectorMaterial = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRUCT:
                    self.startingGammaGrossCountConfiguration = GammaGrossCountConfiguration()
                    self.startingGammaGrossCountConfiguration.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.LIST:
                    self.angularEfficiencies = []
                    (_etype24, _size21) = iprot.readListBegin()
                    for _i25 in range(_size21):
                        _elem26 = Angular.ttypes.AngularEfficiencyDefinition()
                        _elem26.read(iprot)
                        self.angularEfficiencies.append(_elem26)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GammaGrossCountDefinition')
        if self.componentId is not None:
            oprot.writeFieldBegin('componentId', TType.STRUCT, 1)
            self.componentId.write(oprot)
            oprot.writeFieldEnd()
        if self.componentName is not None:
            oprot.writeFieldBegin('componentName', TType.STRING, 2)
            oprot.writeString(self.componentName.encode('utf-8') if sys.version_info[0] == 2 else self.componentName)
            oprot.writeFieldEnd()
        if self.vendorName is not None:
            oprot.writeFieldBegin('vendorName', TType.STRING, 3)
            oprot.writeString(self.vendorName.encode('utf-8') if sys.version_info[0] == 2 else self.vendorName)
            oprot.writeFieldEnd()
        if self.serialNumber is not None:
            oprot.writeFieldBegin('serialNumber', TType.STRING, 4)
            oprot.writeString(self.serialNumber.encode('utf-8') if sys.version_info[0] == 2 else self.serialNumber)
            oprot.writeFieldEnd()
        if self.physicalDimensions is not None:
            oprot.writeFieldBegin('physicalDimensions', TType.STRUCT, 5)
            self.physicalDimensions.write(oprot)
            oprot.writeFieldEnd()
        if self.detectorMaterial is not None:
            oprot.writeFieldBegin('detectorMaterial', TType.I32, 6)
            oprot.writeI32(self.detectorMaterial)
            oprot.writeFieldEnd()
        if self.startingGammaGrossCountConfiguration is not None:
            oprot.writeFieldBegin('startingGammaGrossCountConfiguration', TType.STRUCT, 7)
            self.startingGammaGrossCountConfiguration.write(oprot)
            oprot.writeFieldEnd()
        if self.angularEfficiencies is not None:
            oprot.writeFieldBegin('angularEfficiencies', TType.LIST, 8)
            oprot.writeListBegin(TType.STRUCT, len(self.angularEfficiencies))
            for iter27 in self.angularEfficiencies:
                iter27.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class GammaGrossCountData(object):
    """
    Attributes:
     - componentId: Used to match data, configuration, and definition.  Must be unique in the system
     - timeStamp: Milliseconds since UNIX epoch
     - health
     - counts
     - liveTime
     - realTime
    """


    def __init__(self, componentId=None, timeStamp=None, health=None, counts=None, liveTime=None, realTime=None,):
        self.componentId = componentId
        self.timeStamp = timeStamp
        self.health = health
        self.counts = counts
        self.liveTime = liveTime
        self.realTime = realTime

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.componentId = UUID.ttypes.UUID()
                    self.componentId.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.timeStamp = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.health = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.counts = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I64:
                    self.liveTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I64:
                    self.realTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GammaGrossCountData')
        if self.componentId is not None:
            oprot.writeFieldBegin('componentId', TType.STRUCT, 1)
            self.componentId.write(oprot)
            oprot.writeFieldEnd()
        if self.timeStamp is not None:
            oprot.writeFieldBegin('timeStamp', TType.I64, 2)
            oprot.writeI64(self.timeStamp)
            oprot.writeFieldEnd()
        if self.health is not None:
            oprot.writeFieldBegin('health', TType.I32, 3)
            oprot.writeI32(self.health)
            oprot.writeFieldEnd()
        if self.counts is not None:
            oprot.writeFieldBegin('counts', TType.I32, 4)
            oprot.writeI32(self.counts)
            oprot.writeFieldEnd()
        if self.liveTime is not None:
            oprot.writeFieldBegin('liveTime', TType.I64, 5)
            oprot.writeI64(self.liveTime)
            oprot.writeFieldEnd()
        if self.realTime is not None:
            oprot.writeFieldBegin('realTime', TType.I64, 6)
            oprot.writeI64(self.realTime)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class GammaDoseConfiguration(object):
    """
    Attributes:
     - componentId: Used to match data, configuration, and definition.  Must be unique in the system
     - componentPositionAndOrientation
    """


    def __init__(self, componentId=None, componentPositionAndOrientation=None,):
        self.componentId = componentId
        self.componentPositionAndOrientation = componentPositionAndOrientation

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.componentId = UUID.ttypes.UUID()
                    self.componentId.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.componentPositionAndOrientation = ComponentLocation.ttypes.GridPositionAndOrientation()
                    self.componentPositionAndOrientation.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GammaDoseConfiguration')
        if self.componentId is not None:
            oprot.writeFieldBegin('componentId', TType.STRUCT, 1)
            self.componentId.write(oprot)
            oprot.writeFieldEnd()
        if self.componentPositionAndOrientation is not None:
            oprot.writeFieldBegin('componentPositionAndOrientation', TType.STRUCT, 2)
            self.componentPositionAndOrientation.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class GammaDoseDefinition(object):
    """
    Attributes:
     - componentId: Used to match data, configuration, and definition.  Must be unique in the system
     - componentName
     - vendorName
     - serialNumber
     - physicalDimensions
     - detectorMaterial
     - startingGammaDoseConfiguration
     - angularEfficiencies
    """


    def __init__(self, componentId=None, componentName=None, vendorName=None, serialNumber=None, physicalDimensions=None, detectorMaterial=None, startingGammaDoseConfiguration=None, angularEfficiencies=None,):
        self.componentId = componentId
        self.componentName = componentName
        self.vendorName = vendorName
        self.serialNumber = serialNumber
        self.physicalDimensions = physicalDimensions
        self.detectorMaterial = detectorMaterial
        self.startingGammaDoseConfiguration = startingGammaDoseConfiguration
        self.angularEfficiencies = angularEfficiencies

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.componentId = UUID.ttypes.UUID()
                    self.componentId.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.componentName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.vendorName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.serialNumber = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.physicalDimensions = DetectorCharacteristics.ttypes.Dimensions()
                    self.physicalDimensions.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.detectorMaterial = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRUCT:
                    self.startingGammaDoseConfiguration = GammaDoseConfiguration()
                    self.startingGammaDoseConfiguration.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.LIST:
                    self.angularEfficiencies = []
                    (_etype31, _size28) = iprot.readListBegin()
                    for _i32 in range(_size28):
                        _elem33 = Angular.ttypes.AngularEfficiencyDefinition()
                        _elem33.read(iprot)
                        self.angularEfficiencies.append(_elem33)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GammaDoseDefinition')
        if self.componentId is not None:
            oprot.writeFieldBegin('componentId', TType.STRUCT, 1)
            self.componentId.write(oprot)
            oprot.writeFieldEnd()
        if self.componentName is not None:
            oprot.writeFieldBegin('componentName', TType.STRING, 2)
            oprot.writeString(self.componentName.encode('utf-8') if sys.version_info[0] == 2 else self.componentName)
            oprot.writeFieldEnd()
        if self.vendorName is not None:
            oprot.writeFieldBegin('vendorName', TType.STRING, 3)
            oprot.writeString(self.vendorName.encode('utf-8') if sys.version_info[0] == 2 else self.vendorName)
            oprot.writeFieldEnd()
        if self.serialNumber is not None:
            oprot.writeFieldBegin('serialNumber', TType.STRING, 4)
            oprot.writeString(self.serialNumber.encode('utf-8') if sys.version_info[0] == 2 else self.serialNumber)
            oprot.writeFieldEnd()
        if self.physicalDimensions is not None:
            oprot.writeFieldBegin('physicalDimensions', TType.STRUCT, 5)
            self.physicalDimensions.write(oprot)
            oprot.writeFieldEnd()
        if self.detectorMaterial is not None:
            oprot.writeFieldBegin('detectorMaterial', TType.I32, 6)
            oprot.writeI32(self.detectorMaterial)
            oprot.writeFieldEnd()
        if self.startingGammaDoseConfiguration is not None:
            oprot.writeFieldBegin('startingGammaDoseConfiguration', TType.STRUCT, 7)
            self.startingGammaDoseConfiguration.write(oprot)
            oprot.writeFieldEnd()
        if self.angularEfficiencies is not None:
            oprot.writeFieldBegin('angularEfficiencies', TType.LIST, 8)
            oprot.writeListBegin(TType.STRUCT, len(self.angularEfficiencies))
            for iter34 in self.angularEfficiencies:
                iter34.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class GammaDoseData(object):
    """
    Attributes:
     - componentId: Used to match data, configuration, and definition.  Must be unique in the system
     - timeStamp: Milliseconds since UNIX epoch
     - health
     - dose
     - liveTime
     - realTime
    """


    def __init__(self, componentId=None, timeStamp=None, health=None, dose=None, liveTime=None, realTime=None,):
        self.componentId = componentId
        self.timeStamp = timeStamp
        self.health = health
        self.dose = dose
        self.liveTime = liveTime
        self.realTime = realTime

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.componentId = UUID.ttypes.UUID()
                    self.componentId.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.timeStamp = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.health = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.DOUBLE:
                    self.dose = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I64:
                    self.liveTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I64:
                    self.realTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GammaDoseData')
        if self.componentId is not None:
            oprot.writeFieldBegin('componentId', TType.STRUCT, 1)
            self.componentId.write(oprot)
            oprot.writeFieldEnd()
        if self.timeStamp is not None:
            oprot.writeFieldBegin('timeStamp', TType.I64, 2)
            oprot.writeI64(self.timeStamp)
            oprot.writeFieldEnd()
        if self.health is not None:
            oprot.writeFieldBegin('health', TType.I32, 3)
            oprot.writeI32(self.health)
            oprot.writeFieldEnd()
        if self.dose is not None:
            oprot.writeFieldBegin('dose', TType.DOUBLE, 4)
            oprot.writeDouble(self.dose)
            oprot.writeFieldEnd()
        if self.liveTime is not None:
            oprot.writeFieldBegin('liveTime', TType.I64, 5)
            oprot.writeI64(self.liveTime)
            oprot.writeFieldEnd()
        if self.realTime is not None:
            oprot.writeFieldBegin('realTime', TType.I64, 6)
            oprot.writeI64(self.realTime)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(SIPMSettings)
SIPMSettings.thrift_spec = (
    None,  # 0
    (1, TType.DOUBLE, 'highVoltage', None, None, ),  # 1
)
all_structs.append(PMTSettings)
PMTSettings.thrift_spec = (
    None,  # 0
    (1, TType.DOUBLE, 'highVoltage', None, None, ),  # 1
    (2, TType.DOUBLE, 'gain', None, None, ),  # 2
    (3, TType.DOUBLE, 'lowerLevelDiscriminator', None, None, ),  # 3
    (4, TType.DOUBLE, 'upperLevelDiscriminator', None, None, ),  # 4
)
all_structs.append(SIPM_PMTSettings)
SIPM_PMTSettings.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'sipmSettings', [SIPMSettings, None], None, ),  # 1
    (2, TType.STRUCT, 'pmtSettings', [PMTSettings, None], None, ),  # 2
)
all_structs.append(GammaListAndSpectrumConfiguration)
GammaListAndSpectrumConfiguration.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'componentId', [UUID.ttypes.UUID, None], None, ),  # 1
    (2, TType.STRUCT, 'settings', [SIPM_PMTSettings, None], None, ),  # 2
    (3, TType.LIST, 'energyCalibration', (TType.STRUCT, [DetectorCharacteristics.ttypes.EnergyCalibration, None], False), None, ),  # 3
    (4, TType.STRUCT, 'componentPositionAndOrientation', [ComponentLocation.ttypes.GridPositionAndOrientation, None], None, ),  # 4
)
all_structs.append(GammaListAndSpectrumDefinition)
GammaListAndSpectrumDefinition.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'componentId', [UUID.ttypes.UUID, None], None, ),  # 1
    (2, TType.STRING, 'componentName', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'vendorName', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'serialNumber', 'UTF8', None, ),  # 4
    (5, TType.I32, 'numberOfChannels', None, None, ),  # 5
    (6, TType.STRUCT, 'physicalDimensions', [DetectorCharacteristics.ttypes.Dimensions, None], None, ),  # 6
    (7, TType.I32, 'detectorMaterial', None, None, ),  # 7
    (8, TType.STRUCT, 'startingGammaConfiguration', [GammaListAndSpectrumConfiguration, None], None, ),  # 8
    (9, TType.LIST, 'angularEfficiencies', (TType.STRUCT, [Angular.ttypes.AngularEfficiencyDefinition, None], False), None, ),  # 9
)
all_structs.append(GammaSpectrumData)
GammaSpectrumData.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'componentId', [UUID.ttypes.UUID, None], None, ),  # 1
    (2, TType.I64, 'timeStamp', None, None, ),  # 2
    (3, TType.I32, 'health', None, None, ),  # 3
    (4, TType.STRUCT, 'spectrum', [Spectrum.ttypes.SpectrumResult, None], None, ),  # 4
    (5, TType.STRUCT, 'gammaSpectrumConfiguration', [GammaListAndSpectrumConfiguration, None], None, ),  # 5
    (6, TType.I64, 'liveTime', None, None, ),  # 6
    (7, TType.I64, 'realTime', None, None, ),  # 7
)
all_structs.append(GammaListData)
GammaListData.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'componentId', [UUID.ttypes.UUID, None], None, ),  # 1
    (2, TType.I64, 'timeStamp', None, None, ),  # 2
    (3, TType.I32, 'health', None, None, ),  # 3
    (4, TType.STRUCT, 'gammaListConfiguration', [GammaListAndSpectrumConfiguration, None], None, ),  # 4
    (5, TType.LIST, 'listModeData', (TType.STRUCT, [Spectrum.ttypes.ListMode, None], False), None, ),  # 5
    (6, TType.I64, 'liveTime', None, None, ),  # 6
    (7, TType.I64, 'realTime', None, None, ),  # 7
)
all_structs.append(GammaGrossCountConfiguration)
GammaGrossCountConfiguration.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'componentId', [UUID.ttypes.UUID, None], None, ),  # 1
    (2, TType.STRUCT, 'componentPositionAndOrientation', [ComponentLocation.ttypes.GridPositionAndOrientation, None], None, ),  # 2
)
all_structs.append(GammaGrossCountDefinition)
GammaGrossCountDefinition.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'componentId', [UUID.ttypes.UUID, None], None, ),  # 1
    (2, TType.STRING, 'componentName', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'vendorName', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'serialNumber', 'UTF8', None, ),  # 4
    (5, TType.STRUCT, 'physicalDimensions', [DetectorCharacteristics.ttypes.Dimensions, None], None, ),  # 5
    (6, TType.I32, 'detectorMaterial', None, None, ),  # 6
    (7, TType.STRUCT, 'startingGammaGrossCountConfiguration', [GammaGrossCountConfiguration, None], None, ),  # 7
    (8, TType.LIST, 'angularEfficiencies', (TType.STRUCT, [Angular.ttypes.AngularEfficiencyDefinition, None], False), None, ),  # 8
)
all_structs.append(GammaGrossCountData)
GammaGrossCountData.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'componentId', [UUID.ttypes.UUID, None], None, ),  # 1
    (2, TType.I64, 'timeStamp', None, None, ),  # 2
    (3, TType.I32, 'health', None, None, ),  # 3
    (4, TType.I32, 'counts', None, None, ),  # 4
    (5, TType.I64, 'liveTime', None, None, ),  # 5
    (6, TType.I64, 'realTime', None, None, ),  # 6
)
all_structs.append(GammaDoseConfiguration)
GammaDoseConfiguration.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'componentId', [UUID.ttypes.UUID, None], None, ),  # 1
    (2, TType.STRUCT, 'componentPositionAndOrientation', [ComponentLocation.ttypes.GridPositionAndOrientation, None], None, ),  # 2
)
all_structs.append(GammaDoseDefinition)
GammaDoseDefinition.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'componentId', [UUID.ttypes.UUID, None], None, ),  # 1
    (2, TType.STRING, 'componentName', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'vendorName', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'serialNumber', 'UTF8', None, ),  # 4
    (5, TType.STRUCT, 'physicalDimensions', [DetectorCharacteristics.ttypes.Dimensions, None], None, ),  # 5
    (6, TType.I32, 'detectorMaterial', None, None, ),  # 6
    (7, TType.STRUCT, 'startingGammaDoseConfiguration', [GammaDoseConfiguration, None], None, ),  # 7
    (8, TType.LIST, 'angularEfficiencies', (TType.STRUCT, [Angular.ttypes.AngularEfficiencyDefinition, None], False), None, ),  # 8
)
all_structs.append(GammaDoseData)
GammaDoseData.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'componentId', [UUID.ttypes.UUID, None], None, ),  # 1
    (2, TType.I64, 'timeStamp', None, None, ),  # 2
    (3, TType.I32, 'health', None, None, ),  # 3
    (4, TType.DOUBLE, 'dose', None, None, ),  # 4
    (5, TType.I64, 'liveTime', None, None, ),  # 5
    (6, TType.I64, 'realTime', None, None, ),  # 6
)
fix_spec(all_structs)
del all_structs
