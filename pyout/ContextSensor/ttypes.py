#
# Autogenerated by Thrift Compiler (1.0.0-dev)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys
import Health.ttypes
import Context.ttypes
import ComponentLocation.ttypes
import UUID.ttypes

from thrift.transport import TTransport
all_structs = []


class ContextVideoConfiguration(object):
    """
    Attributes:
     - componentId
     - fileName
     - framesPerSecond
     - verticalResolution
     - horizontalResolution
     - componentPositionAndOrientation
    """


    def __init__(self, componentId=None, fileName=None, framesPerSecond=None, verticalResolution=None, horizontalResolution=None, componentPositionAndOrientation=None,):
        self.componentId = componentId
        self.fileName = fileName
        self.framesPerSecond = framesPerSecond
        self.verticalResolution = verticalResolution
        self.horizontalResolution = horizontalResolution
        self.componentPositionAndOrientation = componentPositionAndOrientation

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.componentId = UUID.ttypes.UUID()
                    self.componentId.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.fileName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.DOUBLE:
                    self.framesPerSecond = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.DOUBLE:
                    self.verticalResolution = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.DOUBLE:
                    self.horizontalResolution = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.componentPositionAndOrientation = ComponentLocation.ttypes.GridPositionAndOrientation()
                    self.componentPositionAndOrientation.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ContextVideoConfiguration')
        if self.componentId is not None:
            oprot.writeFieldBegin('componentId', TType.STRUCT, 1)
            self.componentId.write(oprot)
            oprot.writeFieldEnd()
        if self.fileName is not None:
            oprot.writeFieldBegin('fileName', TType.STRING, 2)
            oprot.writeString(self.fileName.encode('utf-8') if sys.version_info[0] == 2 else self.fileName)
            oprot.writeFieldEnd()
        if self.framesPerSecond is not None:
            oprot.writeFieldBegin('framesPerSecond', TType.DOUBLE, 3)
            oprot.writeDouble(self.framesPerSecond)
            oprot.writeFieldEnd()
        if self.verticalResolution is not None:
            oprot.writeFieldBegin('verticalResolution', TType.DOUBLE, 4)
            oprot.writeDouble(self.verticalResolution)
            oprot.writeFieldEnd()
        if self.horizontalResolution is not None:
            oprot.writeFieldBegin('horizontalResolution', TType.DOUBLE, 5)
            oprot.writeDouble(self.horizontalResolution)
            oprot.writeFieldEnd()
        if self.componentPositionAndOrientation is not None:
            oprot.writeFieldBegin('componentPositionAndOrientation', TType.STRUCT, 6)
            self.componentPositionAndOrientation.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ContextVideoDefinition(object):
    """
    Attributes:
     - componentId
     - componentName
     - vendorName
     - serialNumber
     - videoConfiguration
    """


    def __init__(self, componentId=None, componentName=None, vendorName=None, serialNumber=None, videoConfiguration=None,):
        self.componentId = componentId
        self.componentName = componentName
        self.vendorName = vendorName
        self.serialNumber = serialNumber
        self.videoConfiguration = videoConfiguration

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.componentId = UUID.ttypes.UUID()
                    self.componentId.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.componentName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.vendorName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.serialNumber = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.videoConfiguration = ContextVideoConfiguration()
                    self.videoConfiguration.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ContextVideoDefinition')
        if self.componentId is not None:
            oprot.writeFieldBegin('componentId', TType.STRUCT, 1)
            self.componentId.write(oprot)
            oprot.writeFieldEnd()
        if self.componentName is not None:
            oprot.writeFieldBegin('componentName', TType.STRING, 2)
            oprot.writeString(self.componentName.encode('utf-8') if sys.version_info[0] == 2 else self.componentName)
            oprot.writeFieldEnd()
        if self.vendorName is not None:
            oprot.writeFieldBegin('vendorName', TType.STRING, 3)
            oprot.writeString(self.vendorName.encode('utf-8') if sys.version_info[0] == 2 else self.vendorName)
            oprot.writeFieldEnd()
        if self.serialNumber is not None:
            oprot.writeFieldBegin('serialNumber', TType.STRING, 4)
            oprot.writeString(self.serialNumber.encode('utf-8') if sys.version_info[0] == 2 else self.serialNumber)
            oprot.writeFieldEnd()
        if self.videoConfiguration is not None:
            oprot.writeFieldBegin('videoConfiguration', TType.STRUCT, 5)
            self.videoConfiguration.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ContextVideoData(object):
    """
    Attributes:
     - componentId
     - timeStamp
     - health
     - sensorTimeStamp: Used to synchronize time between context sensor and PTU time in the case of an offset
     - contextVideoConfiguration: Only send if configuration has changed
     - cameraImage
    """


    def __init__(self, componentId=None, timeStamp=None, health=None, sensorTimeStamp=None, contextVideoConfiguration=None, cameraImage=None,):
        self.componentId = componentId
        self.timeStamp = timeStamp
        self.health = health
        self.sensorTimeStamp = sensorTimeStamp
        self.contextVideoConfiguration = contextVideoConfiguration
        self.cameraImage = cameraImage

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.componentId = UUID.ttypes.UUID()
                    self.componentId.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.timeStamp = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.health = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.sensorTimeStamp = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.contextVideoConfiguration = ContextVideoConfiguration()
                    self.contextVideoConfiguration.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.cameraImage = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ContextVideoData')
        if self.componentId is not None:
            oprot.writeFieldBegin('componentId', TType.STRUCT, 1)
            self.componentId.write(oprot)
            oprot.writeFieldEnd()
        if self.timeStamp is not None:
            oprot.writeFieldBegin('timeStamp', TType.I64, 2)
            oprot.writeI64(self.timeStamp)
            oprot.writeFieldEnd()
        if self.health is not None:
            oprot.writeFieldBegin('health', TType.I32, 3)
            oprot.writeI32(self.health)
            oprot.writeFieldEnd()
        if self.sensorTimeStamp is not None:
            oprot.writeFieldBegin('sensorTimeStamp', TType.I64, 4)
            oprot.writeI64(self.sensorTimeStamp)
            oprot.writeFieldEnd()
        if self.contextVideoConfiguration is not None:
            oprot.writeFieldBegin('contextVideoConfiguration', TType.STRUCT, 5)
            self.contextVideoConfiguration.write(oprot)
            oprot.writeFieldEnd()
        if self.cameraImage is not None:
            oprot.writeFieldBegin('cameraImage', TType.STRING, 6)
            oprot.writeBinary(self.cameraImage)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Context3DConfiguration(object):
    """
    Attributes:
     - componentId
     - componentPositionAndOrientation
    """


    def __init__(self, componentId=None, componentPositionAndOrientation=None,):
        self.componentId = componentId
        self.componentPositionAndOrientation = componentPositionAndOrientation

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.componentId = UUID.ttypes.UUID()
                    self.componentId.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.componentPositionAndOrientation = ComponentLocation.ttypes.GridPositionAndOrientation()
                    self.componentPositionAndOrientation.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Context3DConfiguration')
        if self.componentId is not None:
            oprot.writeFieldBegin('componentId', TType.STRUCT, 1)
            self.componentId.write(oprot)
            oprot.writeFieldEnd()
        if self.componentPositionAndOrientation is not None:
            oprot.writeFieldBegin('componentPositionAndOrientation', TType.STRUCT, 2)
            self.componentPositionAndOrientation.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Context3DDefinition(object):
    """
    Attributes:
     - componentId
     - componentName
     - vendorName
     - serialNumber
     - configuration
    """


    def __init__(self, componentId=None, componentName=None, vendorName=None, serialNumber=None, configuration=None,):
        self.componentId = componentId
        self.componentName = componentName
        self.vendorName = vendorName
        self.serialNumber = serialNumber
        self.configuration = configuration

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.componentId = UUID.ttypes.UUID()
                    self.componentId.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.componentName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.vendorName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.serialNumber = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRUCT:
                    self.configuration = Context3DConfiguration()
                    self.configuration.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Context3DDefinition')
        if self.componentId is not None:
            oprot.writeFieldBegin('componentId', TType.STRUCT, 1)
            self.componentId.write(oprot)
            oprot.writeFieldEnd()
        if self.componentName is not None:
            oprot.writeFieldBegin('componentName', TType.STRING, 2)
            oprot.writeString(self.componentName.encode('utf-8') if sys.version_info[0] == 2 else self.componentName)
            oprot.writeFieldEnd()
        if self.vendorName is not None:
            oprot.writeFieldBegin('vendorName', TType.STRING, 3)
            oprot.writeString(self.vendorName.encode('utf-8') if sys.version_info[0] == 2 else self.vendorName)
            oprot.writeFieldEnd()
        if self.serialNumber is not None:
            oprot.writeFieldBegin('serialNumber', TType.STRING, 4)
            oprot.writeString(self.serialNumber.encode('utf-8') if sys.version_info[0] == 2 else self.serialNumber)
            oprot.writeFieldEnd()
        if self.configuration is not None:
            oprot.writeFieldBegin('configuration', TType.STRUCT, 11)
            self.configuration.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ContextPointCloudData(object):
    """
    Attributes:
     - componentId
     - timeStamp
     - health
     - sensorTimeStamp: Used to synchronize time between context sensor and PTU time in the case of an offset
     - syncFrame: For CSS->CMD synchronization
     - pointCloudConfiguration: Only send if configuration has changed
     - pointCloud: 3D Point Cloud
    """


    def __init__(self, componentId=None, timeStamp=None, health=None, sensorTimeStamp=None, syncFrame=None, pointCloudConfiguration=None, pointCloud=None,):
        self.componentId = componentId
        self.timeStamp = timeStamp
        self.health = health
        self.sensorTimeStamp = sensorTimeStamp
        self.syncFrame = syncFrame
        self.pointCloudConfiguration = pointCloudConfiguration
        self.pointCloud = pointCloud

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.componentId = UUID.ttypes.UUID()
                    self.componentId.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.timeStamp = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.health = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.sensorTimeStamp = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I64:
                    self.syncFrame = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.pointCloudConfiguration = Context3DConfiguration()
                    self.pointCloudConfiguration.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRUCT:
                    self.pointCloud = Context.ttypes.PointCloud()
                    self.pointCloud.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ContextPointCloudData')
        if self.componentId is not None:
            oprot.writeFieldBegin('componentId', TType.STRUCT, 1)
            self.componentId.write(oprot)
            oprot.writeFieldEnd()
        if self.timeStamp is not None:
            oprot.writeFieldBegin('timeStamp', TType.I64, 2)
            oprot.writeI64(self.timeStamp)
            oprot.writeFieldEnd()
        if self.health is not None:
            oprot.writeFieldBegin('health', TType.I32, 3)
            oprot.writeI32(self.health)
            oprot.writeFieldEnd()
        if self.sensorTimeStamp is not None:
            oprot.writeFieldBegin('sensorTimeStamp', TType.I64, 4)
            oprot.writeI64(self.sensorTimeStamp)
            oprot.writeFieldEnd()
        if self.syncFrame is not None:
            oprot.writeFieldBegin('syncFrame', TType.I64, 5)
            oprot.writeI64(self.syncFrame)
            oprot.writeFieldEnd()
        if self.pointCloudConfiguration is not None:
            oprot.writeFieldBegin('pointCloudConfiguration', TType.STRUCT, 6)
            self.pointCloudConfiguration.write(oprot)
            oprot.writeFieldEnd()
        if self.pointCloud is not None:
            oprot.writeFieldBegin('pointCloud', TType.STRUCT, 7)
            self.pointCloud.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ContextVoxelData(object):
    """
    Attributes:
     - componentId
     - timeStamp
     - health
     - sensorTimeStamp: Used to synchronize time between context sensor and PTU time in the case of an offset
     - voxelConfiguration: Only send if configuration has changed
     - voxelMap: 3D Voxel Map
    """


    def __init__(self, componentId=None, timeStamp=None, health=None, sensorTimeStamp=None, voxelConfiguration=None, voxelMap=None,):
        self.componentId = componentId
        self.timeStamp = timeStamp
        self.health = health
        self.sensorTimeStamp = sensorTimeStamp
        self.voxelConfiguration = voxelConfiguration
        self.voxelMap = voxelMap

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.componentId = UUID.ttypes.UUID()
                    self.componentId.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.timeStamp = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.health = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.sensorTimeStamp = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.voxelConfiguration = Context3DConfiguration()
                    self.voxelConfiguration.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.voxelMap = Context.ttypes.VoxelMap()
                    self.voxelMap.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ContextVoxelData')
        if self.componentId is not None:
            oprot.writeFieldBegin('componentId', TType.STRUCT, 1)
            self.componentId.write(oprot)
            oprot.writeFieldEnd()
        if self.timeStamp is not None:
            oprot.writeFieldBegin('timeStamp', TType.I64, 2)
            oprot.writeI64(self.timeStamp)
            oprot.writeFieldEnd()
        if self.health is not None:
            oprot.writeFieldBegin('health', TType.I32, 3)
            oprot.writeI32(self.health)
            oprot.writeFieldEnd()
        if self.sensorTimeStamp is not None:
            oprot.writeFieldBegin('sensorTimeStamp', TType.I64, 4)
            oprot.writeI64(self.sensorTimeStamp)
            oprot.writeFieldEnd()
        if self.voxelConfiguration is not None:
            oprot.writeFieldBegin('voxelConfiguration', TType.STRUCT, 5)
            self.voxelConfiguration.write(oprot)
            oprot.writeFieldEnd()
        if self.voxelMap is not None:
            oprot.writeFieldBegin('voxelMap', TType.STRUCT, 6)
            self.voxelMap.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ContextMeshData(object):
    """
    Attributes:
     - componentId
     - timeStamp
     - health
     - sensorTimeStamp: Used to synchronize time between context sensor and PTU time in the case of an offset
     - meshConfiguration: Only send if configuration has changed
     - mesh: Batch produced with start and stop
    """


    def __init__(self, componentId=None, timeStamp=None, health=None, sensorTimeStamp=None, meshConfiguration=None, mesh=None,):
        self.componentId = componentId
        self.timeStamp = timeStamp
        self.health = health
        self.sensorTimeStamp = sensorTimeStamp
        self.meshConfiguration = meshConfiguration
        self.mesh = mesh

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.componentId = UUID.ttypes.UUID()
                    self.componentId.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.timeStamp = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.health = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.sensorTimeStamp = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.meshConfiguration = Context3DConfiguration()
                    self.meshConfiguration.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.mesh = Context.ttypes.Mesh()
                    self.mesh.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ContextMeshData')
        if self.componentId is not None:
            oprot.writeFieldBegin('componentId', TType.STRUCT, 1)
            self.componentId.write(oprot)
            oprot.writeFieldEnd()
        if self.timeStamp is not None:
            oprot.writeFieldBegin('timeStamp', TType.I64, 2)
            oprot.writeI64(self.timeStamp)
            oprot.writeFieldEnd()
        if self.health is not None:
            oprot.writeFieldBegin('health', TType.I32, 3)
            oprot.writeI32(self.health)
            oprot.writeFieldEnd()
        if self.sensorTimeStamp is not None:
            oprot.writeFieldBegin('sensorTimeStamp', TType.I64, 4)
            oprot.writeI64(self.sensorTimeStamp)
            oprot.writeFieldEnd()
        if self.meshConfiguration is not None:
            oprot.writeFieldBegin('meshConfiguration', TType.STRUCT, 5)
            self.meshConfiguration.write(oprot)
            oprot.writeFieldEnd()
        if self.mesh is not None:
            oprot.writeFieldBegin('mesh', TType.STRUCT, 6)
            self.mesh.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(ContextVideoConfiguration)
ContextVideoConfiguration.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'componentId', [UUID.ttypes.UUID, None], None, ),  # 1
    (2, TType.STRING, 'fileName', 'UTF8', None, ),  # 2
    (3, TType.DOUBLE, 'framesPerSecond', None, None, ),  # 3
    (4, TType.DOUBLE, 'verticalResolution', None, None, ),  # 4
    (5, TType.DOUBLE, 'horizontalResolution', None, None, ),  # 5
    (6, TType.STRUCT, 'componentPositionAndOrientation', [ComponentLocation.ttypes.GridPositionAndOrientation, None], None, ),  # 6
)
all_structs.append(ContextVideoDefinition)
ContextVideoDefinition.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'componentId', [UUID.ttypes.UUID, None], None, ),  # 1
    (2, TType.STRING, 'componentName', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'vendorName', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'serialNumber', 'UTF8', None, ),  # 4
    (5, TType.STRUCT, 'videoConfiguration', [ContextVideoConfiguration, None], None, ),  # 5
)
all_structs.append(ContextVideoData)
ContextVideoData.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'componentId', [UUID.ttypes.UUID, None], None, ),  # 1
    (2, TType.I64, 'timeStamp', None, None, ),  # 2
    (3, TType.I32, 'health', None, None, ),  # 3
    (4, TType.I64, 'sensorTimeStamp', None, None, ),  # 4
    (5, TType.STRUCT, 'contextVideoConfiguration', [ContextVideoConfiguration, None], None, ),  # 5
    (6, TType.STRING, 'cameraImage', 'BINARY', None, ),  # 6
)
all_structs.append(Context3DConfiguration)
Context3DConfiguration.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'componentId', [UUID.ttypes.UUID, None], None, ),  # 1
    (2, TType.STRUCT, 'componentPositionAndOrientation', [ComponentLocation.ttypes.GridPositionAndOrientation, None], None, ),  # 2
)
all_structs.append(Context3DDefinition)
Context3DDefinition.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'componentId', [UUID.ttypes.UUID, None], None, ),  # 1
    (2, TType.STRING, 'componentName', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'vendorName', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'serialNumber', 'UTF8', None, ),  # 4
    None,  # 5
    None,  # 6
    None,  # 7
    None,  # 8
    None,  # 9
    None,  # 10
    (11, TType.STRUCT, 'configuration', [Context3DConfiguration, None], None, ),  # 11
)
all_structs.append(ContextPointCloudData)
ContextPointCloudData.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'componentId', [UUID.ttypes.UUID, None], None, ),  # 1
    (2, TType.I64, 'timeStamp', None, None, ),  # 2
    (3, TType.I32, 'health', None, None, ),  # 3
    (4, TType.I64, 'sensorTimeStamp', None, None, ),  # 4
    (5, TType.I64, 'syncFrame', None, None, ),  # 5
    (6, TType.STRUCT, 'pointCloudConfiguration', [Context3DConfiguration, None], None, ),  # 6
    (7, TType.STRUCT, 'pointCloud', [Context.ttypes.PointCloud, None], None, ),  # 7
)
all_structs.append(ContextVoxelData)
ContextVoxelData.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'componentId', [UUID.ttypes.UUID, None], None, ),  # 1
    (2, TType.I64, 'timeStamp', None, None, ),  # 2
    (3, TType.I32, 'health', None, None, ),  # 3
    (4, TType.I64, 'sensorTimeStamp', None, None, ),  # 4
    (5, TType.STRUCT, 'voxelConfiguration', [Context3DConfiguration, None], None, ),  # 5
    (6, TType.STRUCT, 'voxelMap', [Context.ttypes.VoxelMap, None], None, ),  # 6
)
all_structs.append(ContextMeshData)
ContextMeshData.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'componentId', [UUID.ttypes.UUID, None], None, ),  # 1
    (2, TType.I64, 'timeStamp', None, None, ),  # 2
    (3, TType.I32, 'health', None, None, ),  # 3
    (4, TType.I64, 'sensorTimeStamp', None, None, ),  # 4
    (5, TType.STRUCT, 'meshConfiguration', [Context3DConfiguration, None], None, ),  # 5
    (6, TType.STRUCT, 'mesh', [Context.ttypes.Mesh, None], None, ),  # 6
)
fix_spec(all_structs)
del all_structs
