#
# Autogenerated by Thrift Compiler (1.0.0-dev)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys

from thrift.transport import TTransport
all_structs = []


class PointCloudData(object):
    """
    Attributes:
     - x
     - y
     - z
     - divisor
     - red
     - green
     - blue
     - intensity
    """


    def __init__(self, x=None, y=None, z=None, divisor=None, red=None, green=None, blue=None, intensity=None,):
        self.x = x
        self.y = y
        self.z = z
        self.divisor = divisor
        self.red = red
        self.green = green
        self.blue = blue
        self.intensity = intensity

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.x = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = iprot.readI32()
                        self.x.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.y = []
                    (_etype9, _size6) = iprot.readListBegin()
                    for _i10 in range(_size6):
                        _elem11 = iprot.readI32()
                        self.y.append(_elem11)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.z = []
                    (_etype15, _size12) = iprot.readListBegin()
                    for _i16 in range(_size12):
                        _elem17 = iprot.readI32()
                        self.z.append(_elem17)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.DOUBLE:
                    self.divisor = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.LIST:
                    self.red = []
                    (_etype21, _size18) = iprot.readListBegin()
                    for _i22 in range(_size18):
                        _elem23 = iprot.readI16()
                        self.red.append(_elem23)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.LIST:
                    self.green = []
                    (_etype27, _size24) = iprot.readListBegin()
                    for _i28 in range(_size24):
                        _elem29 = iprot.readI16()
                        self.green.append(_elem29)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.LIST:
                    self.blue = []
                    (_etype33, _size30) = iprot.readListBegin()
                    for _i34 in range(_size30):
                        _elem35 = iprot.readI16()
                        self.blue.append(_elem35)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.LIST:
                    self.intensity = []
                    (_etype39, _size36) = iprot.readListBegin()
                    for _i40 in range(_size36):
                        _elem41 = iprot.readI16()
                        self.intensity.append(_elem41)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('PointCloudData')
        if self.x is not None:
            oprot.writeFieldBegin('x', TType.LIST, 1)
            oprot.writeListBegin(TType.I32, len(self.x))
            for iter42 in self.x:
                oprot.writeI32(iter42)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.y is not None:
            oprot.writeFieldBegin('y', TType.LIST, 2)
            oprot.writeListBegin(TType.I32, len(self.y))
            for iter43 in self.y:
                oprot.writeI32(iter43)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.z is not None:
            oprot.writeFieldBegin('z', TType.LIST, 3)
            oprot.writeListBegin(TType.I32, len(self.z))
            for iter44 in self.z:
                oprot.writeI32(iter44)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.divisor is not None:
            oprot.writeFieldBegin('divisor', TType.DOUBLE, 4)
            oprot.writeDouble(self.divisor)
            oprot.writeFieldEnd()
        if self.red is not None:
            oprot.writeFieldBegin('red', TType.LIST, 5)
            oprot.writeListBegin(TType.I16, len(self.red))
            for iter45 in self.red:
                oprot.writeI16(iter45)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.green is not None:
            oprot.writeFieldBegin('green', TType.LIST, 6)
            oprot.writeListBegin(TType.I16, len(self.green))
            for iter46 in self.green:
                oprot.writeI16(iter46)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.blue is not None:
            oprot.writeFieldBegin('blue', TType.LIST, 7)
            oprot.writeListBegin(TType.I16, len(self.blue))
            for iter47 in self.blue:
                oprot.writeI16(iter47)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.intensity is not None:
            oprot.writeFieldBegin('intensity', TType.LIST, 8)
            oprot.writeListBegin(TType.I16, len(self.intensity))
            for iter48 in self.intensity:
                oprot.writeI16(iter48)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class PointCloud(object):
    """
    Attributes:
     - pointData
     - originX
     - originY
     - originZ
     - originLat
     - originLon
     - originAlt
     - heading
    """


    def __init__(self, pointData=None, originX=None, originY=None, originZ=None, originLat=None, originLon=None, originAlt=None, heading=None,):
        self.pointData = pointData
        self.originX = originX
        self.originY = originY
        self.originZ = originZ
        self.originLat = originLat
        self.originLon = originLon
        self.originAlt = originAlt
        self.heading = heading

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.pointData = PointCloudData()
                    self.pointData.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.DOUBLE:
                    self.originX = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.DOUBLE:
                    self.originY = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.DOUBLE:
                    self.originZ = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.DOUBLE:
                    self.originLat = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.DOUBLE:
                    self.originLon = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.DOUBLE:
                    self.originAlt = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.DOUBLE:
                    self.heading = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('PointCloud')
        if self.pointData is not None:
            oprot.writeFieldBegin('pointData', TType.STRUCT, 1)
            self.pointData.write(oprot)
            oprot.writeFieldEnd()
        if self.originX is not None:
            oprot.writeFieldBegin('originX', TType.DOUBLE, 2)
            oprot.writeDouble(self.originX)
            oprot.writeFieldEnd()
        if self.originY is not None:
            oprot.writeFieldBegin('originY', TType.DOUBLE, 3)
            oprot.writeDouble(self.originY)
            oprot.writeFieldEnd()
        if self.originZ is not None:
            oprot.writeFieldBegin('originZ', TType.DOUBLE, 4)
            oprot.writeDouble(self.originZ)
            oprot.writeFieldEnd()
        if self.originLat is not None:
            oprot.writeFieldBegin('originLat', TType.DOUBLE, 5)
            oprot.writeDouble(self.originLat)
            oprot.writeFieldEnd()
        if self.originLon is not None:
            oprot.writeFieldBegin('originLon', TType.DOUBLE, 6)
            oprot.writeDouble(self.originLon)
            oprot.writeFieldEnd()
        if self.originAlt is not None:
            oprot.writeFieldBegin('originAlt', TType.DOUBLE, 7)
            oprot.writeDouble(self.originAlt)
            oprot.writeFieldEnd()
        if self.heading is not None:
            oprot.writeFieldBegin('heading', TType.DOUBLE, 8)
            oprot.writeDouble(self.heading)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class VoxelMapData(object):
    """
    Attributes:
     - x
     - y
     - z
     - red
     - green
     - blue
     - intensity
    """


    def __init__(self, x=None, y=None, z=None, red=None, green=None, blue=None, intensity=None,):
        self.x = x
        self.y = y
        self.z = z
        self.red = red
        self.green = green
        self.blue = blue
        self.intensity = intensity

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.x = []
                    (_etype52, _size49) = iprot.readListBegin()
                    for _i53 in range(_size49):
                        _elem54 = iprot.readI32()
                        self.x.append(_elem54)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.y = []
                    (_etype58, _size55) = iprot.readListBegin()
                    for _i59 in range(_size55):
                        _elem60 = iprot.readI32()
                        self.y.append(_elem60)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.z = []
                    (_etype64, _size61) = iprot.readListBegin()
                    for _i65 in range(_size61):
                        _elem66 = iprot.readI32()
                        self.z.append(_elem66)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.red = []
                    (_etype70, _size67) = iprot.readListBegin()
                    for _i71 in range(_size67):
                        _elem72 = iprot.readI16()
                        self.red.append(_elem72)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.LIST:
                    self.green = []
                    (_etype76, _size73) = iprot.readListBegin()
                    for _i77 in range(_size73):
                        _elem78 = iprot.readI16()
                        self.green.append(_elem78)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.LIST:
                    self.blue = []
                    (_etype82, _size79) = iprot.readListBegin()
                    for _i83 in range(_size79):
                        _elem84 = iprot.readI16()
                        self.blue.append(_elem84)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.LIST:
                    self.intensity = []
                    (_etype88, _size85) = iprot.readListBegin()
                    for _i89 in range(_size85):
                        _elem90 = iprot.readI16()
                        self.intensity.append(_elem90)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('VoxelMapData')
        if self.x is not None:
            oprot.writeFieldBegin('x', TType.LIST, 1)
            oprot.writeListBegin(TType.I32, len(self.x))
            for iter91 in self.x:
                oprot.writeI32(iter91)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.y is not None:
            oprot.writeFieldBegin('y', TType.LIST, 2)
            oprot.writeListBegin(TType.I32, len(self.y))
            for iter92 in self.y:
                oprot.writeI32(iter92)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.z is not None:
            oprot.writeFieldBegin('z', TType.LIST, 3)
            oprot.writeListBegin(TType.I32, len(self.z))
            for iter93 in self.z:
                oprot.writeI32(iter93)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.red is not None:
            oprot.writeFieldBegin('red', TType.LIST, 4)
            oprot.writeListBegin(TType.I16, len(self.red))
            for iter94 in self.red:
                oprot.writeI16(iter94)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.green is not None:
            oprot.writeFieldBegin('green', TType.LIST, 5)
            oprot.writeListBegin(TType.I16, len(self.green))
            for iter95 in self.green:
                oprot.writeI16(iter95)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.blue is not None:
            oprot.writeFieldBegin('blue', TType.LIST, 6)
            oprot.writeListBegin(TType.I16, len(self.blue))
            for iter96 in self.blue:
                oprot.writeI16(iter96)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.intensity is not None:
            oprot.writeFieldBegin('intensity', TType.LIST, 7)
            oprot.writeListBegin(TType.I16, len(self.intensity))
            for iter97 in self.intensity:
                oprot.writeI16(iter97)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class VoxelMap(object):
    """
    Attributes:
     - sizeX
     - sizeY
     - sizeZ
     - edgeLength
     - voxelData
     - originX
     - originY
     - originZ
     - originLat
     - originLon
     - originAlt
     - heading
    """


    def __init__(self, sizeX=None, sizeY=None, sizeZ=None, edgeLength=None, voxelData=None, originX=None, originY=None, originZ=None, originLat=None, originLon=None, originAlt=None, heading=None,):
        self.sizeX = sizeX
        self.sizeY = sizeY
        self.sizeZ = sizeZ
        self.edgeLength = edgeLength
        self.voxelData = voxelData
        self.originX = originX
        self.originY = originY
        self.originZ = originZ
        self.originLat = originLat
        self.originLon = originLon
        self.originAlt = originAlt
        self.heading = heading

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.sizeX = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.sizeY = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.sizeZ = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.DOUBLE:
                    self.edgeLength = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.voxelData = VoxelMapData()
                    self.voxelData.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.DOUBLE:
                    self.originX = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.DOUBLE:
                    self.originY = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.DOUBLE:
                    self.originZ = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.DOUBLE:
                    self.originLat = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.DOUBLE:
                    self.originLon = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.DOUBLE:
                    self.originAlt = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.DOUBLE:
                    self.heading = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('VoxelMap')
        if self.sizeX is not None:
            oprot.writeFieldBegin('sizeX', TType.I32, 1)
            oprot.writeI32(self.sizeX)
            oprot.writeFieldEnd()
        if self.sizeY is not None:
            oprot.writeFieldBegin('sizeY', TType.I32, 2)
            oprot.writeI32(self.sizeY)
            oprot.writeFieldEnd()
        if self.sizeZ is not None:
            oprot.writeFieldBegin('sizeZ', TType.I32, 3)
            oprot.writeI32(self.sizeZ)
            oprot.writeFieldEnd()
        if self.edgeLength is not None:
            oprot.writeFieldBegin('edgeLength', TType.DOUBLE, 4)
            oprot.writeDouble(self.edgeLength)
            oprot.writeFieldEnd()
        if self.voxelData is not None:
            oprot.writeFieldBegin('voxelData', TType.STRUCT, 5)
            self.voxelData.write(oprot)
            oprot.writeFieldEnd()
        if self.originX is not None:
            oprot.writeFieldBegin('originX', TType.DOUBLE, 6)
            oprot.writeDouble(self.originX)
            oprot.writeFieldEnd()
        if self.originY is not None:
            oprot.writeFieldBegin('originY', TType.DOUBLE, 7)
            oprot.writeDouble(self.originY)
            oprot.writeFieldEnd()
        if self.originZ is not None:
            oprot.writeFieldBegin('originZ', TType.DOUBLE, 8)
            oprot.writeDouble(self.originZ)
            oprot.writeFieldEnd()
        if self.originLat is not None:
            oprot.writeFieldBegin('originLat', TType.DOUBLE, 9)
            oprot.writeDouble(self.originLat)
            oprot.writeFieldEnd()
        if self.originLon is not None:
            oprot.writeFieldBegin('originLon', TType.DOUBLE, 10)
            oprot.writeDouble(self.originLon)
            oprot.writeFieldEnd()
        if self.originAlt is not None:
            oprot.writeFieldBegin('originAlt', TType.DOUBLE, 11)
            oprot.writeDouble(self.originAlt)
            oprot.writeFieldEnd()
        if self.heading is not None:
            oprot.writeFieldBegin('heading', TType.DOUBLE, 12)
            oprot.writeDouble(self.heading)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class VertexData(object):
    """
    Attributes:
     - x
     - y
     - z
     - divisor
    """


    def __init__(self, x=None, y=None, z=None, divisor=None,):
        self.x = x
        self.y = y
        self.z = z
        self.divisor = divisor

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.x = []
                    (_etype101, _size98) = iprot.readListBegin()
                    for _i102 in range(_size98):
                        _elem103 = iprot.readI32()
                        self.x.append(_elem103)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.y = []
                    (_etype107, _size104) = iprot.readListBegin()
                    for _i108 in range(_size104):
                        _elem109 = iprot.readI32()
                        self.y.append(_elem109)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.z = []
                    (_etype113, _size110) = iprot.readListBegin()
                    for _i114 in range(_size110):
                        _elem115 = iprot.readI32()
                        self.z.append(_elem115)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.DOUBLE:
                    self.divisor = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('VertexData')
        if self.x is not None:
            oprot.writeFieldBegin('x', TType.LIST, 1)
            oprot.writeListBegin(TType.I32, len(self.x))
            for iter116 in self.x:
                oprot.writeI32(iter116)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.y is not None:
            oprot.writeFieldBegin('y', TType.LIST, 2)
            oprot.writeListBegin(TType.I32, len(self.y))
            for iter117 in self.y:
                oprot.writeI32(iter117)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.z is not None:
            oprot.writeFieldBegin('z', TType.LIST, 3)
            oprot.writeListBegin(TType.I32, len(self.z))
            for iter118 in self.z:
                oprot.writeI32(iter118)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.divisor is not None:
            oprot.writeFieldBegin('divisor', TType.DOUBLE, 4)
            oprot.writeDouble(self.divisor)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TriangleVertexData(object):
    """
    Attributes:
     - vertexIndex
     - textureU
     - textureV
     - divisor
    """


    def __init__(self, vertexIndex=None, textureU=None, textureV=None, divisor=None,):
        self.vertexIndex = vertexIndex
        self.textureU = textureU
        self.textureV = textureV
        self.divisor = divisor

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.vertexIndex = []
                    (_etype122, _size119) = iprot.readListBegin()
                    for _i123 in range(_size119):
                        _elem124 = iprot.readI32()
                        self.vertexIndex.append(_elem124)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.textureU = []
                    (_etype128, _size125) = iprot.readListBegin()
                    for _i129 in range(_size125):
                        _elem130 = iprot.readI32()
                        self.textureU.append(_elem130)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.textureV = []
                    (_etype134, _size131) = iprot.readListBegin()
                    for _i135 in range(_size131):
                        _elem136 = iprot.readI32()
                        self.textureV.append(_elem136)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.DOUBLE:
                    self.divisor = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TriangleVertexData')
        if self.vertexIndex is not None:
            oprot.writeFieldBegin('vertexIndex', TType.LIST, 1)
            oprot.writeListBegin(TType.I32, len(self.vertexIndex))
            for iter137 in self.vertexIndex:
                oprot.writeI32(iter137)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.textureU is not None:
            oprot.writeFieldBegin('textureU', TType.LIST, 2)
            oprot.writeListBegin(TType.I32, len(self.textureU))
            for iter138 in self.textureU:
                oprot.writeI32(iter138)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.textureV is not None:
            oprot.writeFieldBegin('textureV', TType.LIST, 3)
            oprot.writeListBegin(TType.I32, len(self.textureV))
            for iter139 in self.textureV:
                oprot.writeI32(iter139)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.divisor is not None:
            oprot.writeFieldBegin('divisor', TType.DOUBLE, 4)
            oprot.writeDouble(self.divisor)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TriangleData(object):
    """
    Attributes:
     - vertex1
     - vertex2
     - vertex3
     - red
     - green
     - blue
     - intensity
    """


    def __init__(self, vertex1=None, vertex2=None, vertex3=None, red=None, green=None, blue=None, intensity=None,):
        self.vertex1 = vertex1
        self.vertex2 = vertex2
        self.vertex3 = vertex3
        self.red = red
        self.green = green
        self.blue = blue
        self.intensity = intensity

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.vertex1 = TriangleVertexData()
                    self.vertex1.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.vertex2 = TriangleVertexData()
                    self.vertex2.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.vertex3 = TriangleVertexData()
                    self.vertex3.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.LIST:
                    self.red = []
                    (_etype143, _size140) = iprot.readListBegin()
                    for _i144 in range(_size140):
                        _elem145 = iprot.readI16()
                        self.red.append(_elem145)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.LIST:
                    self.green = []
                    (_etype149, _size146) = iprot.readListBegin()
                    for _i150 in range(_size146):
                        _elem151 = iprot.readI16()
                        self.green.append(_elem151)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.LIST:
                    self.blue = []
                    (_etype155, _size152) = iprot.readListBegin()
                    for _i156 in range(_size152):
                        _elem157 = iprot.readI16()
                        self.blue.append(_elem157)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.LIST:
                    self.intensity = []
                    (_etype161, _size158) = iprot.readListBegin()
                    for _i162 in range(_size158):
                        _elem163 = iprot.readI16()
                        self.intensity.append(_elem163)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TriangleData')
        if self.vertex1 is not None:
            oprot.writeFieldBegin('vertex1', TType.STRUCT, 1)
            self.vertex1.write(oprot)
            oprot.writeFieldEnd()
        if self.vertex2 is not None:
            oprot.writeFieldBegin('vertex2', TType.STRUCT, 2)
            self.vertex2.write(oprot)
            oprot.writeFieldEnd()
        if self.vertex3 is not None:
            oprot.writeFieldBegin('vertex3', TType.STRUCT, 3)
            self.vertex3.write(oprot)
            oprot.writeFieldEnd()
        if self.red is not None:
            oprot.writeFieldBegin('red', TType.LIST, 6)
            oprot.writeListBegin(TType.I16, len(self.red))
            for iter164 in self.red:
                oprot.writeI16(iter164)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.green is not None:
            oprot.writeFieldBegin('green', TType.LIST, 7)
            oprot.writeListBegin(TType.I16, len(self.green))
            for iter165 in self.green:
                oprot.writeI16(iter165)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.blue is not None:
            oprot.writeFieldBegin('blue', TType.LIST, 8)
            oprot.writeListBegin(TType.I16, len(self.blue))
            for iter166 in self.blue:
                oprot.writeI16(iter166)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.intensity is not None:
            oprot.writeFieldBegin('intensity', TType.LIST, 9)
            oprot.writeListBegin(TType.I16, len(self.intensity))
            for iter167 in self.intensity:
                oprot.writeI16(iter167)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class MeshData(object):
    """
    Attributes:
     - vertices
     - triangles
    """


    def __init__(self, vertices=None, triangles=None,):
        self.vertices = vertices
        self.triangles = triangles

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.vertices = VertexData()
                    self.vertices.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.triangles = TriangleData()
                    self.triangles.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('MeshData')
        if self.vertices is not None:
            oprot.writeFieldBegin('vertices', TType.STRUCT, 1)
            self.vertices.write(oprot)
            oprot.writeFieldEnd()
        if self.triangles is not None:
            oprot.writeFieldBegin('triangles', TType.STRUCT, 2)
            self.triangles.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Mesh(object):
    """
    Attributes:
     - meshData
     - texture
     - originX
     - originY
     - originZ
     - originLat
     - originLon
     - originAlt
     - heading
    """


    def __init__(self, meshData=None, texture=None, originX=None, originY=None, originZ=None, originLat=None, originLon=None, originAlt=None, heading=None,):
        self.meshData = meshData
        self.texture = texture
        self.originX = originX
        self.originY = originY
        self.originZ = originZ
        self.originLat = originLat
        self.originLon = originLon
        self.originAlt = originAlt
        self.heading = heading

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.meshData = MeshData()
                    self.meshData.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.texture = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.DOUBLE:
                    self.originX = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.DOUBLE:
                    self.originY = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.DOUBLE:
                    self.originZ = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.DOUBLE:
                    self.originLat = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.DOUBLE:
                    self.originLon = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.DOUBLE:
                    self.originAlt = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.DOUBLE:
                    self.heading = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Mesh')
        if self.meshData is not None:
            oprot.writeFieldBegin('meshData', TType.STRUCT, 1)
            self.meshData.write(oprot)
            oprot.writeFieldEnd()
        if self.texture is not None:
            oprot.writeFieldBegin('texture', TType.STRING, 2)
            oprot.writeBinary(self.texture)
            oprot.writeFieldEnd()
        if self.originX is not None:
            oprot.writeFieldBegin('originX', TType.DOUBLE, 3)
            oprot.writeDouble(self.originX)
            oprot.writeFieldEnd()
        if self.originY is not None:
            oprot.writeFieldBegin('originY', TType.DOUBLE, 4)
            oprot.writeDouble(self.originY)
            oprot.writeFieldEnd()
        if self.originZ is not None:
            oprot.writeFieldBegin('originZ', TType.DOUBLE, 5)
            oprot.writeDouble(self.originZ)
            oprot.writeFieldEnd()
        if self.originLat is not None:
            oprot.writeFieldBegin('originLat', TType.DOUBLE, 6)
            oprot.writeDouble(self.originLat)
            oprot.writeFieldEnd()
        if self.originLon is not None:
            oprot.writeFieldBegin('originLon', TType.DOUBLE, 7)
            oprot.writeDouble(self.originLon)
            oprot.writeFieldEnd()
        if self.originAlt is not None:
            oprot.writeFieldBegin('originAlt', TType.DOUBLE, 8)
            oprot.writeDouble(self.originAlt)
            oprot.writeFieldEnd()
        if self.heading is not None:
            oprot.writeFieldBegin('heading', TType.DOUBLE, 9)
            oprot.writeDouble(self.heading)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class VelodyneDataBlock(object):
    """
    Attributes:
     - azimuth
     - distance
     - reflectance
    """


    def __init__(self, azimuth=None, distance=None, reflectance=None,):
        self.azimuth = azimuth
        self.distance = distance
        self.reflectance = reflectance

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.azimuth = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.distance = []
                    (_etype171, _size168) = iprot.readListBegin()
                    for _i172 in range(_size168):
                        _elem173 = iprot.readI32()
                        self.distance.append(_elem173)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.reflectance = []
                    (_etype177, _size174) = iprot.readListBegin()
                    for _i178 in range(_size174):
                        _elem179 = iprot.readI16()
                        self.reflectance.append(_elem179)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('VelodyneDataBlock')
        if self.azimuth is not None:
            oprot.writeFieldBegin('azimuth', TType.I32, 1)
            oprot.writeI32(self.azimuth)
            oprot.writeFieldEnd()
        if self.distance is not None:
            oprot.writeFieldBegin('distance', TType.LIST, 2)
            oprot.writeListBegin(TType.I32, len(self.distance))
            for iter180 in self.distance:
                oprot.writeI32(iter180)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.reflectance is not None:
            oprot.writeFieldBegin('reflectance', TType.LIST, 3)
            oprot.writeListBegin(TType.I16, len(self.reflectance))
            for iter181 in self.reflectance:
                oprot.writeI16(iter181)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class VelodyneDataPacket(object):
    """
    Attributes:
     - timeStampUs
     - dataBlocks
     - factory
     - receivedTime
    """


    def __init__(self, timeStampUs=None, dataBlocks=None, factory=None, receivedTime=None,):
        self.timeStampUs = timeStampUs
        self.dataBlocks = dataBlocks
        self.factory = factory
        self.receivedTime = receivedTime

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.timeStampUs = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.dataBlocks = []
                    (_etype185, _size182) = iprot.readListBegin()
                    for _i186 in range(_size182):
                        _elem187 = VelodyneDataBlock()
                        _elem187.read(iprot)
                        self.dataBlocks.append(_elem187)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.factory = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.receivedTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('VelodyneDataPacket')
        if self.timeStampUs is not None:
            oprot.writeFieldBegin('timeStampUs', TType.I64, 1)
            oprot.writeI64(self.timeStampUs)
            oprot.writeFieldEnd()
        if self.dataBlocks is not None:
            oprot.writeFieldBegin('dataBlocks', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.dataBlocks))
            for iter188 in self.dataBlocks:
                iter188.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.factory is not None:
            oprot.writeFieldBegin('factory', TType.I32, 3)
            oprot.writeI32(self.factory)
            oprot.writeFieldEnd()
        if self.receivedTime is not None:
            oprot.writeFieldBegin('receivedTime', TType.I64, 4)
            oprot.writeI64(self.receivedTime)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class VelodyneData(object):
    """
    Attributes:
     - packets
     - elevation
    """


    def __init__(self, packets=None, elevation=None,):
        self.packets = packets
        self.elevation = elevation

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.packets = []
                    (_etype192, _size189) = iprot.readListBegin()
                    for _i193 in range(_size189):
                        _elem194 = VelodyneDataPacket()
                        _elem194.read(iprot)
                        self.packets.append(_elem194)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.elevation = []
                    (_etype198, _size195) = iprot.readListBegin()
                    for _i199 in range(_size195):
                        _elem200 = iprot.readI32()
                        self.elevation.append(_elem200)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('VelodyneData')
        if self.packets is not None:
            oprot.writeFieldBegin('packets', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.packets))
            for iter201 in self.packets:
                iter201.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.elevation is not None:
            oprot.writeFieldBegin('elevation', TType.LIST, 2)
            oprot.writeListBegin(TType.I32, len(self.elevation))
            for iter202 in self.elevation:
                oprot.writeI32(iter202)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(PointCloudData)
PointCloudData.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'x', (TType.I32, None, False), None, ),  # 1
    (2, TType.LIST, 'y', (TType.I32, None, False), None, ),  # 2
    (3, TType.LIST, 'z', (TType.I32, None, False), None, ),  # 3
    (4, TType.DOUBLE, 'divisor', None, None, ),  # 4
    (5, TType.LIST, 'red', (TType.I16, None, False), None, ),  # 5
    (6, TType.LIST, 'green', (TType.I16, None, False), None, ),  # 6
    (7, TType.LIST, 'blue', (TType.I16, None, False), None, ),  # 7
    (8, TType.LIST, 'intensity', (TType.I16, None, False), None, ),  # 8
)
all_structs.append(PointCloud)
PointCloud.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'pointData', [PointCloudData, None], None, ),  # 1
    (2, TType.DOUBLE, 'originX', None, None, ),  # 2
    (3, TType.DOUBLE, 'originY', None, None, ),  # 3
    (4, TType.DOUBLE, 'originZ', None, None, ),  # 4
    (5, TType.DOUBLE, 'originLat', None, None, ),  # 5
    (6, TType.DOUBLE, 'originLon', None, None, ),  # 6
    (7, TType.DOUBLE, 'originAlt', None, None, ),  # 7
    (8, TType.DOUBLE, 'heading', None, None, ),  # 8
)
all_structs.append(VoxelMapData)
VoxelMapData.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'x', (TType.I32, None, False), None, ),  # 1
    (2, TType.LIST, 'y', (TType.I32, None, False), None, ),  # 2
    (3, TType.LIST, 'z', (TType.I32, None, False), None, ),  # 3
    (4, TType.LIST, 'red', (TType.I16, None, False), None, ),  # 4
    (5, TType.LIST, 'green', (TType.I16, None, False), None, ),  # 5
    (6, TType.LIST, 'blue', (TType.I16, None, False), None, ),  # 6
    (7, TType.LIST, 'intensity', (TType.I16, None, False), None, ),  # 7
)
all_structs.append(VoxelMap)
VoxelMap.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'sizeX', None, None, ),  # 1
    (2, TType.I32, 'sizeY', None, None, ),  # 2
    (3, TType.I32, 'sizeZ', None, None, ),  # 3
    (4, TType.DOUBLE, 'edgeLength', None, None, ),  # 4
    (5, TType.STRUCT, 'voxelData', [VoxelMapData, None], None, ),  # 5
    (6, TType.DOUBLE, 'originX', None, None, ),  # 6
    (7, TType.DOUBLE, 'originY', None, None, ),  # 7
    (8, TType.DOUBLE, 'originZ', None, None, ),  # 8
    (9, TType.DOUBLE, 'originLat', None, None, ),  # 9
    (10, TType.DOUBLE, 'originLon', None, None, ),  # 10
    (11, TType.DOUBLE, 'originAlt', None, None, ),  # 11
    (12, TType.DOUBLE, 'heading', None, None, ),  # 12
)
all_structs.append(VertexData)
VertexData.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'x', (TType.I32, None, False), None, ),  # 1
    (2, TType.LIST, 'y', (TType.I32, None, False), None, ),  # 2
    (3, TType.LIST, 'z', (TType.I32, None, False), None, ),  # 3
    (4, TType.DOUBLE, 'divisor', None, None, ),  # 4
)
all_structs.append(TriangleVertexData)
TriangleVertexData.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'vertexIndex', (TType.I32, None, False), None, ),  # 1
    (2, TType.LIST, 'textureU', (TType.I32, None, False), None, ),  # 2
    (3, TType.LIST, 'textureV', (TType.I32, None, False), None, ),  # 3
    (4, TType.DOUBLE, 'divisor', None, None, ),  # 4
)
all_structs.append(TriangleData)
TriangleData.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'vertex1', [TriangleVertexData, None], None, ),  # 1
    (2, TType.STRUCT, 'vertex2', [TriangleVertexData, None], None, ),  # 2
    (3, TType.STRUCT, 'vertex3', [TriangleVertexData, None], None, ),  # 3
    None,  # 4
    None,  # 5
    (6, TType.LIST, 'red', (TType.I16, None, False), None, ),  # 6
    (7, TType.LIST, 'green', (TType.I16, None, False), None, ),  # 7
    (8, TType.LIST, 'blue', (TType.I16, None, False), None, ),  # 8
    (9, TType.LIST, 'intensity', (TType.I16, None, False), None, ),  # 9
)
all_structs.append(MeshData)
MeshData.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'vertices', [VertexData, None], None, ),  # 1
    (2, TType.STRUCT, 'triangles', [TriangleData, None], None, ),  # 2
)
all_structs.append(Mesh)
Mesh.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'meshData', [MeshData, None], None, ),  # 1
    (2, TType.STRING, 'texture', 'BINARY', None, ),  # 2
    (3, TType.DOUBLE, 'originX', None, None, ),  # 3
    (4, TType.DOUBLE, 'originY', None, None, ),  # 4
    (5, TType.DOUBLE, 'originZ', None, None, ),  # 5
    (6, TType.DOUBLE, 'originLat', None, None, ),  # 6
    (7, TType.DOUBLE, 'originLon', None, None, ),  # 7
    (8, TType.DOUBLE, 'originAlt', None, None, ),  # 8
    (9, TType.DOUBLE, 'heading', None, None, ),  # 9
)
all_structs.append(VelodyneDataBlock)
VelodyneDataBlock.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'azimuth', None, None, ),  # 1
    (2, TType.LIST, 'distance', (TType.I32, None, False), None, ),  # 2
    (3, TType.LIST, 'reflectance', (TType.I16, None, False), None, ),  # 3
)
all_structs.append(VelodyneDataPacket)
VelodyneDataPacket.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'timeStampUs', None, None, ),  # 1
    (2, TType.LIST, 'dataBlocks', (TType.STRUCT, [VelodyneDataBlock, None], False), None, ),  # 2
    (3, TType.I32, 'factory', None, None, ),  # 3
    (4, TType.I64, 'receivedTime', None, None, ),  # 4
)
all_structs.append(VelodyneData)
VelodyneData.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'packets', (TType.STRUCT, [VelodyneDataPacket, None], False), None, ),  # 1
    (2, TType.LIST, 'elevation', (TType.I32, None, False), None, ),  # 2
)
fix_spec(all_structs)
del all_structs
