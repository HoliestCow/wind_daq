#
# Autogenerated by Thrift Compiler (1.0.0-dev)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys

from thrift.transport import TTransport
all_structs = []


class AngleEfficiencyPair(object):
    """
    Attributes:
     - angle: Angle is counter clockwise from the direction travel (front of person)
     units are radians
     - efficiency: efficiency should be between 0 and 1.
    """


    def __init__(self, angle=None, efficiency=None,):
        self.angle = angle
        self.efficiency = efficiency

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.DOUBLE:
                    self.angle = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.DOUBLE:
                    self.efficiency = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('AngleEfficiencyPair')
        if self.angle is not None:
            oprot.writeFieldBegin('angle', TType.DOUBLE, 1)
            oprot.writeDouble(self.angle)
            oprot.writeFieldEnd()
        if self.efficiency is not None:
            oprot.writeFieldBegin('efficiency', TType.DOUBLE, 2)
            oprot.writeDouble(self.efficiency)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class AngularEfficiencyDefinition(object):
    """
    Angular Efficiency is needed to compute the direction of a source

    Attributes:
     - energy: what energy this applies to
     - efficiency: Polar efficiency map
      - points in between should be interpolated
      - both 0 and 2pi should appear in the list
    """


    def __init__(self, energy=None, efficiency=None,):
        self.energy = energy
        self.efficiency = efficiency

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.DOUBLE:
                    self.energy = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.efficiency = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = AngleEfficiencyPair()
                        _elem5.read(iprot)
                        self.efficiency.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('AngularEfficiencyDefinition')
        if self.energy is not None:
            oprot.writeFieldBegin('energy', TType.DOUBLE, 1)
            oprot.writeDouble(self.energy)
            oprot.writeFieldEnd()
        if self.efficiency is not None:
            oprot.writeFieldBegin('efficiency', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.efficiency))
            for iter6 in self.efficiency:
                iter6.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(AngleEfficiencyPair)
AngleEfficiencyPair.thrift_spec = (
    None,  # 0
    (1, TType.DOUBLE, 'angle', None, None, ),  # 1
    (2, TType.DOUBLE, 'efficiency', None, None, ),  # 2
)
all_structs.append(AngularEfficiencyDefinition)
AngularEfficiencyDefinition.thrift_spec = (
    None,  # 0
    (1, TType.DOUBLE, 'energy', None, None, ),  # 1
    (2, TType.LIST, 'efficiency', (TType.STRUCT, [AngleEfficiencyPair, None], False), None, ),  # 2
)
fix_spec(all_structs)
del all_structs
