#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys
import Health.ttypes
import Context.ttypes
import Component.ttypes
import UUID.ttypes
import Common.ttypes

from thrift.transport import TTransport
all_structs = []


class CameraIntrinsics(object):
    """
    Applies to camera and video
    Optional distortion corrections:  x1=x(1+K1*r^2+K2*r^4+...)+2*P1*x*y+P2*(r^2+2x^2)], r^2=x^2+y^2
    Unit conversion:                  xc=[fx*x1+cx*z]
    The directions of x and y used in the definitions of CameraIntrinsics and ContextVideoConfiguration MUST
    comply with rotations specified within ComponentLocation.

    Attributes:
     - componentId
     - cx
     - cy
     - fx
     - fy
     - RadialDistortionCoefficients
     - TangentialDistortionCoefficients
    """


    def __init__(self, componentId=None, cx=None, cy=None, fx=None, fy=None, RadialDistortionCoefficients=None, TangentialDistortionCoefficients=None,):
        self.componentId = componentId
        self.cx = cx
        self.cy = cy
        self.fx = fx
        self.fy = fy
        self.RadialDistortionCoefficients = RadialDistortionCoefficients
        self.TangentialDistortionCoefficients = TangentialDistortionCoefficients

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.componentId = UUID.ttypes.UUID()
                    self.componentId.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.DOUBLE:
                    self.cx = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.DOUBLE:
                    self.cy = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.DOUBLE:
                    self.fx = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.DOUBLE:
                    self.fy = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.LIST:
                    self.RadialDistortionCoefficients = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = iprot.readDouble()
                        self.RadialDistortionCoefficients.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.LIST:
                    self.TangentialDistortionCoefficients = []
                    (_etype9, _size6) = iprot.readListBegin()
                    for _i10 in range(_size6):
                        _elem11 = iprot.readDouble()
                        self.TangentialDistortionCoefficients.append(_elem11)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('CameraIntrinsics')
        if self.componentId is not None:
            oprot.writeFieldBegin('componentId', TType.STRUCT, 1)
            self.componentId.write(oprot)
            oprot.writeFieldEnd()
        if self.cx is not None:
            oprot.writeFieldBegin('cx', TType.DOUBLE, 2)
            oprot.writeDouble(self.cx)
            oprot.writeFieldEnd()
        if self.cy is not None:
            oprot.writeFieldBegin('cy', TType.DOUBLE, 3)
            oprot.writeDouble(self.cy)
            oprot.writeFieldEnd()
        if self.fx is not None:
            oprot.writeFieldBegin('fx', TType.DOUBLE, 4)
            oprot.writeDouble(self.fx)
            oprot.writeFieldEnd()
        if self.fy is not None:
            oprot.writeFieldBegin('fy', TType.DOUBLE, 5)
            oprot.writeDouble(self.fy)
            oprot.writeFieldEnd()
        if self.RadialDistortionCoefficients is not None:
            oprot.writeFieldBegin('RadialDistortionCoefficients', TType.LIST, 6)
            oprot.writeListBegin(TType.DOUBLE, len(self.RadialDistortionCoefficients))
            for iter12 in self.RadialDistortionCoefficients:
                oprot.writeDouble(iter12)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.TangentialDistortionCoefficients is not None:
            oprot.writeFieldBegin('TangentialDistortionCoefficients', TType.LIST, 7)
            oprot.writeListBegin(TType.DOUBLE, len(self.TangentialDistortionCoefficients))
            for iter13 in self.TangentialDistortionCoefficients:
                oprot.writeDouble(iter13)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ContextVideoConfiguration(object):
    """
    Attributes:
     - componentId
     - fileName
     - framesPerSecond
     - verticalResolution
     - horizontalResolution
     - componentPositionAndOrientation
     - verticalFOV
     - horizontalFOV
     - isRectified
     - isDeBayered
     - intrinsics
     - timeStamp
    """


    def __init__(self, componentId=None, fileName=None, framesPerSecond=None, verticalResolution=None, horizontalResolution=None, componentPositionAndOrientation=None, verticalFOV=None, horizontalFOV=None, isRectified=None, isDeBayered=None, intrinsics=None, timeStamp=None,):
        self.componentId = componentId
        self.fileName = fileName
        self.framesPerSecond = framesPerSecond
        self.verticalResolution = verticalResolution
        self.horizontalResolution = horizontalResolution
        self.componentPositionAndOrientation = componentPositionAndOrientation
        self.verticalFOV = verticalFOV
        self.horizontalFOV = horizontalFOV
        self.isRectified = isRectified
        self.isDeBayered = isDeBayered
        self.intrinsics = intrinsics
        self.timeStamp = timeStamp

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.componentId = UUID.ttypes.UUID()
                    self.componentId.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.fileName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.DOUBLE:
                    self.framesPerSecond = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.DOUBLE:
                    self.verticalResolution = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.DOUBLE:
                    self.horizontalResolution = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.componentPositionAndOrientation = Component.ttypes.GridPositionAndOrientation()
                    self.componentPositionAndOrientation.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.DOUBLE:
                    self.verticalFOV = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.DOUBLE:
                    self.horizontalFOV = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.BOOL:
                    self.isRectified = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.BOOL:
                    self.isDeBayered = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRUCT:
                    self.intrinsics = CameraIntrinsics()
                    self.intrinsics.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.I64:
                    self.timeStamp = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ContextVideoConfiguration')
        if self.componentId is not None:
            oprot.writeFieldBegin('componentId', TType.STRUCT, 1)
            self.componentId.write(oprot)
            oprot.writeFieldEnd()
        if self.fileName is not None:
            oprot.writeFieldBegin('fileName', TType.STRING, 2)
            oprot.writeString(self.fileName.encode('utf-8') if sys.version_info[0] == 2 else self.fileName)
            oprot.writeFieldEnd()
        if self.framesPerSecond is not None:
            oprot.writeFieldBegin('framesPerSecond', TType.DOUBLE, 3)
            oprot.writeDouble(self.framesPerSecond)
            oprot.writeFieldEnd()
        if self.verticalResolution is not None:
            oprot.writeFieldBegin('verticalResolution', TType.DOUBLE, 4)
            oprot.writeDouble(self.verticalResolution)
            oprot.writeFieldEnd()
        if self.horizontalResolution is not None:
            oprot.writeFieldBegin('horizontalResolution', TType.DOUBLE, 5)
            oprot.writeDouble(self.horizontalResolution)
            oprot.writeFieldEnd()
        if self.componentPositionAndOrientation is not None:
            oprot.writeFieldBegin('componentPositionAndOrientation', TType.STRUCT, 6)
            self.componentPositionAndOrientation.write(oprot)
            oprot.writeFieldEnd()
        if self.verticalFOV is not None:
            oprot.writeFieldBegin('verticalFOV', TType.DOUBLE, 7)
            oprot.writeDouble(self.verticalFOV)
            oprot.writeFieldEnd()
        if self.horizontalFOV is not None:
            oprot.writeFieldBegin('horizontalFOV', TType.DOUBLE, 8)
            oprot.writeDouble(self.horizontalFOV)
            oprot.writeFieldEnd()
        if self.isRectified is not None:
            oprot.writeFieldBegin('isRectified', TType.BOOL, 9)
            oprot.writeBool(self.isRectified)
            oprot.writeFieldEnd()
        if self.isDeBayered is not None:
            oprot.writeFieldBegin('isDeBayered', TType.BOOL, 10)
            oprot.writeBool(self.isDeBayered)
            oprot.writeFieldEnd()
        if self.intrinsics is not None:
            oprot.writeFieldBegin('intrinsics', TType.STRUCT, 11)
            self.intrinsics.write(oprot)
            oprot.writeFieldEnd()
        if self.timeStamp is not None:
            oprot.writeFieldBegin('timeStamp', TType.I64, 12)
            oprot.writeI64(self.timeStamp)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ContextVideoDefinition(object):
    """
    Attributes:
     - component
     - videoConfiguration
    """


    def __init__(self, component=None, videoConfiguration=None,):
        self.component = component
        self.videoConfiguration = videoConfiguration

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.component = Component.ttypes.ComponentDefinition()
                    self.component.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.videoConfiguration = ContextVideoConfiguration()
                    self.videoConfiguration.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ContextVideoDefinition')
        if self.component is not None:
            oprot.writeFieldBegin('component', TType.STRUCT, 1)
            self.component.write(oprot)
            oprot.writeFieldEnd()
        if self.videoConfiguration is not None:
            oprot.writeFieldBegin('videoConfiguration', TType.STRUCT, 5)
            self.videoConfiguration.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ContextVideoData(object):
    """
    Attributes:
     - componentId
     - timeStamp
     - health
     - sensorTimeStamp: Used to synchronize time between context sensor and PTU time in the case of an offset
     - contextVideoConfiguration: Only send if configuration has changed
     - cameraImage
    """


    def __init__(self, componentId=None, timeStamp=None, health=None, sensorTimeStamp=None, contextVideoConfiguration=None, cameraImage=None,):
        self.componentId = componentId
        self.timeStamp = timeStamp
        self.health = health
        self.sensorTimeStamp = sensorTimeStamp
        self.contextVideoConfiguration = contextVideoConfiguration
        self.cameraImage = cameraImage

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.componentId = UUID.ttypes.UUID()
                    self.componentId.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.timeStamp = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.health = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.sensorTimeStamp = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.contextVideoConfiguration = ContextVideoConfiguration()
                    self.contextVideoConfiguration.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.cameraImage = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ContextVideoData')
        if self.componentId is not None:
            oprot.writeFieldBegin('componentId', TType.STRUCT, 1)
            self.componentId.write(oprot)
            oprot.writeFieldEnd()
        if self.timeStamp is not None:
            oprot.writeFieldBegin('timeStamp', TType.I64, 2)
            oprot.writeI64(self.timeStamp)
            oprot.writeFieldEnd()
        if self.health is not None:
            oprot.writeFieldBegin('health', TType.I32, 3)
            oprot.writeI32(self.health)
            oprot.writeFieldEnd()
        if self.sensorTimeStamp is not None:
            oprot.writeFieldBegin('sensorTimeStamp', TType.I64, 4)
            oprot.writeI64(self.sensorTimeStamp)
            oprot.writeFieldEnd()
        if self.contextVideoConfiguration is not None:
            oprot.writeFieldBegin('contextVideoConfiguration', TType.STRUCT, 5)
            self.contextVideoConfiguration.write(oprot)
            oprot.writeFieldEnd()
        if self.cameraImage is not None:
            oprot.writeFieldBegin('cameraImage', TType.STRING, 6)
            oprot.writeBinary(self.cameraImage)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Context3DConfiguration(object):
    """
    Attributes:
     - componentId
     - componentPositionAndOrientation
     - timeStamp
    """


    def __init__(self, componentId=None, componentPositionAndOrientation=None, timeStamp=None,):
        self.componentId = componentId
        self.componentPositionAndOrientation = componentPositionAndOrientation
        self.timeStamp = timeStamp

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.componentId = UUID.ttypes.UUID()
                    self.componentId.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.componentPositionAndOrientation = Component.ttypes.GridPositionAndOrientation()
                    self.componentPositionAndOrientation.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.timeStamp = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Context3DConfiguration')
        if self.componentId is not None:
            oprot.writeFieldBegin('componentId', TType.STRUCT, 1)
            self.componentId.write(oprot)
            oprot.writeFieldEnd()
        if self.componentPositionAndOrientation is not None:
            oprot.writeFieldBegin('componentPositionAndOrientation', TType.STRUCT, 2)
            self.componentPositionAndOrientation.write(oprot)
            oprot.writeFieldEnd()
        if self.timeStamp is not None:
            oprot.writeFieldBegin('timeStamp', TType.I64, 3)
            oprot.writeI64(self.timeStamp)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Context3DDefinition(object):
    """
    Attributes:
     - component
     - configuration
    """


    def __init__(self, component=None, configuration=None,):
        self.component = component
        self.configuration = configuration

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.component = Component.ttypes.ComponentDefinition()
                    self.component.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRUCT:
                    self.configuration = Context3DConfiguration()
                    self.configuration.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Context3DDefinition')
        if self.component is not None:
            oprot.writeFieldBegin('component', TType.STRUCT, 1)
            self.component.write(oprot)
            oprot.writeFieldEnd()
        if self.configuration is not None:
            oprot.writeFieldBegin('configuration', TType.STRUCT, 11)
            self.configuration.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ContextPointCloudData(object):
    """
    Attributes:
     - componentId
     - timeStamp
     - health
     - sensorTimeStamp: Used to synchronize time between context sensor and PTU time in the case of an offset
     - syncFrame: For CSS->CMD synchronization
     - pointCloud: 3D Point Cloud
    """


    def __init__(self, componentId=None, timeStamp=None, health=None, sensorTimeStamp=None, syncFrame=None, pointCloud=None,):
        self.componentId = componentId
        self.timeStamp = timeStamp
        self.health = health
        self.sensorTimeStamp = sensorTimeStamp
        self.syncFrame = syncFrame
        self.pointCloud = pointCloud

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.componentId = UUID.ttypes.UUID()
                    self.componentId.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.timeStamp = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.health = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.sensorTimeStamp = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I64:
                    self.syncFrame = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRUCT:
                    self.pointCloud = Context.ttypes.PointCloud()
                    self.pointCloud.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ContextPointCloudData')
        if self.componentId is not None:
            oprot.writeFieldBegin('componentId', TType.STRUCT, 1)
            self.componentId.write(oprot)
            oprot.writeFieldEnd()
        if self.timeStamp is not None:
            oprot.writeFieldBegin('timeStamp', TType.I64, 2)
            oprot.writeI64(self.timeStamp)
            oprot.writeFieldEnd()
        if self.health is not None:
            oprot.writeFieldBegin('health', TType.I32, 3)
            oprot.writeI32(self.health)
            oprot.writeFieldEnd()
        if self.sensorTimeStamp is not None:
            oprot.writeFieldBegin('sensorTimeStamp', TType.I64, 4)
            oprot.writeI64(self.sensorTimeStamp)
            oprot.writeFieldEnd()
        if self.syncFrame is not None:
            oprot.writeFieldBegin('syncFrame', TType.I64, 5)
            oprot.writeI64(self.syncFrame)
            oprot.writeFieldEnd()
        if self.pointCloud is not None:
            oprot.writeFieldBegin('pointCloud', TType.STRUCT, 7)
            self.pointCloud.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ContextVoxelData(object):
    """
    Attributes:
     - componentId
     - timeStamp
     - health
     - sensorTimeStamp: Used to synchronize time between context sensor and PTU time in the case of an offset
     - voxelMap: 3D Voxel Map
    """


    def __init__(self, componentId=None, timeStamp=None, health=None, sensorTimeStamp=None, voxelMap=None,):
        self.componentId = componentId
        self.timeStamp = timeStamp
        self.health = health
        self.sensorTimeStamp = sensorTimeStamp
        self.voxelMap = voxelMap

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.componentId = UUID.ttypes.UUID()
                    self.componentId.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.timeStamp = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.health = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.sensorTimeStamp = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.voxelMap = Context.ttypes.VoxelMap()
                    self.voxelMap.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ContextVoxelData')
        if self.componentId is not None:
            oprot.writeFieldBegin('componentId', TType.STRUCT, 1)
            self.componentId.write(oprot)
            oprot.writeFieldEnd()
        if self.timeStamp is not None:
            oprot.writeFieldBegin('timeStamp', TType.I64, 2)
            oprot.writeI64(self.timeStamp)
            oprot.writeFieldEnd()
        if self.health is not None:
            oprot.writeFieldBegin('health', TType.I32, 3)
            oprot.writeI32(self.health)
            oprot.writeFieldEnd()
        if self.sensorTimeStamp is not None:
            oprot.writeFieldBegin('sensorTimeStamp', TType.I64, 4)
            oprot.writeI64(self.sensorTimeStamp)
            oprot.writeFieldEnd()
        if self.voxelMap is not None:
            oprot.writeFieldBegin('voxelMap', TType.STRUCT, 6)
            self.voxelMap.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ContextMeshData(object):
    """
    Attributes:
     - componentId
     - timeStamp
     - health
     - sensorTimeStamp: Used to synchronize time between context sensor and PTU time in the case of an offset
     - mesh: Batch produced with start and stop
    """


    def __init__(self, componentId=None, timeStamp=None, health=None, sensorTimeStamp=None, mesh=None,):
        self.componentId = componentId
        self.timeStamp = timeStamp
        self.health = health
        self.sensorTimeStamp = sensorTimeStamp
        self.mesh = mesh

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.componentId = UUID.ttypes.UUID()
                    self.componentId.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.timeStamp = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.health = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.sensorTimeStamp = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.mesh = Context.ttypes.Mesh()
                    self.mesh.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ContextMeshData')
        if self.componentId is not None:
            oprot.writeFieldBegin('componentId', TType.STRUCT, 1)
            self.componentId.write(oprot)
            oprot.writeFieldEnd()
        if self.timeStamp is not None:
            oprot.writeFieldBegin('timeStamp', TType.I64, 2)
            oprot.writeI64(self.timeStamp)
            oprot.writeFieldEnd()
        if self.health is not None:
            oprot.writeFieldBegin('health', TType.I32, 3)
            oprot.writeI32(self.health)
            oprot.writeFieldEnd()
        if self.sensorTimeStamp is not None:
            oprot.writeFieldBegin('sensorTimeStamp', TType.I64, 4)
            oprot.writeI64(self.sensorTimeStamp)
            oprot.writeFieldEnd()
        if self.mesh is not None:
            oprot.writeFieldBegin('mesh', TType.STRUCT, 6)
            self.mesh.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class SensorModalityConfiguration(object):
    """
    Attributes:
     - videoConfiguration
     - threeDConfiguration
    """


    def __init__(self, videoConfiguration=None, threeDConfiguration=None,):
        self.videoConfiguration = videoConfiguration
        self.threeDConfiguration = threeDConfiguration

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.videoConfiguration = ContextVideoConfiguration()
                    self.videoConfiguration.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.threeDConfiguration = Context3DConfiguration()
                    self.threeDConfiguration.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('SensorModalityConfiguration')
        if self.videoConfiguration is not None:
            oprot.writeFieldBegin('videoConfiguration', TType.STRUCT, 1)
            self.videoConfiguration.write(oprot)
            oprot.writeFieldEnd()
        if self.threeDConfiguration is not None:
            oprot.writeFieldBegin('threeDConfiguration', TType.STRUCT, 2)
            self.threeDConfiguration.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ContextStreamConfiguration(object):
    """
    ContextStreamConfiguration acts as a wrapper on the existing physical sensor configuration thrift objects
    and allows us to define a stream of video data, a stream of 3D data, etc. without duplicating objects in the
    ICD. This structure allows us to future-proof the ICD; as new sensor modalities get added to the ICD
    (e.g., a future audio sensor), a data stream of that modality could be expressed with this structure. By providing
    a stream configuration wrapper that includes a physical sensor configuration union as opposed to just the union,
    we allow for future stream-specific configuration fields to be added as well.

    Attributes:
     - componentId
     - componentPositionAndOrientation
     - modalityConfiguration
     - timeStamp
    """


    def __init__(self, componentId=None, componentPositionAndOrientation=None, modalityConfiguration=None, timeStamp=None,):
        self.componentId = componentId
        self.componentPositionAndOrientation = componentPositionAndOrientation
        self.modalityConfiguration = modalityConfiguration
        self.timeStamp = timeStamp

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.componentId = UUID.ttypes.UUID()
                    self.componentId.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.componentPositionAndOrientation = Component.ttypes.GridPositionAndOrientation()
                    self.componentPositionAndOrientation.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.modalityConfiguration = SensorModalityConfiguration()
                    self.modalityConfiguration.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.timeStamp = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ContextStreamConfiguration')
        if self.componentId is not None:
            oprot.writeFieldBegin('componentId', TType.STRUCT, 1)
            self.componentId.write(oprot)
            oprot.writeFieldEnd()
        if self.componentPositionAndOrientation is not None:
            oprot.writeFieldBegin('componentPositionAndOrientation', TType.STRUCT, 2)
            self.componentPositionAndOrientation.write(oprot)
            oprot.writeFieldEnd()
        if self.modalityConfiguration is not None:
            oprot.writeFieldBegin('modalityConfiguration', TType.STRUCT, 3)
            self.modalityConfiguration.write(oprot)
            oprot.writeFieldEnd()
        if self.timeStamp is not None:
            oprot.writeFieldBegin('timeStamp', TType.I64, 4)
            oprot.writeI64(self.timeStamp)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ContextStreamDefinition(object):
    """
    ContextStreamDefinition provides a generic way of specifying any
    streaming data source. The definition MUST include the format of the stream,
    a version of that format, the address where it can be accessed, and a URI
    where documentation on how to process the format can be found. One physical
    sensor may produce multiple stream components.

    Attributes:
     - component
     - streamFormat
     - streamAddress
     - formatVersion
     - documentationURI
     - configuration
    """


    def __init__(self, component=None, streamFormat=None, streamAddress=None, formatVersion=None, documentationURI=None, configuration=None,):
        self.component = component
        self.streamFormat = streamFormat
        self.streamAddress = streamAddress
        self.formatVersion = formatVersion
        self.documentationURI = documentationURI
        self.configuration = configuration

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.component = Component.ttypes.ComponentDefinition()
                    self.component.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.streamFormat = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.streamAddress = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.formatVersion = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.documentationURI = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 66:
                if ftype == TType.STRUCT:
                    self.configuration = ContextStreamConfiguration()
                    self.configuration.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ContextStreamDefinition')
        if self.component is not None:
            oprot.writeFieldBegin('component', TType.STRUCT, 1)
            self.component.write(oprot)
            oprot.writeFieldEnd()
        if self.streamFormat is not None:
            oprot.writeFieldBegin('streamFormat', TType.STRING, 2)
            oprot.writeString(self.streamFormat.encode('utf-8') if sys.version_info[0] == 2 else self.streamFormat)
            oprot.writeFieldEnd()
        if self.streamAddress is not None:
            oprot.writeFieldBegin('streamAddress', TType.STRING, 3)
            oprot.writeString(self.streamAddress.encode('utf-8') if sys.version_info[0] == 2 else self.streamAddress)
            oprot.writeFieldEnd()
        if self.formatVersion is not None:
            oprot.writeFieldBegin('formatVersion', TType.STRING, 4)
            oprot.writeString(self.formatVersion.encode('utf-8') if sys.version_info[0] == 2 else self.formatVersion)
            oprot.writeFieldEnd()
        if self.documentationURI is not None:
            oprot.writeFieldBegin('documentationURI', TType.STRING, 5)
            oprot.writeString(self.documentationURI.encode('utf-8') if sys.version_info[0] == 2 else self.documentationURI)
            oprot.writeFieldEnd()
        if self.configuration is not None:
            oprot.writeFieldBegin('configuration', TType.STRUCT, 66)
            self.configuration.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ContextStreamIndexData(object):
    """
    If a stream is live, ContextStreamIndexData for it MUST be provided with each DataPayload and
    provides a mechanism for syncing the current DataPayload timestamp with a
    timestamp in the stream.

    Attributes:
     - componentId
     - timeStamp
     - streamTimeStamp
    """


    def __init__(self, componentId=None, timeStamp=None, streamTimeStamp=None,):
        self.componentId = componentId
        self.timeStamp = timeStamp
        self.streamTimeStamp = streamTimeStamp

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.componentId = UUID.ttypes.UUID()
                    self.componentId.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.timeStamp = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.streamTimeStamp = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ContextStreamIndexData')
        if self.componentId is not None:
            oprot.writeFieldBegin('componentId', TType.STRUCT, 1)
            self.componentId.write(oprot)
            oprot.writeFieldEnd()
        if self.timeStamp is not None:
            oprot.writeFieldBegin('timeStamp', TType.I64, 2)
            oprot.writeI64(self.timeStamp)
            oprot.writeFieldEnd()
        if self.streamTimeStamp is not None:
            oprot.writeFieldBegin('streamTimeStamp', TType.I64, 3)
            oprot.writeI64(self.streamTimeStamp)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(CameraIntrinsics)
CameraIntrinsics.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'componentId', [UUID.ttypes.UUID, None], None, ),  # 1
    (2, TType.DOUBLE, 'cx', None, None, ),  # 2
    (3, TType.DOUBLE, 'cy', None, None, ),  # 3
    (4, TType.DOUBLE, 'fx', None, None, ),  # 4
    (5, TType.DOUBLE, 'fy', None, None, ),  # 5
    (6, TType.LIST, 'RadialDistortionCoefficients', (TType.DOUBLE, None, False), None, ),  # 6
    (7, TType.LIST, 'TangentialDistortionCoefficients', (TType.DOUBLE, None, False), None, ),  # 7
)
all_structs.append(ContextVideoConfiguration)
ContextVideoConfiguration.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'componentId', [UUID.ttypes.UUID, None], None, ),  # 1
    (2, TType.STRING, 'fileName', 'UTF8', None, ),  # 2
    (3, TType.DOUBLE, 'framesPerSecond', None, None, ),  # 3
    (4, TType.DOUBLE, 'verticalResolution', None, None, ),  # 4
    (5, TType.DOUBLE, 'horizontalResolution', None, None, ),  # 5
    (6, TType.STRUCT, 'componentPositionAndOrientation', [Component.ttypes.GridPositionAndOrientation, None], None, ),  # 6
    (7, TType.DOUBLE, 'verticalFOV', None, None, ),  # 7
    (8, TType.DOUBLE, 'horizontalFOV', None, None, ),  # 8
    (9, TType.BOOL, 'isRectified', None, None, ),  # 9
    (10, TType.BOOL, 'isDeBayered', None, None, ),  # 10
    (11, TType.STRUCT, 'intrinsics', [CameraIntrinsics, None], None, ),  # 11
    (12, TType.I64, 'timeStamp', None, None, ),  # 12
)
all_structs.append(ContextVideoDefinition)
ContextVideoDefinition.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'component', [Component.ttypes.ComponentDefinition, None], None, ),  # 1
    None,  # 2
    None,  # 3
    None,  # 4
    (5, TType.STRUCT, 'videoConfiguration', [ContextVideoConfiguration, None], None, ),  # 5
)
all_structs.append(ContextVideoData)
ContextVideoData.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'componentId', [UUID.ttypes.UUID, None], None, ),  # 1
    (2, TType.I64, 'timeStamp', None, None, ),  # 2
    (3, TType.I32, 'health', None, None, ),  # 3
    (4, TType.I64, 'sensorTimeStamp', None, None, ),  # 4
    (5, TType.STRUCT, 'contextVideoConfiguration', [ContextVideoConfiguration, None], None, ),  # 5
    (6, TType.STRING, 'cameraImage', 'BINARY', None, ),  # 6
)
all_structs.append(Context3DConfiguration)
Context3DConfiguration.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'componentId', [UUID.ttypes.UUID, None], None, ),  # 1
    (2, TType.STRUCT, 'componentPositionAndOrientation', [Component.ttypes.GridPositionAndOrientation, None], None, ),  # 2
    (3, TType.I64, 'timeStamp', None, None, ),  # 3
)
all_structs.append(Context3DDefinition)
Context3DDefinition.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'component', [Component.ttypes.ComponentDefinition, None], None, ),  # 1
    None,  # 2
    None,  # 3
    None,  # 4
    None,  # 5
    None,  # 6
    None,  # 7
    None,  # 8
    None,  # 9
    None,  # 10
    (11, TType.STRUCT, 'configuration', [Context3DConfiguration, None], None, ),  # 11
)
all_structs.append(ContextPointCloudData)
ContextPointCloudData.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'componentId', [UUID.ttypes.UUID, None], None, ),  # 1
    (2, TType.I64, 'timeStamp', None, None, ),  # 2
    (3, TType.I32, 'health', None, None, ),  # 3
    (4, TType.I64, 'sensorTimeStamp', None, None, ),  # 4
    (5, TType.I64, 'syncFrame', None, None, ),  # 5
    None,  # 6
    (7, TType.STRUCT, 'pointCloud', [Context.ttypes.PointCloud, None], None, ),  # 7
)
all_structs.append(ContextVoxelData)
ContextVoxelData.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'componentId', [UUID.ttypes.UUID, None], None, ),  # 1
    (2, TType.I64, 'timeStamp', None, None, ),  # 2
    (3, TType.I32, 'health', None, None, ),  # 3
    (4, TType.I64, 'sensorTimeStamp', None, None, ),  # 4
    None,  # 5
    (6, TType.STRUCT, 'voxelMap', [Context.ttypes.VoxelMap, None], None, ),  # 6
)
all_structs.append(ContextMeshData)
ContextMeshData.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'componentId', [UUID.ttypes.UUID, None], None, ),  # 1
    (2, TType.I64, 'timeStamp', None, None, ),  # 2
    (3, TType.I32, 'health', None, None, ),  # 3
    (4, TType.I64, 'sensorTimeStamp', None, None, ),  # 4
    None,  # 5
    (6, TType.STRUCT, 'mesh', [Context.ttypes.Mesh, None], None, ),  # 6
)
all_structs.append(SensorModalityConfiguration)
SensorModalityConfiguration.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'videoConfiguration', [ContextVideoConfiguration, None], None, ),  # 1
    (2, TType.STRUCT, 'threeDConfiguration', [Context3DConfiguration, None], None, ),  # 2
)
all_structs.append(ContextStreamConfiguration)
ContextStreamConfiguration.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'componentId', [UUID.ttypes.UUID, None], None, ),  # 1
    (2, TType.STRUCT, 'componentPositionAndOrientation', [Component.ttypes.GridPositionAndOrientation, None], None, ),  # 2
    (3, TType.STRUCT, 'modalityConfiguration', [SensorModalityConfiguration, None], None, ),  # 3
    (4, TType.I64, 'timeStamp', None, None, ),  # 4
)
all_structs.append(ContextStreamDefinition)
ContextStreamDefinition.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'component', [Component.ttypes.ComponentDefinition, None], None, ),  # 1
    (2, TType.STRING, 'streamFormat', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'streamAddress', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'formatVersion', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'documentationURI', 'UTF8', None, ),  # 5
    None,  # 6
    None,  # 7
    None,  # 8
    None,  # 9
    None,  # 10
    None,  # 11
    None,  # 12
    None,  # 13
    None,  # 14
    None,  # 15
    None,  # 16
    None,  # 17
    None,  # 18
    None,  # 19
    None,  # 20
    None,  # 21
    None,  # 22
    None,  # 23
    None,  # 24
    None,  # 25
    None,  # 26
    None,  # 27
    None,  # 28
    None,  # 29
    None,  # 30
    None,  # 31
    None,  # 32
    None,  # 33
    None,  # 34
    None,  # 35
    None,  # 36
    None,  # 37
    None,  # 38
    None,  # 39
    None,  # 40
    None,  # 41
    None,  # 42
    None,  # 43
    None,  # 44
    None,  # 45
    None,  # 46
    None,  # 47
    None,  # 48
    None,  # 49
    None,  # 50
    None,  # 51
    None,  # 52
    None,  # 53
    None,  # 54
    None,  # 55
    None,  # 56
    None,  # 57
    None,  # 58
    None,  # 59
    None,  # 60
    None,  # 61
    None,  # 62
    None,  # 63
    None,  # 64
    None,  # 65
    (66, TType.STRUCT, 'configuration', [ContextStreamConfiguration, None], None, ),  # 66
)
all_structs.append(ContextStreamIndexData)
ContextStreamIndexData.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'componentId', [UUID.ttypes.UUID, None], None, ),  # 1
    (2, TType.I64, 'timeStamp', None, None, ),  # 2
    (3, TType.I64, 'streamTimeStamp', None, None, ),  # 3
)
fix_spec(all_structs)
del all_structs
