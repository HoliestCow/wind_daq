#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys
import Health.ttypes
import UUID.ttypes
import Common.ttypes
import Component.ttypes
import Navigation.ttypes

from thrift.transport import TTransport
all_structs = []


class FrameOfReference(object):
    LocalNED = 0
    VehicleCarriedNED = 1
    Body = 2
    Geodetic_NED = 3
    Geodetic_ECEF = 4
    LocalXYZ = 5

    _VALUES_TO_NAMES = {
        0: "LocalNED",
        1: "VehicleCarriedNED",
        2: "Body",
        3: "Geodetic_NED",
        4: "Geodetic_ECEF",
        5: "LocalXYZ",
    }

    _NAMES_TO_VALUES = {
        "LocalNED": 0,
        "VehicleCarriedNED": 1,
        "Body": 2,
        "Geodetic_NED": 3,
        "Geodetic_ECEF": 4,
        "LocalXYZ": 5,
    }


class GeodeticDatum(object):
    AGD84 = 0
    GRS80 = 1
    NAD83 = 2
    OSGB36 = 3
    PZ9011 = 4
    WGS84 = 5

    _VALUES_TO_NAMES = {
        0: "AGD84",
        1: "GRS80",
        2: "NAD83",
        3: "OSGB36",
        4: "PZ9011",
        5: "WGS84",
    }

    _NAMES_TO_VALUES = {
        "AGD84": 0,
        "GRS80": 1,
        "NAD83": 2,
        "OSGB36": 3,
        "PZ9011": 4,
        "WGS84": 5,
    }


class GPSFixType(object):
    NotAvailable = 0
    TimeOnly = 1
    TwoD = 2
    ThreeD = 3

    _VALUES_TO_NAMES = {
        0: "NotAvailable",
        1: "TimeOnly",
        2: "TwoD",
        3: "ThreeD",
    }

    _NAMES_TO_VALUES = {
        "NotAvailable": 0,
        "TimeOnly": 1,
        "TwoD": 2,
        "ThreeD": 3,
    }


class NavigationOutputDefinition(object):
    """
    Attributes:
     - sensorFrameOfReference
     - datum
     - hasLatitude
     - hasLongitude
     - hasAltitude
     - hasX
     - hasY
     - hasZ
     - hasAccelerationX
     - hasAccelerationY
     - hasAccelerationZ
     - hasNumberOfSatellites
     - hasQualityOfFix
     - hasPitch
     - hasRoll
     - hasHeading
     - hasVelocityX
     - hasVelocityY
     - hasVelocityZ
     - hasSpeed
    """


    def __init__(self, sensorFrameOfReference=3, datum=5, hasLatitude=False, hasLongitude=False, hasAltitude=False, hasX=False, hasY=False, hasZ=False, hasAccelerationX=False, hasAccelerationY=False, hasAccelerationZ=False, hasNumberOfSatellites=False, hasQualityOfFix=False, hasPitch=False, hasRoll=False, hasHeading=False, hasVelocityX=False, hasVelocityY=False, hasVelocityZ=False, hasSpeed=False,):
        self.sensorFrameOfReference = sensorFrameOfReference
        self.datum = datum
        self.hasLatitude = hasLatitude
        self.hasLongitude = hasLongitude
        self.hasAltitude = hasAltitude
        self.hasX = hasX
        self.hasY = hasY
        self.hasZ = hasZ
        self.hasAccelerationX = hasAccelerationX
        self.hasAccelerationY = hasAccelerationY
        self.hasAccelerationZ = hasAccelerationZ
        self.hasNumberOfSatellites = hasNumberOfSatellites
        self.hasQualityOfFix = hasQualityOfFix
        self.hasPitch = hasPitch
        self.hasRoll = hasRoll
        self.hasHeading = hasHeading
        self.hasVelocityX = hasVelocityX
        self.hasVelocityY = hasVelocityY
        self.hasVelocityZ = hasVelocityZ
        self.hasSpeed = hasSpeed

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.sensorFrameOfReference = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.datum = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.hasLatitude = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.BOOL:
                    self.hasLongitude = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.BOOL:
                    self.hasAltitude = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.BOOL:
                    self.hasX = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.BOOL:
                    self.hasY = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.BOOL:
                    self.hasZ = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.BOOL:
                    self.hasAccelerationX = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.BOOL:
                    self.hasAccelerationY = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.BOOL:
                    self.hasAccelerationZ = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.BOOL:
                    self.hasNumberOfSatellites = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.BOOL:
                    self.hasQualityOfFix = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.BOOL:
                    self.hasPitch = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.BOOL:
                    self.hasRoll = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.BOOL:
                    self.hasHeading = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 17:
                if ftype == TType.BOOL:
                    self.hasVelocityX = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 18:
                if ftype == TType.BOOL:
                    self.hasVelocityY = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 19:
                if ftype == TType.BOOL:
                    self.hasVelocityZ = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 20:
                if ftype == TType.BOOL:
                    self.hasSpeed = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('NavigationOutputDefinition')
        if self.sensorFrameOfReference is not None:
            oprot.writeFieldBegin('sensorFrameOfReference', TType.I32, 1)
            oprot.writeI32(self.sensorFrameOfReference)
            oprot.writeFieldEnd()
        if self.datum is not None:
            oprot.writeFieldBegin('datum', TType.I32, 2)
            oprot.writeI32(self.datum)
            oprot.writeFieldEnd()
        if self.hasLatitude is not None:
            oprot.writeFieldBegin('hasLatitude', TType.BOOL, 3)
            oprot.writeBool(self.hasLatitude)
            oprot.writeFieldEnd()
        if self.hasLongitude is not None:
            oprot.writeFieldBegin('hasLongitude', TType.BOOL, 4)
            oprot.writeBool(self.hasLongitude)
            oprot.writeFieldEnd()
        if self.hasAltitude is not None:
            oprot.writeFieldBegin('hasAltitude', TType.BOOL, 5)
            oprot.writeBool(self.hasAltitude)
            oprot.writeFieldEnd()
        if self.hasX is not None:
            oprot.writeFieldBegin('hasX', TType.BOOL, 6)
            oprot.writeBool(self.hasX)
            oprot.writeFieldEnd()
        if self.hasY is not None:
            oprot.writeFieldBegin('hasY', TType.BOOL, 7)
            oprot.writeBool(self.hasY)
            oprot.writeFieldEnd()
        if self.hasZ is not None:
            oprot.writeFieldBegin('hasZ', TType.BOOL, 8)
            oprot.writeBool(self.hasZ)
            oprot.writeFieldEnd()
        if self.hasAccelerationX is not None:
            oprot.writeFieldBegin('hasAccelerationX', TType.BOOL, 9)
            oprot.writeBool(self.hasAccelerationX)
            oprot.writeFieldEnd()
        if self.hasAccelerationY is not None:
            oprot.writeFieldBegin('hasAccelerationY', TType.BOOL, 10)
            oprot.writeBool(self.hasAccelerationY)
            oprot.writeFieldEnd()
        if self.hasAccelerationZ is not None:
            oprot.writeFieldBegin('hasAccelerationZ', TType.BOOL, 11)
            oprot.writeBool(self.hasAccelerationZ)
            oprot.writeFieldEnd()
        if self.hasNumberOfSatellites is not None:
            oprot.writeFieldBegin('hasNumberOfSatellites', TType.BOOL, 12)
            oprot.writeBool(self.hasNumberOfSatellites)
            oprot.writeFieldEnd()
        if self.hasQualityOfFix is not None:
            oprot.writeFieldBegin('hasQualityOfFix', TType.BOOL, 13)
            oprot.writeBool(self.hasQualityOfFix)
            oprot.writeFieldEnd()
        if self.hasPitch is not None:
            oprot.writeFieldBegin('hasPitch', TType.BOOL, 14)
            oprot.writeBool(self.hasPitch)
            oprot.writeFieldEnd()
        if self.hasRoll is not None:
            oprot.writeFieldBegin('hasRoll', TType.BOOL, 15)
            oprot.writeBool(self.hasRoll)
            oprot.writeFieldEnd()
        if self.hasHeading is not None:
            oprot.writeFieldBegin('hasHeading', TType.BOOL, 16)
            oprot.writeBool(self.hasHeading)
            oprot.writeFieldEnd()
        if self.hasVelocityX is not None:
            oprot.writeFieldBegin('hasVelocityX', TType.BOOL, 17)
            oprot.writeBool(self.hasVelocityX)
            oprot.writeFieldEnd()
        if self.hasVelocityY is not None:
            oprot.writeFieldBegin('hasVelocityY', TType.BOOL, 18)
            oprot.writeBool(self.hasVelocityY)
            oprot.writeFieldEnd()
        if self.hasVelocityZ is not None:
            oprot.writeFieldBegin('hasVelocityZ', TType.BOOL, 19)
            oprot.writeBool(self.hasVelocityZ)
            oprot.writeFieldEnd()
        if self.hasSpeed is not None:
            oprot.writeFieldBegin('hasSpeed', TType.BOOL, 20)
            oprot.writeBool(self.hasSpeed)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class NavigationSensorDefinition(object):
    """
    Attributes:
     - component
     - navOutputDefinition
    """


    def __init__(self, component=None, navOutputDefinition=None,):
        self.component = component
        self.navOutputDefinition = navOutputDefinition

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.component = Component.ttypes.ComponentDefinition()
                    self.component.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.navOutputDefinition = NavigationOutputDefinition()
                    self.navOutputDefinition.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('NavigationSensorDefinition')
        if self.component is not None:
            oprot.writeFieldBegin('component', TType.STRUCT, 1)
            self.component.write(oprot)
            oprot.writeFieldEnd()
        if self.navOutputDefinition is not None:
            oprot.writeFieldBegin('navOutputDefinition', TType.STRUCT, 2)
            self.navOutputDefinition.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class NavigationData(object):
    """
    What do we need to send the Vendors?*

    Attributes:
     - componentId
     - timeStamp
     - health
     - location
     - position
     - acceleration
     - numberOfSatellites
     - qualityOfFix
     - orientation
     - velocity
     - speed
     - angularRate
     - magneticField
     - gravityCompAccel
     - positionErrorXYZ
     - positionError
     - velocityError
     - speedError
     - orientationError
     - timeError
     - referenceFrameTimeStamp
    """


    def __init__(self, componentId=None, timeStamp=None, health=None, location=None, position=None, acceleration=None, numberOfSatellites=None, qualityOfFix=None, orientation=None, velocity=None, speed=None, angularRate=None, magneticField=None, gravityCompAccel=None, positionErrorXYZ=None, positionError=None, velocityError=None, speedError=None, orientationError=None, timeError=None, referenceFrameTimeStamp=None,):
        self.componentId = componentId
        self.timeStamp = timeStamp
        self.health = health
        self.location = location
        self.position = position
        self.acceleration = acceleration
        self.numberOfSatellites = numberOfSatellites
        self.qualityOfFix = qualityOfFix
        self.orientation = orientation
        self.velocity = velocity
        self.speed = speed
        self.angularRate = angularRate
        self.magneticField = magneticField
        self.gravityCompAccel = gravityCompAccel
        self.positionErrorXYZ = positionErrorXYZ
        self.positionError = positionError
        self.velocityError = velocityError
        self.speedError = speedError
        self.orientationError = orientationError
        self.timeError = timeError
        self.referenceFrameTimeStamp = referenceFrameTimeStamp

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.componentId = UUID.ttypes.UUID()
                    self.componentId.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.timeStamp = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.health = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.location = Navigation.ttypes.Location()
                    self.location.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRUCT:
                    self.position = Common.ttypes.Vector()
                    self.position.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRUCT:
                    self.acceleration = Common.ttypes.Vector()
                    self.acceleration.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.I32:
                    self.numberOfSatellites = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.I32:
                    self.qualityOfFix = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.STRUCT:
                    self.orientation = Common.ttypes.NauticalAngles()
                    self.orientation.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 18:
                if ftype == TType.STRUCT:
                    self.velocity = Common.ttypes.Vector()
                    self.velocity.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 21:
                if ftype == TType.DOUBLE:
                    self.speed = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 22:
                if ftype == TType.STRUCT:
                    self.angularRate = Common.ttypes.Vector()
                    self.angularRate.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 25:
                if ftype == TType.STRUCT:
                    self.magneticField = Common.ttypes.Vector()
                    self.magneticField.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 28:
                if ftype == TType.STRUCT:
                    self.gravityCompAccel = Common.ttypes.Vector()
                    self.gravityCompAccel.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 31:
                if ftype == TType.STRUCT:
                    self.positionErrorXYZ = Common.ttypes.Vector()
                    self.positionErrorXYZ.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 34:
                if ftype == TType.DOUBLE:
                    self.positionError = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 35:
                if ftype == TType.STRUCT:
                    self.velocityError = Common.ttypes.Vector()
                    self.velocityError.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 38:
                if ftype == TType.DOUBLE:
                    self.speedError = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 39:
                if ftype == TType.STRUCT:
                    self.orientationError = Common.ttypes.NauticalAngles()
                    self.orientationError.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 42:
                if ftype == TType.I64:
                    self.timeError = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 43:
                if ftype == TType.I64:
                    self.referenceFrameTimeStamp = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('NavigationData')
        if self.componentId is not None:
            oprot.writeFieldBegin('componentId', TType.STRUCT, 1)
            self.componentId.write(oprot)
            oprot.writeFieldEnd()
        if self.timeStamp is not None:
            oprot.writeFieldBegin('timeStamp', TType.I64, 2)
            oprot.writeI64(self.timeStamp)
            oprot.writeFieldEnd()
        if self.health is not None:
            oprot.writeFieldBegin('health', TType.I32, 3)
            oprot.writeI32(self.health)
            oprot.writeFieldEnd()
        if self.location is not None:
            oprot.writeFieldBegin('location', TType.STRUCT, 4)
            self.location.write(oprot)
            oprot.writeFieldEnd()
        if self.position is not None:
            oprot.writeFieldBegin('position', TType.STRUCT, 7)
            self.position.write(oprot)
            oprot.writeFieldEnd()
        if self.acceleration is not None:
            oprot.writeFieldBegin('acceleration', TType.STRUCT, 10)
            self.acceleration.write(oprot)
            oprot.writeFieldEnd()
        if self.numberOfSatellites is not None:
            oprot.writeFieldBegin('numberOfSatellites', TType.I32, 13)
            oprot.writeI32(self.numberOfSatellites)
            oprot.writeFieldEnd()
        if self.qualityOfFix is not None:
            oprot.writeFieldBegin('qualityOfFix', TType.I32, 14)
            oprot.writeI32(self.qualityOfFix)
            oprot.writeFieldEnd()
        if self.orientation is not None:
            oprot.writeFieldBegin('orientation', TType.STRUCT, 15)
            self.orientation.write(oprot)
            oprot.writeFieldEnd()
        if self.velocity is not None:
            oprot.writeFieldBegin('velocity', TType.STRUCT, 18)
            self.velocity.write(oprot)
            oprot.writeFieldEnd()
        if self.speed is not None:
            oprot.writeFieldBegin('speed', TType.DOUBLE, 21)
            oprot.writeDouble(self.speed)
            oprot.writeFieldEnd()
        if self.angularRate is not None:
            oprot.writeFieldBegin('angularRate', TType.STRUCT, 22)
            self.angularRate.write(oprot)
            oprot.writeFieldEnd()
        if self.magneticField is not None:
            oprot.writeFieldBegin('magneticField', TType.STRUCT, 25)
            self.magneticField.write(oprot)
            oprot.writeFieldEnd()
        if self.gravityCompAccel is not None:
            oprot.writeFieldBegin('gravityCompAccel', TType.STRUCT, 28)
            self.gravityCompAccel.write(oprot)
            oprot.writeFieldEnd()
        if self.positionErrorXYZ is not None:
            oprot.writeFieldBegin('positionErrorXYZ', TType.STRUCT, 31)
            self.positionErrorXYZ.write(oprot)
            oprot.writeFieldEnd()
        if self.positionError is not None:
            oprot.writeFieldBegin('positionError', TType.DOUBLE, 34)
            oprot.writeDouble(self.positionError)
            oprot.writeFieldEnd()
        if self.velocityError is not None:
            oprot.writeFieldBegin('velocityError', TType.STRUCT, 35)
            self.velocityError.write(oprot)
            oprot.writeFieldEnd()
        if self.speedError is not None:
            oprot.writeFieldBegin('speedError', TType.DOUBLE, 38)
            oprot.writeDouble(self.speedError)
            oprot.writeFieldEnd()
        if self.orientationError is not None:
            oprot.writeFieldBegin('orientationError', TType.STRUCT, 39)
            self.orientationError.write(oprot)
            oprot.writeFieldEnd()
        if self.timeError is not None:
            oprot.writeFieldBegin('timeError', TType.I64, 42)
            oprot.writeI64(self.timeError)
            oprot.writeFieldEnd()
        if self.referenceFrameTimeStamp is not None:
            oprot.writeFieldBegin('referenceFrameTimeStamp', TType.I64, 43)
            oprot.writeI64(self.referenceFrameTimeStamp)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(NavigationOutputDefinition)
NavigationOutputDefinition.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'sensorFrameOfReference', None, 3, ),  # 1
    (2, TType.I32, 'datum', None, 5, ),  # 2
    (3, TType.BOOL, 'hasLatitude', None, False, ),  # 3
    (4, TType.BOOL, 'hasLongitude', None, False, ),  # 4
    (5, TType.BOOL, 'hasAltitude', None, False, ),  # 5
    (6, TType.BOOL, 'hasX', None, False, ),  # 6
    (7, TType.BOOL, 'hasY', None, False, ),  # 7
    (8, TType.BOOL, 'hasZ', None, False, ),  # 8
    (9, TType.BOOL, 'hasAccelerationX', None, False, ),  # 9
    (10, TType.BOOL, 'hasAccelerationY', None, False, ),  # 10
    (11, TType.BOOL, 'hasAccelerationZ', None, False, ),  # 11
    (12, TType.BOOL, 'hasNumberOfSatellites', None, False, ),  # 12
    (13, TType.BOOL, 'hasQualityOfFix', None, False, ),  # 13
    (14, TType.BOOL, 'hasPitch', None, False, ),  # 14
    (15, TType.BOOL, 'hasRoll', None, False, ),  # 15
    (16, TType.BOOL, 'hasHeading', None, False, ),  # 16
    (17, TType.BOOL, 'hasVelocityX', None, False, ),  # 17
    (18, TType.BOOL, 'hasVelocityY', None, False, ),  # 18
    (19, TType.BOOL, 'hasVelocityZ', None, False, ),  # 19
    (20, TType.BOOL, 'hasSpeed', None, False, ),  # 20
)
all_structs.append(NavigationSensorDefinition)
NavigationSensorDefinition.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'component', [Component.ttypes.ComponentDefinition, None], None, ),  # 1
    (2, TType.STRUCT, 'navOutputDefinition', [NavigationOutputDefinition, None], None, ),  # 2
)
all_structs.append(NavigationData)
NavigationData.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'componentId', [UUID.ttypes.UUID, None], None, ),  # 1
    (2, TType.I64, 'timeStamp', None, None, ),  # 2
    (3, TType.I32, 'health', None, None, ),  # 3
    (4, TType.STRUCT, 'location', [Navigation.ttypes.Location, None], None, ),  # 4
    None,  # 5
    None,  # 6
    (7, TType.STRUCT, 'position', [Common.ttypes.Vector, None], None, ),  # 7
    None,  # 8
    None,  # 9
    (10, TType.STRUCT, 'acceleration', [Common.ttypes.Vector, None], None, ),  # 10
    None,  # 11
    None,  # 12
    (13, TType.I32, 'numberOfSatellites', None, None, ),  # 13
    (14, TType.I32, 'qualityOfFix', None, None, ),  # 14
    (15, TType.STRUCT, 'orientation', [Common.ttypes.NauticalAngles, None], None, ),  # 15
    None,  # 16
    None,  # 17
    (18, TType.STRUCT, 'velocity', [Common.ttypes.Vector, None], None, ),  # 18
    None,  # 19
    None,  # 20
    (21, TType.DOUBLE, 'speed', None, None, ),  # 21
    (22, TType.STRUCT, 'angularRate', [Common.ttypes.Vector, None], None, ),  # 22
    None,  # 23
    None,  # 24
    (25, TType.STRUCT, 'magneticField', [Common.ttypes.Vector, None], None, ),  # 25
    None,  # 26
    None,  # 27
    (28, TType.STRUCT, 'gravityCompAccel', [Common.ttypes.Vector, None], None, ),  # 28
    None,  # 29
    None,  # 30
    (31, TType.STRUCT, 'positionErrorXYZ', [Common.ttypes.Vector, None], None, ),  # 31
    None,  # 32
    None,  # 33
    (34, TType.DOUBLE, 'positionError', None, None, ),  # 34
    (35, TType.STRUCT, 'velocityError', [Common.ttypes.Vector, None], None, ),  # 35
    None,  # 36
    None,  # 37
    (38, TType.DOUBLE, 'speedError', None, None, ),  # 38
    (39, TType.STRUCT, 'orientationError', [Common.ttypes.NauticalAngles, None], None, ),  # 39
    None,  # 40
    None,  # 41
    (42, TType.I64, 'timeError', None, None, ),  # 42
    (43, TType.I64, 'referenceFrameTimeStamp', None, None, ),  # 43
)
fix_spec(all_structs)
del all_structs
