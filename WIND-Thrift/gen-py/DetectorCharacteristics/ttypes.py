#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys

from thrift.transport import TTransport
all_structs = []


class DetectorMaterial(object):
    HPGe = 0
    HPXe = 1
    NaI = 2
    LaBr3 = 3
    LaCl3 = 4
    BGO = 5
    CZT = 6
    CdTe = 7
    CsI = 8
    GMT = 9
    GMTW = 10
    LiFiber = 11
    PVT = 12
    PS = 13
    He3 = 14
    He4 = 15
    LiGlass = 16
    LiI = 17
    SrI2 = 18
    CLYC = 19
    CdWO4 = 20
    BF3 = 21
    HgI2 = 22
    CeBr4 = 23
    LiCAF = 24
    LiZnS = 25
    Other = 26

    _VALUES_TO_NAMES = {
        0: "HPGe",
        1: "HPXe",
        2: "NaI",
        3: "LaBr3",
        4: "LaCl3",
        5: "BGO",
        6: "CZT",
        7: "CdTe",
        8: "CsI",
        9: "GMT",
        10: "GMTW",
        11: "LiFiber",
        12: "PVT",
        13: "PS",
        14: "He3",
        15: "He4",
        16: "LiGlass",
        17: "LiI",
        18: "SrI2",
        19: "CLYC",
        20: "CdWO4",
        21: "BF3",
        22: "HgI2",
        23: "CeBr4",
        24: "LiCAF",
        25: "LiZnS",
        26: "Other",
    }

    _NAMES_TO_VALUES = {
        "HPGe": 0,
        "HPXe": 1,
        "NaI": 2,
        "LaBr3": 3,
        "LaCl3": 4,
        "BGO": 5,
        "CZT": 6,
        "CdTe": 7,
        "CsI": 8,
        "GMT": 9,
        "GMTW": 10,
        "LiFiber": 11,
        "PVT": 12,
        "PS": 13,
        "He3": 14,
        "He4": 15,
        "LiGlass": 16,
        "LiI": 17,
        "SrI2": 18,
        "CLYC": 19,
        "CdWO4": 20,
        "BF3": 21,
        "HgI2": 22,
        "CeBr4": 23,
        "LiCAF": 24,
        "LiZnS": 25,
        "Other": 26,
    }


class EnergyCalibration(object):
    """
    Attributes:
     - channel
     - energy: KeV
    """


    def __init__(self, channel=None, energy=None,):
        self.channel = channel
        self.energy = energy

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.channel = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.DOUBLE:
                    self.energy = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('EnergyCalibration')
        if self.channel is not None:
            oprot.writeFieldBegin('channel', TType.I32, 1)
            oprot.writeI32(self.channel)
            oprot.writeFieldEnd()
        if self.energy is not None:
            oprot.writeFieldBegin('energy', TType.DOUBLE, 2)
            oprot.writeDouble(self.energy)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class EnergyResolution(object):
    """
    Attributes:
     - energy: KeV
     - fraction: (full-width-half-height energy width in KeV) / (center energy KeV)
    """


    def __init__(self, energy=None, fraction=None,):
        self.energy = energy
        self.fraction = fraction

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.DOUBLE:
                    self.energy = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.DOUBLE:
                    self.fraction = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('EnergyResolution')
        if self.energy is not None:
            oprot.writeFieldBegin('energy', TType.DOUBLE, 1)
            oprot.writeDouble(self.energy)
            oprot.writeFieldEnd()
        if self.fraction is not None:
            oprot.writeFieldBegin('fraction', TType.DOUBLE, 2)
            oprot.writeDouble(self.fraction)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(EnergyCalibration)
EnergyCalibration.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'channel', None, None, ),  # 1
    (2, TType.DOUBLE, 'energy', None, None, ),  # 2
)
all_structs.append(EnergyResolution)
EnergyResolution.thrift_spec = (
    None,  # 0
    (1, TType.DOUBLE, 'energy', None, None, ),  # 1
    (2, TType.DOUBLE, 'fraction', None, None, ),  # 2
)
fix_spec(all_structs)
del all_structs
