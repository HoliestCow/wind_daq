#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys
import Common.ttypes
import GammaSensor.ttypes
import NeutronSensor.ttypes
import AlgorithmPayload.ttypes
import NavigationSensor.ttypes
import ContextSensor.ttypes
import EnvironmentalSensor.ttypes
import WINDMessage.ttypes
import Navigation.ttypes
import Health.ttypes
import Marker.ttypes
import UUID.ttypes
import PassiveMaterial.ttypes

from thrift.transport import TTransport
all_structs = []


class RecordingType(object):
    Other = 0
    Calibration = 1
    Measurement = 2
    Background = 3
    Search = 4

    _VALUES_TO_NAMES = {
        0: "Other",
        1: "Calibration",
        2: "Measurement",
        3: "Background",
        4: "Search",
    }

    _NAMES_TO_VALUES = {
        "Other": 0,
        "Calibration": 1,
        "Measurement": 2,
        "Background": 3,
        "Search": 4,
    }


class UnitType(object):
    Wearable = 0
    Luggable = 1
    Portal = 2
    Stationary = 3
    Aerial = 4
    Vehicle = 5
    Source = 6
    Other = 7

    _VALUES_TO_NAMES = {
        0: "Wearable",
        1: "Luggable",
        2: "Portal",
        3: "Stationary",
        4: "Aerial",
        5: "Vehicle",
        6: "Source",
        7: "Other",
    }

    _NAMES_TO_VALUES = {
        "Wearable": 0,
        "Luggable": 1,
        "Portal": 2,
        "Stationary": 3,
        "Aerial": 4,
        "Vehicle": 5,
        "Source": 6,
        "Other": 7,
    }


class RecordingConfiguration(object):
    """
    Attributes:
     - unitId
     - recordingId
     - campaign
     - tag
     - description: OBSOLETE_FIELD
        5: string measurementNumber;
    *
     - location
     - fileName
     - recordingType
     - recordingDuration: Zero here implies no duration - this could be made optional?
     - POSIXStartTime
     - measurementNumber
    """


    def __init__(self, unitId=None, recordingId=None, campaign=None, tag=None, description=None, location=None, fileName=None, recordingType=None, recordingDuration=None, POSIXStartTime=None, measurementNumber=None,):
        self.unitId = unitId
        self.recordingId = recordingId
        self.campaign = campaign
        self.tag = tag
        self.description = description
        self.location = location
        self.fileName = fileName
        self.recordingType = recordingType
        self.recordingDuration = recordingDuration
        self.POSIXStartTime = POSIXStartTime
        self.measurementNumber = measurementNumber

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.unitId = UUID.ttypes.UUID()
                    self.unitId.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.recordingId = UUID.ttypes.UUID()
                    self.recordingId.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.campaign = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.tag = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.description = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.location = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.fileName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.I32:
                    self.recordingType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.I64:
                    self.recordingDuration = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.I64:
                    self.POSIXStartTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.I32:
                    self.measurementNumber = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('RecordingConfiguration')
        if self.unitId is not None:
            oprot.writeFieldBegin('unitId', TType.STRUCT, 1)
            self.unitId.write(oprot)
            oprot.writeFieldEnd()
        if self.recordingId is not None:
            oprot.writeFieldBegin('recordingId', TType.STRUCT, 2)
            self.recordingId.write(oprot)
            oprot.writeFieldEnd()
        if self.campaign is not None:
            oprot.writeFieldBegin('campaign', TType.STRING, 3)
            oprot.writeString(self.campaign.encode('utf-8') if sys.version_info[0] == 2 else self.campaign)
            oprot.writeFieldEnd()
        if self.tag is not None:
            oprot.writeFieldBegin('tag', TType.STRING, 4)
            oprot.writeString(self.tag.encode('utf-8') if sys.version_info[0] == 2 else self.tag)
            oprot.writeFieldEnd()
        if self.description is not None:
            oprot.writeFieldBegin('description', TType.STRING, 6)
            oprot.writeString(self.description.encode('utf-8') if sys.version_info[0] == 2 else self.description)
            oprot.writeFieldEnd()
        if self.location is not None:
            oprot.writeFieldBegin('location', TType.STRING, 7)
            oprot.writeString(self.location.encode('utf-8') if sys.version_info[0] == 2 else self.location)
            oprot.writeFieldEnd()
        if self.fileName is not None:
            oprot.writeFieldBegin('fileName', TType.STRING, 8)
            oprot.writeString(self.fileName.encode('utf-8') if sys.version_info[0] == 2 else self.fileName)
            oprot.writeFieldEnd()
        if self.recordingType is not None:
            oprot.writeFieldBegin('recordingType', TType.I32, 9)
            oprot.writeI32(self.recordingType)
            oprot.writeFieldEnd()
        if self.recordingDuration is not None:
            oprot.writeFieldBegin('recordingDuration', TType.I64, 10)
            oprot.writeI64(self.recordingDuration)
            oprot.writeFieldEnd()
        if self.POSIXStartTime is not None:
            oprot.writeFieldBegin('POSIXStartTime', TType.I64, 11)
            oprot.writeI64(self.POSIXStartTime)
            oprot.writeFieldEnd()
        if self.measurementNumber is not None:
            oprot.writeFieldBegin('measurementNumber', TType.I32, 12)
            oprot.writeI32(self.measurementNumber)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Status(object):
    """
    Attributes:
     - unitId
     - isRecording
     - recordingId: Zero indicates no prior recording,
    If recordingState is true AND there is a recordingId THEN this field
    is the current recording id
    If recordingState is false AND there is a recordingId, THEN this field
    is the previous recording id
     - hardDriveUsedPercent
     - batteryRemainingPercent
     - systemTime: OBSOLETE_FIELDS (Preserved here so we don't re-use the field ID)
    6: string systemTime
    7: optional double latitude; // See #6
    8: optional double longitude; // See #6
    9: optional double altitude; // See #6
    *
     - cvrsURI: URI of the CVRS if connected.
     - cvrsSessionId: Current session id with the CVRS.
    No cvrsSession indicates that there is no active session connecting to the CVRS
    """


    def __init__(self, unitId=None, isRecording=None, recordingId=None, hardDriveUsedPercent=None, batteryRemainingPercent=None, systemTime=None, cvrsURI=None, cvrsSessionId=None,):
        self.unitId = unitId
        self.isRecording = isRecording
        self.recordingId = recordingId
        self.hardDriveUsedPercent = hardDriveUsedPercent
        self.batteryRemainingPercent = batteryRemainingPercent
        self.systemTime = systemTime
        self.cvrsURI = cvrsURI
        self.cvrsSessionId = cvrsSessionId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.unitId = UUID.ttypes.UUID()
                    self.unitId.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BOOL:
                    self.isRecording = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.recordingId = UUID.ttypes.UUID()
                    self.recordingId.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.DOUBLE:
                    self.hardDriveUsedPercent = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.DOUBLE:
                    self.batteryRemainingPercent = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.I64:
                    self.systemTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.cvrsURI = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRUCT:
                    self.cvrsSessionId = UUID.ttypes.UUID()
                    self.cvrsSessionId.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Status')
        if self.unitId is not None:
            oprot.writeFieldBegin('unitId', TType.STRUCT, 1)
            self.unitId.write(oprot)
            oprot.writeFieldEnd()
        if self.isRecording is not None:
            oprot.writeFieldBegin('isRecording', TType.BOOL, 2)
            oprot.writeBool(self.isRecording)
            oprot.writeFieldEnd()
        if self.recordingId is not None:
            oprot.writeFieldBegin('recordingId', TType.STRUCT, 3)
            self.recordingId.write(oprot)
            oprot.writeFieldEnd()
        if self.hardDriveUsedPercent is not None:
            oprot.writeFieldBegin('hardDriveUsedPercent', TType.DOUBLE, 4)
            oprot.writeDouble(self.hardDriveUsedPercent)
            oprot.writeFieldEnd()
        if self.batteryRemainingPercent is not None:
            oprot.writeFieldBegin('batteryRemainingPercent', TType.DOUBLE, 5)
            oprot.writeDouble(self.batteryRemainingPercent)
            oprot.writeFieldEnd()
        if self.systemTime is not None:
            oprot.writeFieldBegin('systemTime', TType.I64, 10)
            oprot.writeI64(self.systemTime)
            oprot.writeFieldEnd()
        if self.cvrsURI is not None:
            oprot.writeFieldBegin('cvrsURI', TType.STRING, 11)
            oprot.writeString(self.cvrsURI.encode('utf-8') if sys.version_info[0] == 2 else self.cvrsURI)
            oprot.writeFieldEnd()
        if self.cvrsSessionId is not None:
            oprot.writeFieldBegin('cvrsSessionId', TType.STRUCT, 12)
            self.cvrsSessionId.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class DataFilter(object):
    """
    Attributes:
     - componentIds: Empty list specifies that PTU MUST NOT send component data
     - includeMessages
     - includeWaypoints
     - includeBoundingBoxes
     - includeMarkers
    """


    def __init__(self, componentIds=None, includeMessages=True, includeWaypoints=True, includeBoundingBoxes=True, includeMarkers=True,):
        self.componentIds = componentIds
        self.includeMessages = includeMessages
        self.includeWaypoints = includeWaypoints
        self.includeBoundingBoxes = includeBoundingBoxes
        self.includeMarkers = includeMarkers

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.componentIds = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = UUID.ttypes.UUID()
                        _elem5.read(iprot)
                        self.componentIds.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BOOL:
                    self.includeMessages = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.includeWaypoints = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.BOOL:
                    self.includeBoundingBoxes = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.BOOL:
                    self.includeMarkers = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('DataFilter')
        if self.componentIds is not None:
            oprot.writeFieldBegin('componentIds', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.componentIds))
            for iter6 in self.componentIds:
                iter6.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.includeMessages is not None:
            oprot.writeFieldBegin('includeMessages', TType.BOOL, 2)
            oprot.writeBool(self.includeMessages)
            oprot.writeFieldEnd()
        if self.includeWaypoints is not None:
            oprot.writeFieldBegin('includeWaypoints', TType.BOOL, 3)
            oprot.writeBool(self.includeWaypoints)
            oprot.writeFieldEnd()
        if self.includeBoundingBoxes is not None:
            oprot.writeFieldBegin('includeBoundingBoxes', TType.BOOL, 4)
            oprot.writeBool(self.includeBoundingBoxes)
            oprot.writeFieldEnd()
        if self.includeMarkers is not None:
            oprot.writeFieldBegin('includeMarkers', TType.BOOL, 5)
            oprot.writeBool(self.includeMarkers)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class UnitDefinition(object):
    """
    Attributes:
     - unitId
     - unitName
     - softwareVersion
     - hardwareRevision
     - vendor
     - unitType
     - protocolVersion
    """


    def __init__(self, unitId=None, unitName=None, softwareVersion=None, hardwareRevision=None, vendor=None, unitType=None, protocolVersion="0.3.1",):
        self.unitId = unitId
        self.unitName = unitName
        self.softwareVersion = softwareVersion
        self.hardwareRevision = hardwareRevision
        self.vendor = vendor
        self.unitType = unitType
        self.protocolVersion = protocolVersion

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.unitId = UUID.ttypes.UUID()
                    self.unitId.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.unitName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.softwareVersion = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.hardwareRevision = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.vendor = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.unitType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.protocolVersion = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('UnitDefinition')
        if self.unitId is not None:
            oprot.writeFieldBegin('unitId', TType.STRUCT, 1)
            self.unitId.write(oprot)
            oprot.writeFieldEnd()
        if self.unitName is not None:
            oprot.writeFieldBegin('unitName', TType.STRING, 2)
            oprot.writeString(self.unitName.encode('utf-8') if sys.version_info[0] == 2 else self.unitName)
            oprot.writeFieldEnd()
        if self.softwareVersion is not None:
            oprot.writeFieldBegin('softwareVersion', TType.STRING, 3)
            oprot.writeString(self.softwareVersion.encode('utf-8') if sys.version_info[0] == 2 else self.softwareVersion)
            oprot.writeFieldEnd()
        if self.hardwareRevision is not None:
            oprot.writeFieldBegin('hardwareRevision', TType.STRING, 5)
            oprot.writeString(self.hardwareRevision.encode('utf-8') if sys.version_info[0] == 2 else self.hardwareRevision)
            oprot.writeFieldEnd()
        if self.vendor is not None:
            oprot.writeFieldBegin('vendor', TType.STRING, 6)
            oprot.writeString(self.vendor.encode('utf-8') if sys.version_info[0] == 2 else self.vendor)
            oprot.writeFieldEnd()
        if self.unitType is not None:
            oprot.writeFieldBegin('unitType', TType.I32, 7)
            oprot.writeI32(self.unitType)
            oprot.writeFieldEnd()
        if self.protocolVersion is not None:
            oprot.writeFieldBegin('protocolVersion', TType.STRING, 8)
            oprot.writeString(self.protocolVersion.encode('utf-8') if sys.version_info[0] == 2 else self.protocolVersion)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class SystemConfiguration(object):
    """
    Attributes:
     - unitId
     - gammaSpectrumConfigurations
     - gammaListConfigurations
     - gammaGrossCountConfigurations
     - gammaDoseConfigurations
     - neutronGrossCountConfigurations
     - contextVideoConfigurations
     - contextPointCloudConfigurations
     - contextVoxelConfigurations
     - contextMeshConfigurations
     - algorithmConfigurations
     - neutronListConfigurations
     - neutronSpectrumConfigurations
     - passiveMaterialConfigurations
     - timeStamp
     - contextStreamConfigurations
    """


    def __init__(self, unitId=None, gammaSpectrumConfigurations=None, gammaListConfigurations=None, gammaGrossCountConfigurations=None, gammaDoseConfigurations=None, neutronGrossCountConfigurations=None, contextVideoConfigurations=None, contextPointCloudConfigurations=None, contextVoxelConfigurations=None, contextMeshConfigurations=None, algorithmConfigurations=None, neutronListConfigurations=None, neutronSpectrumConfigurations=None, passiveMaterialConfigurations=None, timeStamp=None, contextStreamConfigurations=None,):
        self.unitId = unitId
        self.gammaSpectrumConfigurations = gammaSpectrumConfigurations
        self.gammaListConfigurations = gammaListConfigurations
        self.gammaGrossCountConfigurations = gammaGrossCountConfigurations
        self.gammaDoseConfigurations = gammaDoseConfigurations
        self.neutronGrossCountConfigurations = neutronGrossCountConfigurations
        self.contextVideoConfigurations = contextVideoConfigurations
        self.contextPointCloudConfigurations = contextPointCloudConfigurations
        self.contextVoxelConfigurations = contextVoxelConfigurations
        self.contextMeshConfigurations = contextMeshConfigurations
        self.algorithmConfigurations = algorithmConfigurations
        self.neutronListConfigurations = neutronListConfigurations
        self.neutronSpectrumConfigurations = neutronSpectrumConfigurations
        self.passiveMaterialConfigurations = passiveMaterialConfigurations
        self.timeStamp = timeStamp
        self.contextStreamConfigurations = contextStreamConfigurations

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.unitId = UUID.ttypes.UUID()
                    self.unitId.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.gammaSpectrumConfigurations = []
                    (_etype10, _size7) = iprot.readListBegin()
                    for _i11 in range(_size7):
                        _elem12 = GammaSensor.ttypes.GammaListAndSpectrumConfiguration()
                        _elem12.read(iprot)
                        self.gammaSpectrumConfigurations.append(_elem12)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.gammaListConfigurations = []
                    (_etype16, _size13) = iprot.readListBegin()
                    for _i17 in range(_size13):
                        _elem18 = GammaSensor.ttypes.GammaListAndSpectrumConfiguration()
                        _elem18.read(iprot)
                        self.gammaListConfigurations.append(_elem18)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.gammaGrossCountConfigurations = []
                    (_etype22, _size19) = iprot.readListBegin()
                    for _i23 in range(_size19):
                        _elem24 = GammaSensor.ttypes.GammaGrossCountConfiguration()
                        _elem24.read(iprot)
                        self.gammaGrossCountConfigurations.append(_elem24)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.LIST:
                    self.gammaDoseConfigurations = []
                    (_etype28, _size25) = iprot.readListBegin()
                    for _i29 in range(_size25):
                        _elem30 = GammaSensor.ttypes.GammaDoseConfiguration()
                        _elem30.read(iprot)
                        self.gammaDoseConfigurations.append(_elem30)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.LIST:
                    self.neutronGrossCountConfigurations = []
                    (_etype34, _size31) = iprot.readListBegin()
                    for _i35 in range(_size31):
                        _elem36 = NeutronSensor.ttypes.NeutronConfiguration()
                        _elem36.read(iprot)
                        self.neutronGrossCountConfigurations.append(_elem36)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.LIST:
                    self.contextVideoConfigurations = []
                    (_etype40, _size37) = iprot.readListBegin()
                    for _i41 in range(_size37):
                        _elem42 = ContextSensor.ttypes.ContextVideoConfiguration()
                        _elem42.read(iprot)
                        self.contextVideoConfigurations.append(_elem42)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.LIST:
                    self.contextPointCloudConfigurations = []
                    (_etype46, _size43) = iprot.readListBegin()
                    for _i47 in range(_size43):
                        _elem48 = ContextSensor.ttypes.Context3DConfiguration()
                        _elem48.read(iprot)
                        self.contextPointCloudConfigurations.append(_elem48)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.LIST:
                    self.contextVoxelConfigurations = []
                    (_etype52, _size49) = iprot.readListBegin()
                    for _i53 in range(_size49):
                        _elem54 = ContextSensor.ttypes.Context3DConfiguration()
                        _elem54.read(iprot)
                        self.contextVoxelConfigurations.append(_elem54)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.LIST:
                    self.contextMeshConfigurations = []
                    (_etype58, _size55) = iprot.readListBegin()
                    for _i59 in range(_size55):
                        _elem60 = ContextSensor.ttypes.Context3DConfiguration()
                        _elem60.read(iprot)
                        self.contextMeshConfigurations.append(_elem60)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.LIST:
                    self.algorithmConfigurations = []
                    (_etype64, _size61) = iprot.readListBegin()
                    for _i65 in range(_size61):
                        _elem66 = AlgorithmPayload.ttypes.AlgorithmConfiguration()
                        _elem66.read(iprot)
                        self.algorithmConfigurations.append(_elem66)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.LIST:
                    self.neutronListConfigurations = []
                    (_etype70, _size67) = iprot.readListBegin()
                    for _i71 in range(_size67):
                        _elem72 = NeutronSensor.ttypes.NeutronListAndSpectrumConfiguration()
                        _elem72.read(iprot)
                        self.neutronListConfigurations.append(_elem72)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.LIST:
                    self.neutronSpectrumConfigurations = []
                    (_etype76, _size73) = iprot.readListBegin()
                    for _i77 in range(_size73):
                        _elem78 = NeutronSensor.ttypes.NeutronListAndSpectrumConfiguration()
                        _elem78.read(iprot)
                        self.neutronSpectrumConfigurations.append(_elem78)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.LIST:
                    self.passiveMaterialConfigurations = []
                    (_etype82, _size79) = iprot.readListBegin()
                    for _i83 in range(_size79):
                        _elem84 = PassiveMaterial.ttypes.PassiveMaterialConfiguration()
                        _elem84.read(iprot)
                        self.passiveMaterialConfigurations.append(_elem84)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 17:
                if ftype == TType.I64:
                    self.timeStamp = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 18:
                if ftype == TType.LIST:
                    self.contextStreamConfigurations = []
                    (_etype88, _size85) = iprot.readListBegin()
                    for _i89 in range(_size85):
                        _elem90 = ContextSensor.ttypes.ContextStreamConfiguration()
                        _elem90.read(iprot)
                        self.contextStreamConfigurations.append(_elem90)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('SystemConfiguration')
        if self.unitId is not None:
            oprot.writeFieldBegin('unitId', TType.STRUCT, 1)
            self.unitId.write(oprot)
            oprot.writeFieldEnd()
        if self.gammaSpectrumConfigurations is not None:
            oprot.writeFieldBegin('gammaSpectrumConfigurations', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.gammaSpectrumConfigurations))
            for iter91 in self.gammaSpectrumConfigurations:
                iter91.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.gammaListConfigurations is not None:
            oprot.writeFieldBegin('gammaListConfigurations', TType.LIST, 3)
            oprot.writeListBegin(TType.STRUCT, len(self.gammaListConfigurations))
            for iter92 in self.gammaListConfigurations:
                iter92.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.gammaGrossCountConfigurations is not None:
            oprot.writeFieldBegin('gammaGrossCountConfigurations', TType.LIST, 4)
            oprot.writeListBegin(TType.STRUCT, len(self.gammaGrossCountConfigurations))
            for iter93 in self.gammaGrossCountConfigurations:
                iter93.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.gammaDoseConfigurations is not None:
            oprot.writeFieldBegin('gammaDoseConfigurations', TType.LIST, 5)
            oprot.writeListBegin(TType.STRUCT, len(self.gammaDoseConfigurations))
            for iter94 in self.gammaDoseConfigurations:
                iter94.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.neutronGrossCountConfigurations is not None:
            oprot.writeFieldBegin('neutronGrossCountConfigurations', TType.LIST, 8)
            oprot.writeListBegin(TType.STRUCT, len(self.neutronGrossCountConfigurations))
            for iter95 in self.neutronGrossCountConfigurations:
                iter95.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.contextVideoConfigurations is not None:
            oprot.writeFieldBegin('contextVideoConfigurations', TType.LIST, 9)
            oprot.writeListBegin(TType.STRUCT, len(self.contextVideoConfigurations))
            for iter96 in self.contextVideoConfigurations:
                iter96.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.contextPointCloudConfigurations is not None:
            oprot.writeFieldBegin('contextPointCloudConfigurations', TType.LIST, 10)
            oprot.writeListBegin(TType.STRUCT, len(self.contextPointCloudConfigurations))
            for iter97 in self.contextPointCloudConfigurations:
                iter97.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.contextVoxelConfigurations is not None:
            oprot.writeFieldBegin('contextVoxelConfigurations', TType.LIST, 11)
            oprot.writeListBegin(TType.STRUCT, len(self.contextVoxelConfigurations))
            for iter98 in self.contextVoxelConfigurations:
                iter98.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.contextMeshConfigurations is not None:
            oprot.writeFieldBegin('contextMeshConfigurations', TType.LIST, 12)
            oprot.writeListBegin(TType.STRUCT, len(self.contextMeshConfigurations))
            for iter99 in self.contextMeshConfigurations:
                iter99.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.algorithmConfigurations is not None:
            oprot.writeFieldBegin('algorithmConfigurations', TType.LIST, 13)
            oprot.writeListBegin(TType.STRUCT, len(self.algorithmConfigurations))
            for iter100 in self.algorithmConfigurations:
                iter100.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.neutronListConfigurations is not None:
            oprot.writeFieldBegin('neutronListConfigurations', TType.LIST, 14)
            oprot.writeListBegin(TType.STRUCT, len(self.neutronListConfigurations))
            for iter101 in self.neutronListConfigurations:
                iter101.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.neutronSpectrumConfigurations is not None:
            oprot.writeFieldBegin('neutronSpectrumConfigurations', TType.LIST, 15)
            oprot.writeListBegin(TType.STRUCT, len(self.neutronSpectrumConfigurations))
            for iter102 in self.neutronSpectrumConfigurations:
                iter102.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.passiveMaterialConfigurations is not None:
            oprot.writeFieldBegin('passiveMaterialConfigurations', TType.LIST, 16)
            oprot.writeListBegin(TType.STRUCT, len(self.passiveMaterialConfigurations))
            for iter103 in self.passiveMaterialConfigurations:
                iter103.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.timeStamp is not None:
            oprot.writeFieldBegin('timeStamp', TType.I64, 17)
            oprot.writeI64(self.timeStamp)
            oprot.writeFieldEnd()
        if self.contextStreamConfigurations is not None:
            oprot.writeFieldBegin('contextStreamConfigurations', TType.LIST, 18)
            oprot.writeListBegin(TType.STRUCT, len(self.contextStreamConfigurations))
            for iter104 in self.contextStreamConfigurations:
                iter104.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class SystemDefinition(object):
    """
    Attributes:
     - gammaSpectrumDefinitions
     - gammaListDefinitions
     - gammaGrossCountDefinitions
     - gammaDoseDefinitions
     - neutronListDefinitions
     - neutronSpectrumDefinitions
     - neutronGrossCountDefinitions
     - environmentalDefinitions
     - navigationSensorDefinitions
     - contextVideoDefinitions
     - contextPointCloudDefinitions
     - contextVoxelDefinitions
     - contextMeshDefinitions
     - algorithmDefinitions
     - apiVersion
     - passiveMaterialDefinitions
     - timeStamp
     - contextStreamDefinitions
    """


    def __init__(self, gammaSpectrumDefinitions=None, gammaListDefinitions=None, gammaGrossCountDefinitions=None, gammaDoseDefinitions=None, neutronListDefinitions=None, neutronSpectrumDefinitions=None, neutronGrossCountDefinitions=None, environmentalDefinitions=None, navigationSensorDefinitions=None, contextVideoDefinitions=None, contextPointCloudDefinitions=None, contextVoxelDefinitions=None, contextMeshDefinitions=None, algorithmDefinitions=None, apiVersion="0.3.1", passiveMaterialDefinitions=None, timeStamp=None, contextStreamDefinitions=None,):
        self.gammaSpectrumDefinitions = gammaSpectrumDefinitions
        self.gammaListDefinitions = gammaListDefinitions
        self.gammaGrossCountDefinitions = gammaGrossCountDefinitions
        self.gammaDoseDefinitions = gammaDoseDefinitions
        self.neutronListDefinitions = neutronListDefinitions
        self.neutronSpectrumDefinitions = neutronSpectrumDefinitions
        self.neutronGrossCountDefinitions = neutronGrossCountDefinitions
        self.environmentalDefinitions = environmentalDefinitions
        self.navigationSensorDefinitions = navigationSensorDefinitions
        self.contextVideoDefinitions = contextVideoDefinitions
        self.contextPointCloudDefinitions = contextPointCloudDefinitions
        self.contextVoxelDefinitions = contextVoxelDefinitions
        self.contextMeshDefinitions = contextMeshDefinitions
        self.algorithmDefinitions = algorithmDefinitions
        self.apiVersion = apiVersion
        self.passiveMaterialDefinitions = passiveMaterialDefinitions
        self.timeStamp = timeStamp
        self.contextStreamDefinitions = contextStreamDefinitions

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.gammaSpectrumDefinitions = []
                    (_etype108, _size105) = iprot.readListBegin()
                    for _i109 in range(_size105):
                        _elem110 = GammaSensor.ttypes.GammaListAndSpectrumDefinition()
                        _elem110.read(iprot)
                        self.gammaSpectrumDefinitions.append(_elem110)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.gammaListDefinitions = []
                    (_etype114, _size111) = iprot.readListBegin()
                    for _i115 in range(_size111):
                        _elem116 = GammaSensor.ttypes.GammaListAndSpectrumDefinition()
                        _elem116.read(iprot)
                        self.gammaListDefinitions.append(_elem116)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.gammaGrossCountDefinitions = []
                    (_etype120, _size117) = iprot.readListBegin()
                    for _i121 in range(_size117):
                        _elem122 = GammaSensor.ttypes.GammaGrossCountDefinition()
                        _elem122.read(iprot)
                        self.gammaGrossCountDefinitions.append(_elem122)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.gammaDoseDefinitions = []
                    (_etype126, _size123) = iprot.readListBegin()
                    for _i127 in range(_size123):
                        _elem128 = GammaSensor.ttypes.GammaDoseDefinition()
                        _elem128.read(iprot)
                        self.gammaDoseDefinitions.append(_elem128)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.LIST:
                    self.neutronListDefinitions = []
                    (_etype132, _size129) = iprot.readListBegin()
                    for _i133 in range(_size129):
                        _elem134 = NeutronSensor.ttypes.NeutronListDefinition()
                        _elem134.read(iprot)
                        self.neutronListDefinitions.append(_elem134)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.LIST:
                    self.neutronSpectrumDefinitions = []
                    (_etype138, _size135) = iprot.readListBegin()
                    for _i139 in range(_size135):
                        _elem140 = NeutronSensor.ttypes.NeutronSpectrumDefinition()
                        _elem140.read(iprot)
                        self.neutronSpectrumDefinitions.append(_elem140)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.LIST:
                    self.neutronGrossCountDefinitions = []
                    (_etype144, _size141) = iprot.readListBegin()
                    for _i145 in range(_size141):
                        _elem146 = NeutronSensor.ttypes.NeutronGrossCountDefinition()
                        _elem146.read(iprot)
                        self.neutronGrossCountDefinitions.append(_elem146)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.LIST:
                    self.environmentalDefinitions = []
                    (_etype150, _size147) = iprot.readListBegin()
                    for _i151 in range(_size147):
                        _elem152 = EnvironmentalSensor.ttypes.EnvironmentalSensorDefinition()
                        _elem152.read(iprot)
                        self.environmentalDefinitions.append(_elem152)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.LIST:
                    self.navigationSensorDefinitions = []
                    (_etype156, _size153) = iprot.readListBegin()
                    for _i157 in range(_size153):
                        _elem158 = NavigationSensor.ttypes.NavigationSensorDefinition()
                        _elem158.read(iprot)
                        self.navigationSensorDefinitions.append(_elem158)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.LIST:
                    self.contextVideoDefinitions = []
                    (_etype162, _size159) = iprot.readListBegin()
                    for _i163 in range(_size159):
                        _elem164 = ContextSensor.ttypes.ContextVideoDefinition()
                        _elem164.read(iprot)
                        self.contextVideoDefinitions.append(_elem164)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.LIST:
                    self.contextPointCloudDefinitions = []
                    (_etype168, _size165) = iprot.readListBegin()
                    for _i169 in range(_size165):
                        _elem170 = ContextSensor.ttypes.Context3DDefinition()
                        _elem170.read(iprot)
                        self.contextPointCloudDefinitions.append(_elem170)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.LIST:
                    self.contextVoxelDefinitions = []
                    (_etype174, _size171) = iprot.readListBegin()
                    for _i175 in range(_size171):
                        _elem176 = ContextSensor.ttypes.Context3DDefinition()
                        _elem176.read(iprot)
                        self.contextVoxelDefinitions.append(_elem176)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.LIST:
                    self.contextMeshDefinitions = []
                    (_etype180, _size177) = iprot.readListBegin()
                    for _i181 in range(_size177):
                        _elem182 = ContextSensor.ttypes.Context3DDefinition()
                        _elem182.read(iprot)
                        self.contextMeshDefinitions.append(_elem182)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.LIST:
                    self.algorithmDefinitions = []
                    (_etype186, _size183) = iprot.readListBegin()
                    for _i187 in range(_size183):
                        _elem188 = AlgorithmPayload.ttypes.AlgorithmDefinition()
                        _elem188.read(iprot)
                        self.algorithmDefinitions.append(_elem188)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.STRING:
                    self.apiVersion = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.LIST:
                    self.passiveMaterialDefinitions = []
                    (_etype192, _size189) = iprot.readListBegin()
                    for _i193 in range(_size189):
                        _elem194 = PassiveMaterial.ttypes.PassiveMaterialConfiguration()
                        _elem194.read(iprot)
                        self.passiveMaterialDefinitions.append(_elem194)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 17:
                if ftype == TType.I64:
                    self.timeStamp = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 18:
                if ftype == TType.LIST:
                    self.contextStreamDefinitions = []
                    (_etype198, _size195) = iprot.readListBegin()
                    for _i199 in range(_size195):
                        _elem200 = ContextSensor.ttypes.ContextStreamDefinition()
                        _elem200.read(iprot)
                        self.contextStreamDefinitions.append(_elem200)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('SystemDefinition')
        if self.gammaSpectrumDefinitions is not None:
            oprot.writeFieldBegin('gammaSpectrumDefinitions', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.gammaSpectrumDefinitions))
            for iter201 in self.gammaSpectrumDefinitions:
                iter201.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.gammaListDefinitions is not None:
            oprot.writeFieldBegin('gammaListDefinitions', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.gammaListDefinitions))
            for iter202 in self.gammaListDefinitions:
                iter202.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.gammaGrossCountDefinitions is not None:
            oprot.writeFieldBegin('gammaGrossCountDefinitions', TType.LIST, 3)
            oprot.writeListBegin(TType.STRUCT, len(self.gammaGrossCountDefinitions))
            for iter203 in self.gammaGrossCountDefinitions:
                iter203.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.gammaDoseDefinitions is not None:
            oprot.writeFieldBegin('gammaDoseDefinitions', TType.LIST, 4)
            oprot.writeListBegin(TType.STRUCT, len(self.gammaDoseDefinitions))
            for iter204 in self.gammaDoseDefinitions:
                iter204.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.neutronListDefinitions is not None:
            oprot.writeFieldBegin('neutronListDefinitions', TType.LIST, 5)
            oprot.writeListBegin(TType.STRUCT, len(self.neutronListDefinitions))
            for iter205 in self.neutronListDefinitions:
                iter205.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.neutronSpectrumDefinitions is not None:
            oprot.writeFieldBegin('neutronSpectrumDefinitions', TType.LIST, 6)
            oprot.writeListBegin(TType.STRUCT, len(self.neutronSpectrumDefinitions))
            for iter206 in self.neutronSpectrumDefinitions:
                iter206.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.neutronGrossCountDefinitions is not None:
            oprot.writeFieldBegin('neutronGrossCountDefinitions', TType.LIST, 7)
            oprot.writeListBegin(TType.STRUCT, len(self.neutronGrossCountDefinitions))
            for iter207 in self.neutronGrossCountDefinitions:
                iter207.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.environmentalDefinitions is not None:
            oprot.writeFieldBegin('environmentalDefinitions', TType.LIST, 8)
            oprot.writeListBegin(TType.STRUCT, len(self.environmentalDefinitions))
            for iter208 in self.environmentalDefinitions:
                iter208.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.navigationSensorDefinitions is not None:
            oprot.writeFieldBegin('navigationSensorDefinitions', TType.LIST, 9)
            oprot.writeListBegin(TType.STRUCT, len(self.navigationSensorDefinitions))
            for iter209 in self.navigationSensorDefinitions:
                iter209.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.contextVideoDefinitions is not None:
            oprot.writeFieldBegin('contextVideoDefinitions', TType.LIST, 10)
            oprot.writeListBegin(TType.STRUCT, len(self.contextVideoDefinitions))
            for iter210 in self.contextVideoDefinitions:
                iter210.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.contextPointCloudDefinitions is not None:
            oprot.writeFieldBegin('contextPointCloudDefinitions', TType.LIST, 11)
            oprot.writeListBegin(TType.STRUCT, len(self.contextPointCloudDefinitions))
            for iter211 in self.contextPointCloudDefinitions:
                iter211.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.contextVoxelDefinitions is not None:
            oprot.writeFieldBegin('contextVoxelDefinitions', TType.LIST, 12)
            oprot.writeListBegin(TType.STRUCT, len(self.contextVoxelDefinitions))
            for iter212 in self.contextVoxelDefinitions:
                iter212.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.contextMeshDefinitions is not None:
            oprot.writeFieldBegin('contextMeshDefinitions', TType.LIST, 13)
            oprot.writeListBegin(TType.STRUCT, len(self.contextMeshDefinitions))
            for iter213 in self.contextMeshDefinitions:
                iter213.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.algorithmDefinitions is not None:
            oprot.writeFieldBegin('algorithmDefinitions', TType.LIST, 14)
            oprot.writeListBegin(TType.STRUCT, len(self.algorithmDefinitions))
            for iter214 in self.algorithmDefinitions:
                iter214.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.apiVersion is not None:
            oprot.writeFieldBegin('apiVersion', TType.STRING, 15)
            oprot.writeString(self.apiVersion.encode('utf-8') if sys.version_info[0] == 2 else self.apiVersion)
            oprot.writeFieldEnd()
        if self.passiveMaterialDefinitions is not None:
            oprot.writeFieldBegin('passiveMaterialDefinitions', TType.LIST, 16)
            oprot.writeListBegin(TType.STRUCT, len(self.passiveMaterialDefinitions))
            for iter215 in self.passiveMaterialDefinitions:
                iter215.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.timeStamp is not None:
            oprot.writeFieldBegin('timeStamp', TType.I64, 17)
            oprot.writeI64(self.timeStamp)
            oprot.writeFieldEnd()
        if self.contextStreamDefinitions is not None:
            oprot.writeFieldBegin('contextStreamDefinitions', TType.LIST, 18)
            oprot.writeListBegin(TType.STRUCT, len(self.contextStreamDefinitions))
            for iter216 in self.contextStreamDefinitions:
                iter216.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class DataPayload(object):
    """
    The data payload is designed to divide the data into 100 ms sections.  The method for dividing the data is to conform to the
    following rules:

    - The timestamp below indicates the END of the time period in question.  Therefore, the data included in the packet is data
      that was generated between the previous timestamp and this timestamp.
    - When possible, this data payload SHOULD include ALL of the data for the 100 ms time slice in question.
    - If new data comes in from a sensor for a time period that has already been sent, then it may be sent in a packet with
      the correct timestamp by itself (do not resend all of the data for the time period that has already been sent as this would
      result in duplicating data in the data stream).  HOWEVER, do not expect algorithms or the CVRS to be able to make
      use of this data (although they could), it is only included for completeness of the data set.

    Attributes:
     - unitId
     - timeStamp: Milliseconds since Unix epoch.  Indicates the END of the time period for which the data is relevant
     - systemHealth
     - isEOF: Sent in *emtpy* message with this set to true when the data stream is over for a recording
     - recordingConfig: Only sent with very first message or if the configuration changes (i.e. duration changes)
     - gammaSpectrumData: Gamma data associated with this timestamp
     - gammaListData
     - gammaGrossCountData
     - gammaDoseData
     - neutronListData: Neutron data associated with this timestamp
     - neutronSpectrumData
     - neutronGrossCountData
     - environmentalData: Environmental data associated with this timestamp
     - navigationData: Navigation data associated with this timestamp
     - videoData: Context data associated with this timestamp
     - pointCloudData
     - voxelData
     - meshData
     - messages: Messages associated with this timestamp
     - waypoints: Waypoints associated with this timestamp
     - boundingBoxes: Bounding boxes associated with this timestamp
     - markers: Markers associated with this timestamp
     - algorithmData
     - streamIndexData
     - configuration: Updates to the configuration.
    This is included whenever a configuration is changed.
    This should be an incremental update containing only the configuration elements that were altered.
    Changes in a configuration value apply to the current payload data and future payloads.
    """


    def __init__(self, unitId=None, timeStamp=None, systemHealth=None, isEOF=False, recordingConfig=None, gammaSpectrumData=None, gammaListData=None, gammaGrossCountData=None, gammaDoseData=None, neutronListData=None, neutronSpectrumData=None, neutronGrossCountData=None, environmentalData=None, navigationData=None, videoData=None, pointCloudData=None, voxelData=None, meshData=None, messages=None, waypoints=None, boundingBoxes=None, markers=None, algorithmData=None, streamIndexData=None, configuration=None,):
        self.unitId = unitId
        self.timeStamp = timeStamp
        self.systemHealth = systemHealth
        self.isEOF = isEOF
        self.recordingConfig = recordingConfig
        self.gammaSpectrumData = gammaSpectrumData
        self.gammaListData = gammaListData
        self.gammaGrossCountData = gammaGrossCountData
        self.gammaDoseData = gammaDoseData
        self.neutronListData = neutronListData
        self.neutronSpectrumData = neutronSpectrumData
        self.neutronGrossCountData = neutronGrossCountData
        self.environmentalData = environmentalData
        self.navigationData = navigationData
        self.videoData = videoData
        self.pointCloudData = pointCloudData
        self.voxelData = voxelData
        self.meshData = meshData
        self.messages = messages
        self.waypoints = waypoints
        self.boundingBoxes = boundingBoxes
        self.markers = markers
        self.algorithmData = algorithmData
        self.streamIndexData = streamIndexData
        self.configuration = configuration

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.unitId = UUID.ttypes.UUID()
                    self.unitId.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.timeStamp = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.systemHealth = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.BOOL:
                    self.isEOF = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.recordingConfig = RecordingConfiguration()
                    self.recordingConfig.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.LIST:
                    self.gammaSpectrumData = []
                    (_etype220, _size217) = iprot.readListBegin()
                    for _i221 in range(_size217):
                        _elem222 = GammaSensor.ttypes.GammaSpectrumData()
                        _elem222.read(iprot)
                        self.gammaSpectrumData.append(_elem222)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.LIST:
                    self.gammaListData = []
                    (_etype226, _size223) = iprot.readListBegin()
                    for _i227 in range(_size223):
                        _elem228 = GammaSensor.ttypes.GammaListData()
                        _elem228.read(iprot)
                        self.gammaListData.append(_elem228)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.LIST:
                    self.gammaGrossCountData = []
                    (_etype232, _size229) = iprot.readListBegin()
                    for _i233 in range(_size229):
                        _elem234 = GammaSensor.ttypes.GammaGrossCountData()
                        _elem234.read(iprot)
                        self.gammaGrossCountData.append(_elem234)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.LIST:
                    self.gammaDoseData = []
                    (_etype238, _size235) = iprot.readListBegin()
                    for _i239 in range(_size235):
                        _elem240 = GammaSensor.ttypes.GammaDoseData()
                        _elem240.read(iprot)
                        self.gammaDoseData.append(_elem240)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.LIST:
                    self.neutronListData = []
                    (_etype244, _size241) = iprot.readListBegin()
                    for _i245 in range(_size241):
                        _elem246 = NeutronSensor.ttypes.NeutronListData()
                        _elem246.read(iprot)
                        self.neutronListData.append(_elem246)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.LIST:
                    self.neutronSpectrumData = []
                    (_etype250, _size247) = iprot.readListBegin()
                    for _i251 in range(_size247):
                        _elem252 = NeutronSensor.ttypes.NeutronSpectrumData()
                        _elem252.read(iprot)
                        self.neutronSpectrumData.append(_elem252)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.LIST:
                    self.neutronGrossCountData = []
                    (_etype256, _size253) = iprot.readListBegin()
                    for _i257 in range(_size253):
                        _elem258 = NeutronSensor.ttypes.NeutronGrossCountData()
                        _elem258.read(iprot)
                        self.neutronGrossCountData.append(_elem258)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.LIST:
                    self.environmentalData = []
                    (_etype262, _size259) = iprot.readListBegin()
                    for _i263 in range(_size259):
                        _elem264 = EnvironmentalSensor.ttypes.EnvironmentalSensorData()
                        _elem264.read(iprot)
                        self.environmentalData.append(_elem264)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.LIST:
                    self.navigationData = []
                    (_etype268, _size265) = iprot.readListBegin()
                    for _i269 in range(_size265):
                        _elem270 = NavigationSensor.ttypes.NavigationData()
                        _elem270.read(iprot)
                        self.navigationData.append(_elem270)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.LIST:
                    self.videoData = []
                    (_etype274, _size271) = iprot.readListBegin()
                    for _i275 in range(_size271):
                        _elem276 = ContextSensor.ttypes.ContextVideoData()
                        _elem276.read(iprot)
                        self.videoData.append(_elem276)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.LIST:
                    self.pointCloudData = []
                    (_etype280, _size277) = iprot.readListBegin()
                    for _i281 in range(_size277):
                        _elem282 = ContextSensor.ttypes.ContextPointCloudData()
                        _elem282.read(iprot)
                        self.pointCloudData.append(_elem282)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 17:
                if ftype == TType.LIST:
                    self.voxelData = []
                    (_etype286, _size283) = iprot.readListBegin()
                    for _i287 in range(_size283):
                        _elem288 = ContextSensor.ttypes.ContextVoxelData()
                        _elem288.read(iprot)
                        self.voxelData.append(_elem288)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 18:
                if ftype == TType.LIST:
                    self.meshData = []
                    (_etype292, _size289) = iprot.readListBegin()
                    for _i293 in range(_size289):
                        _elem294 = ContextSensor.ttypes.ContextMeshData()
                        _elem294.read(iprot)
                        self.meshData.append(_elem294)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 19:
                if ftype == TType.LIST:
                    self.messages = []
                    (_etype298, _size295) = iprot.readListBegin()
                    for _i299 in range(_size295):
                        _elem300 = WINDMessage.ttypes.Message()
                        _elem300.read(iprot)
                        self.messages.append(_elem300)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 20:
                if ftype == TType.LIST:
                    self.waypoints = []
                    (_etype304, _size301) = iprot.readListBegin()
                    for _i305 in range(_size301):
                        _elem306 = Navigation.ttypes.Waypoint()
                        _elem306.read(iprot)
                        self.waypoints.append(_elem306)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 21:
                if ftype == TType.LIST:
                    self.boundingBoxes = []
                    (_etype310, _size307) = iprot.readListBegin()
                    for _i311 in range(_size307):
                        _elem312 = Navigation.ttypes.BoundingBox()
                        _elem312.read(iprot)
                        self.boundingBoxes.append(_elem312)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 22:
                if ftype == TType.LIST:
                    self.markers = []
                    (_etype316, _size313) = iprot.readListBegin()
                    for _i317 in range(_size313):
                        _elem318 = Marker.ttypes.Marker()
                        _elem318.read(iprot)
                        self.markers.append(_elem318)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 23:
                if ftype == TType.LIST:
                    self.algorithmData = []
                    (_etype322, _size319) = iprot.readListBegin()
                    for _i323 in range(_size319):
                        _elem324 = AlgorithmPayload.ttypes.AlgorithmData()
                        _elem324.read(iprot)
                        self.algorithmData.append(_elem324)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 24:
                if ftype == TType.LIST:
                    self.streamIndexData = []
                    (_etype328, _size325) = iprot.readListBegin()
                    for _i329 in range(_size325):
                        _elem330 = ContextSensor.ttypes.ContextStreamIndexData()
                        _elem330.read(iprot)
                        self.streamIndexData.append(_elem330)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 25:
                if ftype == TType.LIST:
                    self.configuration = []
                    (_etype334, _size331) = iprot.readListBegin()
                    for _i335 in range(_size331):
                        _elem336 = SystemConfiguration()
                        _elem336.read(iprot)
                        self.configuration.append(_elem336)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('DataPayload')
        if self.unitId is not None:
            oprot.writeFieldBegin('unitId', TType.STRUCT, 1)
            self.unitId.write(oprot)
            oprot.writeFieldEnd()
        if self.timeStamp is not None:
            oprot.writeFieldBegin('timeStamp', TType.I64, 2)
            oprot.writeI64(self.timeStamp)
            oprot.writeFieldEnd()
        if self.systemHealth is not None:
            oprot.writeFieldBegin('systemHealth', TType.I32, 3)
            oprot.writeI32(self.systemHealth)
            oprot.writeFieldEnd()
        if self.isEOF is not None:
            oprot.writeFieldBegin('isEOF', TType.BOOL, 4)
            oprot.writeBool(self.isEOF)
            oprot.writeFieldEnd()
        if self.recordingConfig is not None:
            oprot.writeFieldBegin('recordingConfig', TType.STRUCT, 5)
            self.recordingConfig.write(oprot)
            oprot.writeFieldEnd()
        if self.gammaSpectrumData is not None:
            oprot.writeFieldBegin('gammaSpectrumData', TType.LIST, 6)
            oprot.writeListBegin(TType.STRUCT, len(self.gammaSpectrumData))
            for iter337 in self.gammaSpectrumData:
                iter337.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.gammaListData is not None:
            oprot.writeFieldBegin('gammaListData', TType.LIST, 7)
            oprot.writeListBegin(TType.STRUCT, len(self.gammaListData))
            for iter338 in self.gammaListData:
                iter338.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.gammaGrossCountData is not None:
            oprot.writeFieldBegin('gammaGrossCountData', TType.LIST, 8)
            oprot.writeListBegin(TType.STRUCT, len(self.gammaGrossCountData))
            for iter339 in self.gammaGrossCountData:
                iter339.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.gammaDoseData is not None:
            oprot.writeFieldBegin('gammaDoseData', TType.LIST, 9)
            oprot.writeListBegin(TType.STRUCT, len(self.gammaDoseData))
            for iter340 in self.gammaDoseData:
                iter340.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.neutronListData is not None:
            oprot.writeFieldBegin('neutronListData', TType.LIST, 10)
            oprot.writeListBegin(TType.STRUCT, len(self.neutronListData))
            for iter341 in self.neutronListData:
                iter341.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.neutronSpectrumData is not None:
            oprot.writeFieldBegin('neutronSpectrumData', TType.LIST, 11)
            oprot.writeListBegin(TType.STRUCT, len(self.neutronSpectrumData))
            for iter342 in self.neutronSpectrumData:
                iter342.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.neutronGrossCountData is not None:
            oprot.writeFieldBegin('neutronGrossCountData', TType.LIST, 12)
            oprot.writeListBegin(TType.STRUCT, len(self.neutronGrossCountData))
            for iter343 in self.neutronGrossCountData:
                iter343.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.environmentalData is not None:
            oprot.writeFieldBegin('environmentalData', TType.LIST, 13)
            oprot.writeListBegin(TType.STRUCT, len(self.environmentalData))
            for iter344 in self.environmentalData:
                iter344.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.navigationData is not None:
            oprot.writeFieldBegin('navigationData', TType.LIST, 14)
            oprot.writeListBegin(TType.STRUCT, len(self.navigationData))
            for iter345 in self.navigationData:
                iter345.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.videoData is not None:
            oprot.writeFieldBegin('videoData', TType.LIST, 15)
            oprot.writeListBegin(TType.STRUCT, len(self.videoData))
            for iter346 in self.videoData:
                iter346.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.pointCloudData is not None:
            oprot.writeFieldBegin('pointCloudData', TType.LIST, 16)
            oprot.writeListBegin(TType.STRUCT, len(self.pointCloudData))
            for iter347 in self.pointCloudData:
                iter347.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.voxelData is not None:
            oprot.writeFieldBegin('voxelData', TType.LIST, 17)
            oprot.writeListBegin(TType.STRUCT, len(self.voxelData))
            for iter348 in self.voxelData:
                iter348.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.meshData is not None:
            oprot.writeFieldBegin('meshData', TType.LIST, 18)
            oprot.writeListBegin(TType.STRUCT, len(self.meshData))
            for iter349 in self.meshData:
                iter349.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.messages is not None:
            oprot.writeFieldBegin('messages', TType.LIST, 19)
            oprot.writeListBegin(TType.STRUCT, len(self.messages))
            for iter350 in self.messages:
                iter350.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.waypoints is not None:
            oprot.writeFieldBegin('waypoints', TType.LIST, 20)
            oprot.writeListBegin(TType.STRUCT, len(self.waypoints))
            for iter351 in self.waypoints:
                iter351.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.boundingBoxes is not None:
            oprot.writeFieldBegin('boundingBoxes', TType.LIST, 21)
            oprot.writeListBegin(TType.STRUCT, len(self.boundingBoxes))
            for iter352 in self.boundingBoxes:
                iter352.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.markers is not None:
            oprot.writeFieldBegin('markers', TType.LIST, 22)
            oprot.writeListBegin(TType.STRUCT, len(self.markers))
            for iter353 in self.markers:
                iter353.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.algorithmData is not None:
            oprot.writeFieldBegin('algorithmData', TType.LIST, 23)
            oprot.writeListBegin(TType.STRUCT, len(self.algorithmData))
            for iter354 in self.algorithmData:
                iter354.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.streamIndexData is not None:
            oprot.writeFieldBegin('streamIndexData', TType.LIST, 24)
            oprot.writeListBegin(TType.STRUCT, len(self.streamIndexData))
            for iter355 in self.streamIndexData:
                iter355.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.configuration is not None:
            oprot.writeFieldBegin('configuration', TType.LIST, 25)
            oprot.writeListBegin(TType.STRUCT, len(self.configuration))
            for iter356 in self.configuration:
                iter356.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(RecordingConfiguration)
RecordingConfiguration.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'unitId', [UUID.ttypes.UUID, None], None, ),  # 1
    (2, TType.STRUCT, 'recordingId', [UUID.ttypes.UUID, None], None, ),  # 2
    (3, TType.STRING, 'campaign', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'tag', 'UTF8', None, ),  # 4
    None,  # 5
    (6, TType.STRING, 'description', 'UTF8', None, ),  # 6
    (7, TType.STRING, 'location', 'UTF8', None, ),  # 7
    (8, TType.STRING, 'fileName', 'UTF8', None, ),  # 8
    (9, TType.I32, 'recordingType', None, None, ),  # 9
    (10, TType.I64, 'recordingDuration', None, None, ),  # 10
    (11, TType.I64, 'POSIXStartTime', None, None, ),  # 11
    (12, TType.I32, 'measurementNumber', None, None, ),  # 12
)
all_structs.append(Status)
Status.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'unitId', [UUID.ttypes.UUID, None], None, ),  # 1
    (2, TType.BOOL, 'isRecording', None, None, ),  # 2
    (3, TType.STRUCT, 'recordingId', [UUID.ttypes.UUID, None], None, ),  # 3
    (4, TType.DOUBLE, 'hardDriveUsedPercent', None, None, ),  # 4
    (5, TType.DOUBLE, 'batteryRemainingPercent', None, None, ),  # 5
    None,  # 6
    None,  # 7
    None,  # 8
    None,  # 9
    (10, TType.I64, 'systemTime', None, None, ),  # 10
    (11, TType.STRING, 'cvrsURI', 'UTF8', None, ),  # 11
    (12, TType.STRUCT, 'cvrsSessionId', [UUID.ttypes.UUID, None], None, ),  # 12
)
all_structs.append(DataFilter)
DataFilter.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'componentIds', (TType.STRUCT, [UUID.ttypes.UUID, None], False), None, ),  # 1
    (2, TType.BOOL, 'includeMessages', None, True, ),  # 2
    (3, TType.BOOL, 'includeWaypoints', None, True, ),  # 3
    (4, TType.BOOL, 'includeBoundingBoxes', None, True, ),  # 4
    (5, TType.BOOL, 'includeMarkers', None, True, ),  # 5
)
all_structs.append(UnitDefinition)
UnitDefinition.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'unitId', [UUID.ttypes.UUID, None], None, ),  # 1
    (2, TType.STRING, 'unitName', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'softwareVersion', 'UTF8', None, ),  # 3
    None,  # 4
    (5, TType.STRING, 'hardwareRevision', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'vendor', 'UTF8', None, ),  # 6
    (7, TType.I32, 'unitType', None, None, ),  # 7
    (8, TType.STRING, 'protocolVersion', 'UTF8', "0.3.1", ),  # 8
)
all_structs.append(SystemConfiguration)
SystemConfiguration.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'unitId', [UUID.ttypes.UUID, None], None, ),  # 1
    (2, TType.LIST, 'gammaSpectrumConfigurations', (TType.STRUCT, [GammaSensor.ttypes.GammaListAndSpectrumConfiguration, None], False), None, ),  # 2
    (3, TType.LIST, 'gammaListConfigurations', (TType.STRUCT, [GammaSensor.ttypes.GammaListAndSpectrumConfiguration, None], False), None, ),  # 3
    (4, TType.LIST, 'gammaGrossCountConfigurations', (TType.STRUCT, [GammaSensor.ttypes.GammaGrossCountConfiguration, None], False), None, ),  # 4
    (5, TType.LIST, 'gammaDoseConfigurations', (TType.STRUCT, [GammaSensor.ttypes.GammaDoseConfiguration, None], False), None, ),  # 5
    None,  # 6
    None,  # 7
    (8, TType.LIST, 'neutronGrossCountConfigurations', (TType.STRUCT, [NeutronSensor.ttypes.NeutronConfiguration, None], False), None, ),  # 8
    (9, TType.LIST, 'contextVideoConfigurations', (TType.STRUCT, [ContextSensor.ttypes.ContextVideoConfiguration, None], False), None, ),  # 9
    (10, TType.LIST, 'contextPointCloudConfigurations', (TType.STRUCT, [ContextSensor.ttypes.Context3DConfiguration, None], False), None, ),  # 10
    (11, TType.LIST, 'contextVoxelConfigurations', (TType.STRUCT, [ContextSensor.ttypes.Context3DConfiguration, None], False), None, ),  # 11
    (12, TType.LIST, 'contextMeshConfigurations', (TType.STRUCT, [ContextSensor.ttypes.Context3DConfiguration, None], False), None, ),  # 12
    (13, TType.LIST, 'algorithmConfigurations', (TType.STRUCT, [AlgorithmPayload.ttypes.AlgorithmConfiguration, None], False), None, ),  # 13
    (14, TType.LIST, 'neutronListConfigurations', (TType.STRUCT, [NeutronSensor.ttypes.NeutronListAndSpectrumConfiguration, None], False), None, ),  # 14
    (15, TType.LIST, 'neutronSpectrumConfigurations', (TType.STRUCT, [NeutronSensor.ttypes.NeutronListAndSpectrumConfiguration, None], False), None, ),  # 15
    (16, TType.LIST, 'passiveMaterialConfigurations', (TType.STRUCT, [PassiveMaterial.ttypes.PassiveMaterialConfiguration, None], False), None, ),  # 16
    (17, TType.I64, 'timeStamp', None, None, ),  # 17
    (18, TType.LIST, 'contextStreamConfigurations', (TType.STRUCT, [ContextSensor.ttypes.ContextStreamConfiguration, None], False), None, ),  # 18
)
all_structs.append(SystemDefinition)
SystemDefinition.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'gammaSpectrumDefinitions', (TType.STRUCT, [GammaSensor.ttypes.GammaListAndSpectrumDefinition, None], False), None, ),  # 1
    (2, TType.LIST, 'gammaListDefinitions', (TType.STRUCT, [GammaSensor.ttypes.GammaListAndSpectrumDefinition, None], False), None, ),  # 2
    (3, TType.LIST, 'gammaGrossCountDefinitions', (TType.STRUCT, [GammaSensor.ttypes.GammaGrossCountDefinition, None], False), None, ),  # 3
    (4, TType.LIST, 'gammaDoseDefinitions', (TType.STRUCT, [GammaSensor.ttypes.GammaDoseDefinition, None], False), None, ),  # 4
    (5, TType.LIST, 'neutronListDefinitions', (TType.STRUCT, [NeutronSensor.ttypes.NeutronListDefinition, None], False), None, ),  # 5
    (6, TType.LIST, 'neutronSpectrumDefinitions', (TType.STRUCT, [NeutronSensor.ttypes.NeutronSpectrumDefinition, None], False), None, ),  # 6
    (7, TType.LIST, 'neutronGrossCountDefinitions', (TType.STRUCT, [NeutronSensor.ttypes.NeutronGrossCountDefinition, None], False), None, ),  # 7
    (8, TType.LIST, 'environmentalDefinitions', (TType.STRUCT, [EnvironmentalSensor.ttypes.EnvironmentalSensorDefinition, None], False), None, ),  # 8
    (9, TType.LIST, 'navigationSensorDefinitions', (TType.STRUCT, [NavigationSensor.ttypes.NavigationSensorDefinition, None], False), None, ),  # 9
    (10, TType.LIST, 'contextVideoDefinitions', (TType.STRUCT, [ContextSensor.ttypes.ContextVideoDefinition, None], False), None, ),  # 10
    (11, TType.LIST, 'contextPointCloudDefinitions', (TType.STRUCT, [ContextSensor.ttypes.Context3DDefinition, None], False), None, ),  # 11
    (12, TType.LIST, 'contextVoxelDefinitions', (TType.STRUCT, [ContextSensor.ttypes.Context3DDefinition, None], False), None, ),  # 12
    (13, TType.LIST, 'contextMeshDefinitions', (TType.STRUCT, [ContextSensor.ttypes.Context3DDefinition, None], False), None, ),  # 13
    (14, TType.LIST, 'algorithmDefinitions', (TType.STRUCT, [AlgorithmPayload.ttypes.AlgorithmDefinition, None], False), None, ),  # 14
    (15, TType.STRING, 'apiVersion', 'UTF8', "0.3.1", ),  # 15
    (16, TType.LIST, 'passiveMaterialDefinitions', (TType.STRUCT, [PassiveMaterial.ttypes.PassiveMaterialConfiguration, None], False), None, ),  # 16
    (17, TType.I64, 'timeStamp', None, None, ),  # 17
    (18, TType.LIST, 'contextStreamDefinitions', (TType.STRUCT, [ContextSensor.ttypes.ContextStreamDefinition, None], False), None, ),  # 18
)
all_structs.append(DataPayload)
DataPayload.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'unitId', [UUID.ttypes.UUID, None], None, ),  # 1
    (2, TType.I64, 'timeStamp', None, None, ),  # 2
    (3, TType.I32, 'systemHealth', None, None, ),  # 3
    (4, TType.BOOL, 'isEOF', None, False, ),  # 4
    (5, TType.STRUCT, 'recordingConfig', [RecordingConfiguration, None], None, ),  # 5
    (6, TType.LIST, 'gammaSpectrumData', (TType.STRUCT, [GammaSensor.ttypes.GammaSpectrumData, None], False), None, ),  # 6
    (7, TType.LIST, 'gammaListData', (TType.STRUCT, [GammaSensor.ttypes.GammaListData, None], False), None, ),  # 7
    (8, TType.LIST, 'gammaGrossCountData', (TType.STRUCT, [GammaSensor.ttypes.GammaGrossCountData, None], False), None, ),  # 8
    (9, TType.LIST, 'gammaDoseData', (TType.STRUCT, [GammaSensor.ttypes.GammaDoseData, None], False), None, ),  # 9
    (10, TType.LIST, 'neutronListData', (TType.STRUCT, [NeutronSensor.ttypes.NeutronListData, None], False), None, ),  # 10
    (11, TType.LIST, 'neutronSpectrumData', (TType.STRUCT, [NeutronSensor.ttypes.NeutronSpectrumData, None], False), None, ),  # 11
    (12, TType.LIST, 'neutronGrossCountData', (TType.STRUCT, [NeutronSensor.ttypes.NeutronGrossCountData, None], False), None, ),  # 12
    (13, TType.LIST, 'environmentalData', (TType.STRUCT, [EnvironmentalSensor.ttypes.EnvironmentalSensorData, None], False), None, ),  # 13
    (14, TType.LIST, 'navigationData', (TType.STRUCT, [NavigationSensor.ttypes.NavigationData, None], False), None, ),  # 14
    (15, TType.LIST, 'videoData', (TType.STRUCT, [ContextSensor.ttypes.ContextVideoData, None], False), None, ),  # 15
    (16, TType.LIST, 'pointCloudData', (TType.STRUCT, [ContextSensor.ttypes.ContextPointCloudData, None], False), None, ),  # 16
    (17, TType.LIST, 'voxelData', (TType.STRUCT, [ContextSensor.ttypes.ContextVoxelData, None], False), None, ),  # 17
    (18, TType.LIST, 'meshData', (TType.STRUCT, [ContextSensor.ttypes.ContextMeshData, None], False), None, ),  # 18
    (19, TType.LIST, 'messages', (TType.STRUCT, [WINDMessage.ttypes.Message, None], False), None, ),  # 19
    (20, TType.LIST, 'waypoints', (TType.STRUCT, [Navigation.ttypes.Waypoint, None], False), None, ),  # 20
    (21, TType.LIST, 'boundingBoxes', (TType.STRUCT, [Navigation.ttypes.BoundingBox, None], False), None, ),  # 21
    (22, TType.LIST, 'markers', (TType.STRUCT, [Marker.ttypes.Marker, None], False), None, ),  # 22
    (23, TType.LIST, 'algorithmData', (TType.STRUCT, [AlgorithmPayload.ttypes.AlgorithmData, None], False), None, ),  # 23
    (24, TType.LIST, 'streamIndexData', (TType.STRUCT, [ContextSensor.ttypes.ContextStreamIndexData, None], False), None, ),  # 24
    (25, TType.LIST, 'configuration', (TType.STRUCT, [SystemConfiguration, None], False), None, ),  # 25
)
fix_spec(all_structs)
del all_structs
