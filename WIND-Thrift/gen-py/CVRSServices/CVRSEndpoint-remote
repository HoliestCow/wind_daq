#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from CVRSServices import CVRSEndpoint
from CVRSServices.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  Session registerPtu(UnitDefinition unitDefinition)')
    print('  bool define(UUID sessionId, Status status, SystemDefinition systemDefinition, SystemConfiguration systemConfiguration, RecordingUpdate recordingUpdate)')
    print('   reportStatus(UUID sessionId, Status status, DefinitionAndConfigurationUpdate definitionAndConfigurationUpdate)')
    print('  bool pushData(UUID sessionId, DataPayload datum, DefinitionAndConfigurationUpdate definitionAndConfigurationUpdate)')
    print('  bool pushAcknowledgements(UUID sessionId,  acknowledgements)')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = CVRSEndpoint.Client(protocol)
transport.open()

if cmd == 'registerPtu':
    if len(args) != 1:
        print('registerPtu requires 1 args')
        sys.exit(1)
    pp.pprint(client.registerPtu(eval(args[0]),))

elif cmd == 'define':
    if len(args) != 5:
        print('define requires 5 args')
        sys.exit(1)
    pp.pprint(client.define(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]), eval(args[4]),))

elif cmd == 'reportStatus':
    if len(args) != 3:
        print('reportStatus requires 3 args')
        sys.exit(1)
    pp.pprint(client.reportStatus(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'pushData':
    if len(args) != 3:
        print('pushData requires 3 args')
        sys.exit(1)
    pp.pprint(client.pushData(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'pushAcknowledgements':
    if len(args) != 2:
        print('pushAcknowledgements requires 2 args')
        sys.exit(1)
    pp.pprint(client.pushAcknowledgements(eval(args[0]), eval(args[1]),))

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
