#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys

from thrift.transport import TTransport
all_structs = []


class SpectrumFormat(object):
    """
    Spectrum formats.  Sensors may serialize data using one
    of the following data formats.

    """
    CHANNEL_VALUE = 1
    ARRAY = 2
    ZERO_PACK = 4

    _VALUES_TO_NAMES = {
        1: "CHANNEL_VALUE",
        2: "ARRAY",
        4: "ZERO_PACK",
    }

    _NAMES_TO_VALUES = {
        "CHANNEL_VALUE": 1,
        "ARRAY": 2,
        "ZERO_PACK": 4,
    }


class ListMode(object):
    """
    Attributes:
     - eventTime
     - channel
    """


    def __init__(self, eventTime=None, channel=None,):
        self.eventTime = eventTime
        self.channel = channel

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.eventTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.channel = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ListMode')
        if self.eventTime is not None:
            oprot.writeFieldBegin('eventTime', TType.I64, 1)
            oprot.writeI64(self.eventTime)
            oprot.writeFieldEnd()
        if self.channel is not None:
            oprot.writeFieldBegin('channel', TType.I32, 2)
            oprot.writeI32(self.channel)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class DoubleSpectrum(object):
    """
    Attributes:
     - spectrumDouble: The spectrum data itself *
     - format: The format of the data in channelData

     - channelCount: The resolution of the spectra
     
     - liveTime: Live time in milliseconds
    """


    def __init__(self, spectrumDouble=None, format=None, channelCount=None, liveTime=None,):
        self.spectrumDouble = spectrumDouble
        self.format = format
        self.channelCount = channelCount
        self.liveTime = liveTime

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.spectrumDouble = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = iprot.readDouble()
                        self.spectrumDouble.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.format = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.channelCount = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.liveTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('DoubleSpectrum')
        if self.spectrumDouble is not None:
            oprot.writeFieldBegin('spectrumDouble', TType.LIST, 1)
            oprot.writeListBegin(TType.DOUBLE, len(self.spectrumDouble))
            for iter6 in self.spectrumDouble:
                oprot.writeDouble(iter6)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.format is not None:
            oprot.writeFieldBegin('format', TType.I32, 2)
            oprot.writeI32(self.format)
            oprot.writeFieldEnd()
        if self.channelCount is not None:
            oprot.writeFieldBegin('channelCount', TType.I32, 3)
            oprot.writeI32(self.channelCount)
            oprot.writeFieldEnd()
        if self.liveTime is not None:
            oprot.writeFieldBegin('liveTime', TType.I64, 4)
            oprot.writeI64(self.liveTime)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Spectrum(object):
    """
    Attributes:
     - spectrumInt: The spectrum data itself. Implementations should fill only one
    of these values

     - format: The format of the data in channelData

     - channelCount: The resolution of the spectra
     
     - liveTime: Live time in milliseconds
    """


    def __init__(self, spectrumInt=None, format=None, channelCount=None, liveTime=None,):
        self.spectrumInt = spectrumInt
        self.format = format
        self.channelCount = channelCount
        self.liveTime = liveTime

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.spectrumInt = []
                    (_etype10, _size7) = iprot.readListBegin()
                    for _i11 in range(_size7):
                        _elem12 = iprot.readI32()
                        self.spectrumInt.append(_elem12)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.format = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.channelCount = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.liveTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Spectrum')
        if self.spectrumInt is not None:
            oprot.writeFieldBegin('spectrumInt', TType.LIST, 1)
            oprot.writeListBegin(TType.I32, len(self.spectrumInt))
            for iter13 in self.spectrumInt:
                oprot.writeI32(iter13)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.format is not None:
            oprot.writeFieldBegin('format', TType.I32, 2)
            oprot.writeI32(self.format)
            oprot.writeFieldEnd()
        if self.channelCount is not None:
            oprot.writeFieldBegin('channelCount', TType.I32, 3)
            oprot.writeI32(self.channelCount)
            oprot.writeFieldEnd()
        if self.liveTime is not None:
            oprot.writeFieldBegin('liveTime', TType.I64, 4)
            oprot.writeI64(self.liveTime)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class SpectrumResult(object):
    """
    Used when result can be either integer spectrum or double spectrum

    Attributes:
     - intSpectrum
     - doubleSpectrum
    """


    def __init__(self, intSpectrum=None, doubleSpectrum=None,):
        self.intSpectrum = intSpectrum
        self.doubleSpectrum = doubleSpectrum

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.intSpectrum = Spectrum()
                    self.intSpectrum.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.doubleSpectrum = DoubleSpectrum()
                    self.doubleSpectrum.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('SpectrumResult')
        if self.intSpectrum is not None:
            oprot.writeFieldBegin('intSpectrum', TType.STRUCT, 1)
            self.intSpectrum.write(oprot)
            oprot.writeFieldEnd()
        if self.doubleSpectrum is not None:
            oprot.writeFieldBegin('doubleSpectrum', TType.STRUCT, 2)
            self.doubleSpectrum.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(ListMode)
ListMode.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'eventTime', None, None, ),  # 1
    (2, TType.I32, 'channel', None, None, ),  # 2
)
all_structs.append(DoubleSpectrum)
DoubleSpectrum.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'spectrumDouble', (TType.DOUBLE, None, False), None, ),  # 1
    (2, TType.I32, 'format', None, None, ),  # 2
    (3, TType.I32, 'channelCount', None, None, ),  # 3
    (4, TType.I64, 'liveTime', None, None, ),  # 4
)
all_structs.append(Spectrum)
Spectrum.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'spectrumInt', (TType.I32, None, False), None, ),  # 1
    (2, TType.I32, 'format', None, None, ),  # 2
    (3, TType.I32, 'channelCount', None, None, ),  # 3
    (4, TType.I64, 'liveTime', None, None, ),  # 4
)
all_structs.append(SpectrumResult)
SpectrumResult.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'intSpectrum', [Spectrum, None], None, ),  # 1
    (2, TType.STRUCT, 'doubleSpectrum', [DoubleSpectrum, None], None, ),  # 2
)
fix_spec(all_structs)
del all_structs
